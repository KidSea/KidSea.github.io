<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android运行环境Context理解]]></title>
      <url>http://yoursite.com/2017/03/10/%E8%B0%88%E8%B0%88%E5%AF%B9Context%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>&#160;&#160;&#160;Context相信有Android开发经验的人不陌生，基本上每天都在接触，谈谈自己对Context的理解</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Context类型"><a href="#Context类型" class="headerlink" title="Context类型"></a>Context类型</h2><p>&#160;&#160;&#160;Context通常被翻译为上下文，我通常理解为Android的运行环境，在Android中，Activity、Service、Application都是继承自Context。Android程序不像Java程序一样，随便创建一个类，写个main()方法就能跑了，而是要有一个完整的Android工程环境，在这个环境下，我们有像Activity、Service、BroadcastReceiver等系统组件，而这些组件并不是像一个普通的Java对象new一下就能创建实例的了，而是要有它们各自的上下文环境，也就是这里讨论的Context。</p>
<p>&#160;&#160;&#160;Android应用程序如下几个时间点创建应用的上下文Context:</p>
<ol>
<li><p>创建Application时</p>
</li>
<li><p>创建Activity时</p>
</li>
<li><p>创建Service时</p>
</li>
</ol>
<p>&#160;&#160;&#160;细心的人可以发现，创建Context的时机就是创建Context的实现类。在应用第一次启动的时候，系统就会创建Application对象，同时创建ApplicationContext，而系统所有的组件都拥有一个这样的上下文对象，这个上下文对象贯穿整个应用程序的生命周期，为系统提供了全局的功能和环境支持，当然创建组件的时候，系统也会给组件创建他们自己相应的上下问对象，但是从原理上来说某些时候二者是有一些区别的。</p>
<h2 id="getContext-、getApplicationContext-、this的区别"><a href="#getContext-、getApplicationContext-、this的区别" class="headerlink" title="getContext()、getApplicationContext()、this的区别"></a>getContext()、getApplicationContext()、this的区别</h2><p>&#160;&#160;&#160;使用this，说明当前类是context类的子类，一般是application activity等</p>
<p>&#160;&#160;&#160;getApplicationContext()指的是app所使用的application，是在AndroidManifest唯一指定的意味着，在当前app的任意位置使用这个函数得到的是同一个Context，而使用getContext获取的是当前对象所在的Context。</p>
<p>&#160;&#160;&#160;举个简单的例子。</p>
<p>&#160;&#160;&#160;我们在公司上班， 我们是一个类，公司是一个类，公司.this是context()即公司的环境，我.this不是context，而我getcontext()是指公司的环境。而getApplicationContext()则可以看做是所有公司的集合，发生的所有事情都在这个集合中，有且只有一个。 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开源库LitePal的用法]]></title>
      <url>http://yoursite.com/2017/02/23/Activity%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93LitePal%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>&#160;&#160;&#160;LitePal是一个开源的Android库，允许开发人员使用SQLite数据库非常容易。您可以完成大多数数据库操作，甚至不需要编写SQL语句，包括创建或升级表，压缩操作，聚合函数等。LitePal的设置也很简单，您可以将它集成到您的项目中少于5分钟。</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="LitePal的快速配置"><a href="#LitePal的快速配置" class="headerlink" title="LitePal的快速配置"></a>LitePal的快速配置</h2><h3 id="1-引入Jar包或源码"><a href="#1-引入Jar包或源码" class="headerlink" title="1.引入Jar包或源码"></a>1.引入Jar包或源码</h3><p>&#160;&#160;&#160;使用Android Studio在项目的build.gradle中添加下面依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'org.litepal.android:core:1.3.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;使用Eclipse到<a href="https://github.com/LitePalFramework/LitePal#latest-downloads/" target="_blank" rel="external">这里</a>下载好了jar包之后，把它复制到项目的libs目录中就算是引入成功了。</p>
<h3 id="2-配置litepal-xml"><a href="#2-配置litepal-xml" class="headerlink" title="2.配置litepal.xml"></a>2.配置litepal.xml</h3><p>&#160;&#160;&#160;在项目的assets目录下面新建一个litepal.xml文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"cool_weather"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.Province"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.City"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.County"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;其中：</p>
<ul>
<li><dbname>是数据库的名字</dbname></li>
<li><version>是数据库的版本号</version></li>
<li><list>是数据库的映射模型（数据库表）</list></li>
<li><mapping>是数据库的映射模型的地址（数据库表结构）</mapping></li>
</ul>
<h3 id="3-配置LitePalApplication"><a href="#3-配置LitePalApplication" class="headerlink" title="3. 配置LitePalApplication"></a>3. 配置LitePalApplication</h3><p>&#160;&#160;&#160;在AndroidManifest.xml中配置LitePalApplication，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></div><div class="line">    <span class="attr">...</span></div><div class="line">    &gt;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;如果是已经有自己的application,则可以继承LitePalApplication或者在代码中加入如下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">LitePalApplication</span> </span>&#123;  </div><div class="line">    ...  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">AnotherApplication</span></span>&#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        LitePal.initialize(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    ...  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LitePal的建表"><a href="#LitePal的建表" class="headerlink" title="LitePal的建表"></a>LitePal的建表</h2><p>&#160;&#160;&#160;根据对象关系映射模式的理念，每一张表都应该对应一个模型(Model)，建表先要新建一个模型类，新建一个Province类，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> <span class="keyword">extends</span> <span class="title">DataSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String provinceName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> provinceCode;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProvinceCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> provinceCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceCode</span><span class="params">(<span class="keyword">int</span> provinceCode)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.provinceCode = provinceCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvinceName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> provinceName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceName</span><span class="params">(String provinceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.provinceName = provinceName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;LitePal的映射规则是非常轻量级的，不像一些其它的数据库框架，需要为每个模型类单独配置一个映射关系的XML，LitePal的所有映射都是自动完成的。根据LitePal的数据类型支持，可以进行对象关系映射的数据类型一共有8种，int、short、long、float、double、boolean、String和Date。只要是声明成这8种数据类型的字段都会被自动映射到数据库表中，并不需要进行任何额外的配置。</p>
<blockquote>
<p>注意:只有private修饰的字段才会被映射到数据库表中，即如果有某一个字段不想映射的话，就设置为public、protected或者default修饰符就可以了。</p>
</blockquote>
<p>&#160;&#160;&#160;建立好Model后，我们就把他配置到映射列表中，即编辑assest目录下的litepal.xml文件，在<list>标签中加入DEST类的声明，这里要注意，要类的完整类名。</list></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"cool_weather"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.Province"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;到这里，就完成了LitePal数据库的配置。</p>
<h2 id="LitePal的升级表"><a href="#LitePal的升级表" class="headerlink" title="LitePal的升级表"></a>LitePal的升级表</h2><h3 id="1-添加新表"><a href="#1-添加新表" class="headerlink" title="1.添加新表"></a>1.添加新表</h3><p>&#160;&#160;&#160;首先创建一个新的模型类，然后把它设置到litepal.xml中，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"cool_weather"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.Province"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.City"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.County"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;然后，把litepal.xml中的version的值加一即可，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"cool_weather"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.Province"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.City"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.yuxuehai.coolweather.bean.County"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-旧表添加新列"><a href="#2-旧表添加新列" class="headerlink" title="2.旧表添加新列"></a>2.旧表添加新列</h3><p>&#160;&#160;&#160;首先在需要升级的模型类中添加新的private修饰的字段,然后再把litepal.xml中的version的值加一即可，这里就不展示代码了，读者可以自己去体验。</p>
<h2 id="LitePal的操作"><a href="#LitePal的操作" class="headerlink" title="LitePal的操作"></a>LitePal的操作</h2><p>&#160;&#160;&#160;LitePal要存储数据，首先模型类要继承DataSupport，即：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> <span class="keyword">extends</span> <span class="title">DataSupport</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;继承了DataSupport类之后，这些实体类就拥有了进行CRUD操作的能力。</p>
<h3 id="1-存储操作"><a href="#1-存储操作" class="headerlink" title="1.存储操作"></a>1.存储操作</h3><p>&#160;&#160;&#160;创建对象，为对象的属性进行赋值，最后调用save()方法即可存储，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Province province = <span class="keyword">new</span> Province();</div><div class="line">province.setProvinceName(provinceObject.getString(<span class="string">"name"</span>));</div><div class="line">province.setProvinceCode(provinceObject.getInt(<span class="string">"id"</span>));</div><div class="line">province.save();</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;更好的是，save()方法是有返回值的，读者可以根据自己需要对其进行判断后做出一些操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mDest.save()) &#123;  </div><div class="line">    Toast.makeText(context, <span class="string">"存储成功"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line">    Toast.makeText(context, <span class="string">"存储失败"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-修改操作"><a href="#2-修改操作" class="headerlink" title="2.修改操作"></a>2.修改操作</h3><p>&#160;&#160;&#160;如果想把Province表中id为1的provinceCode改为”1”，可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ContentValues values = <span class="keyword">new</span> ContentValues();  </div><div class="line">values.put(<span class="string">"provinceCode"</span>, <span class="string">"1"</span>);  </div><div class="line">DataSupport.update(Pronvice.class, values, <span class="number">1</span>);  </div><div class="line"></div><div class="line"><span class="comment">//或者用下面这种方法</span></div><div class="line"></div><div class="line">Province updateNews = <span class="keyword">new</span> Province();  </div><div class="line">updateNews.setProvinceCode(<span class="number">1</span>) </div><div class="line">updateNews.update(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;如果想把Province表中所有id为”1”的改为”2”可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ContentValues values = <span class="keyword">new</span> ContentValues();  </div><div class="line">values.put(<span class="string">"provinceCode"</span>, <span class="string">"2"</span>);  </div><div class="line">DataSupport.updateAll(DEST.class, values, <span class="string">"provinceCode = ?"</span>, <span class="string">"1"</span>);  </div><div class="line"></div><div class="line"><span class="comment">//或者用下面这种方法</span></div><div class="line"></div><div class="line">Province updateNews = <span class="keyword">new</span> Province();  </div><div class="line">updateNews.setProvinceCode(<span class="string">"2"</span>);  </div><div class="line">updateNews.updateAll(<span class="string">"setProvinceCode = ?"</span>, <span class="string">"1"</span>);</div></pre></td></tr></table></figure>
<h3 id="3-LitePal的删除操作"><a href="#3-LitePal的删除操作" class="headerlink" title="3.LitePal的删除操作"></a>3.LitePal的删除操作</h3><p>&#160;&#160;&#160;比如说我们想删除Province表中id为2的记录，就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSupport.delete(Province.class, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;想把Province表中id为“1”的所有数据删除，就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSupport.deleteAll(Province.class, <span class="string">"destId = ? "</span>, <span class="string">"1"</span>);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;想把Province表中所有数据删除，就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSupport.deleteAll(Province.class);</div></pre></td></tr></table></figure>
<h3 id="LitePal的查询操作"><a href="#LitePal的查询操作" class="headerlink" title="LitePal的查询操作"></a>LitePal的查询操作</h3><p>&#160;&#160;&#160;查询Province表中id为1的这条记录，使用LitePal就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Province mProvince = DataSupport.find(Province.class, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;想要获取Province表中的第一条数据，只需要这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Province mProvince = DataSupport.findFirst(Province.class);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;想要获取Province表中的最后一条数据，只需要这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Province mProvince = DataSupport.findLast(Province.class);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;查询Province表中id为1,2,3的这条记录，使用LitePal就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Province&gt; mProvince = DataSupport.findAll(Province.class,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;查询所有数据，只需要这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Province&gt; mProvince = DataSupport.findAll(Province.class);</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;笔者只是对一些简单的操作进行介绍，如想学习更多操作请浏览guolin郭霖老师的博客点<a href="http://blog.csdn.net/guolin_blog/article/details/38083103" target="_blank" rel="external">这里</a></p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/02/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Recyclerview的用法]]></title>
      <url>http://yoursite.com/2017/01/14/recycleview%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>简单的介绍下Recyclerview的用法</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Android5-0-RecyclerView特点、用法、及自定义动画"><a href="#Android5-0-RecyclerView特点、用法、及自定义动画" class="headerlink" title="Android5.0 RecyclerView特点、用法、及自定义动画"></a>Android5.0 RecyclerView特点、用法、及自定义动画</h2><p>&#160;&#160;&#160;RecyclerView派生于ViewGroup，是一种更先进的柔性版的ListView。这个小工具是一个容器，用于显示，它能非常有效地维护了数量有限而滚动大的数据集。相对于ListView来说RecyclerView使用起来更加灵活但同时也增加了一定的复杂度，它在最新的support-V7版本中提供支持.本文主要分为以下2个部分：</p>
<ol>
<li>RecyclerView的简单使用</li>
<li>简单介绍RecyclerView的四大组件</li>
</ol>
<h3 id="RecyclerView的简单使用"><a href="#RecyclerView的简单使用" class="headerlink" title="RecyclerView的简单使用"></a>RecyclerView的简单使用</h3><p>&#160;&#160;&#160;虽说相对于以前的ListView，RecyclerView基本上没有新增的功能，但在功能的具体实现和使用的方法上两者却有着很大的区别。要使用RecyclerView，需要先了解这几个个元素：LayoutManager，RecyclerView.Adapter，Itemanimator以及itemDecoration。LayoutManager控制RecyclerView的布局以及资源的回收，RecyclerView.Adapter用于设置数据，ItemAnimator用于创建列表的Item动画，而ItemDecoration则用于绘制列表子项额外的内容。以上四个均为RecyclerView中的抽象类，带有最基本的接口和参数，开发者可以通过继承以上几个类进行扩展实现不同的功能效果。下面首先通过附件中的SimpleDemo介绍一下RecyclerVIew的使用方法：</p>
<h4 id="1-定义布局文件"><a href="#1-定义布局文件" class="headerlink" title="1. 定义布局文件"></a>1. 定义布局文件</h4><p>&#160;&#160;&#160;activity_main.xml的主要布局如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line"><span class="attr">android:id</span>=<span class="string">"@+id/recyclerview_vertical"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"><span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span> /&gt;</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;RecyclerView是android.support.v7包下提供的控件,要使用RecyclerView可以直接把源码上整个的v7包导入到工程中， 或者把当前的API升级到21，在sdk/extras/android/support/v7目录下找到android-support-v7-recyclerview.jar（其实也可以直接从网上的Demo中直接copy对应的jar包过去，不过应当注意最近的版本中部分接口已经做了相应的变化 ,应下载最新的jar包），将其导入到工程内即可。</p>
<h4 id="2-设置RecyclerView-Adapter"><a href="#2-设置RecyclerView-Adapter" class="headerlink" title="2. 设置RecyclerView.Adapter"></a>2. 设置RecyclerView.Adapter</h4><p>&#160;&#160;&#160;Demo中的SimpleAdapter.java中的主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义ViewHolder，包含两个控件</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> TextView mTextView;</div><div class="line">    <span class="keyword">public</span> ImageView mImageView;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">    	<span class="keyword">super</span>(itemView);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    View view = View.inflate(viewGroup.getContext(), R.layout.item_layout, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">// 创建ViewHolder</span></div><div class="line">    ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">    holder.mImageView = (ImageView)view.findViewById(R.id.id_index_item_image);</div><div class="line">    holder.mTextView = (TextView)view.findViewById(R.id.id_index_item_text);</div><div class="line">    <span class="keyword">return</span> holder;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder viewHolder,<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">	<span class="comment">//设置TextView内容</span></div><div class="line">	viewHolder.mTextView.setText(mData[i]);</div><div class="line">	<span class="comment">//设置ImageView资源</span></div><div class="line">	viewHolder.mImageView.setImageResource(R.drawable.mail);		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-定义Decoration"><a href="#3-定义Decoration" class="headerlink" title="3. 定义Decoration"></a>3. 定义Decoration</h4><p>&#160;&#160;&#160;Decoration.java的主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mDivider == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.onDrawOver(c, parent);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//为横向布局的RecyclerView的每个Item设置下划线</span></div><div class="line">    <span class="keyword">if</span> (getOrientation(parent) == LinearLayoutManager.VERTICAL) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = mDivider.getIntrinsicHeight();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - params.topMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + size;</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h4 id="4-初始化操作"><a href="#4-初始化操作" class="headerlink" title="4. 初始化操作"></a>4. 初始化操作</h4><p>&#160;&#160;&#160;在MainActivity.java的主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mRecyclerView = (RecyclerView)findViewById(R.id.recyclerview_vertical);</div><div class="line">SimpleAdapter simpleAdapter = <span class="keyword">new</span> SimpleAdapter(dataset, <span class="keyword">this</span>);</div><div class="line">mRecyclerView.setAdapter(simpleAdapter);</div><div class="line"><span class="comment">// 创建一个线性布局管理器</span></div><div class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">layoutManager.setOrientation(LinearLayoutManager.VERTICAL);</div><div class="line"><span class="comment">// 设置布局管理器&amp;#160;&amp;#160;&amp;#160;</span></div><div class="line">mRecyclerView.setLayoutManager(layoutManager);</div><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> Decoration(<span class="keyword">this</span>));</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;Demo中实现的效果如下：</p>
<p><img src="/images/2017-1-14-1.jpg" alt="image"></p>
<h3 id="RecyclerView的四大组件"><a href="#RecyclerView的四大组件" class="headerlink" title="RecyclerView的四大组件"></a>RecyclerView的四大组件</h3><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><p>&#160;&#160;&#160;RecyclerView使用的Adapter与ListView使用的BaseAdapter类似，但是，前者定义的Adapter必须继承自RecyclerView.Adapter，内部必须重写三个方法，oncreateViewHolder（）onbindViewHolder（）getItemCount（）,onCreateViewHolder（）类似于BaseAdapter中的getview（）,ListView可以选择使用ViewHolder（）但RecyclerView为了回收资源，必须使用ViewHolder。先对比两者子类部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//如果缓存convertView为空，则需要创建View</span></div><div class="line">    <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">        <span class="comment">//根据自定义的Item布局加载布局</span></div><div class="line">        convertView = mInflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line">        holder.img = (ImageViewShadow)convertView.findViewById(R.id.img);</div><div class="line">        holder.title = (TextView)convertView.findViewById(R.id.tv);</div><div class="line">        holder.info = (TextView)convertView.findViewById(R.id.info);</div><div class="line">        <span class="comment">//将设置好的布局保存到缓存中，并将其设置在Tag里，以便后面方便取出Tag</span></div><div class="line">        convertView.setTag(holder);</div><div class="line">    &#125;<span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        holder = (ViewHolder)convertView.getTag();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Drawable D = StrokeDrawableUtils.createStrokeDrawable(getResources().getDrawable(R.drawable.mail), getResources());</div><div class="line">    holder.img.setImageDrawable(D);</div><div class="line">    ho.setText((String)data.get(position).get(<span class="string">"title"</span>));</div><div class="line">    holder.info.setText((String)data.get(position).get(<span class="string">"info"</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    View view = mInflater.inflate(R.layout.activity_index_item,</div><div class="line">            viewGroup, <span class="keyword">false</span>);</div><div class="line">    <span class="comment">//创建viewHolder对象和绑定viewHolder內的所有组件</span></div><div class="line">    ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line"></div><div class="line">    viewHolder.mImg = (ImageView) view</div><div class="line">            .findViewById(R.id.id_index_gallery_item_image);</div><div class="line">    viewHolder.mTxt = (TextView)view.findViewById(R.id.id_index_gallery_item_text);</div><div class="line">    <span class="keyword">return</span> viewHolder;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder viewHolder, <span class="keyword">final</span> <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    viewHolder.mImg.setImageResource(mDatas.get(i));</div><div class="line">    viewHolder.mTxt.setText(String.valueOf(i));</div><div class="line">    ....</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160;&#160;&#160;对比以上代码，可以看出在RecyclerView中， ViewHolder直接充当缓存的单位，然后convertView作为ViewHolder的成员变量保持在ViewHolder中，也就是说，假设没有屏幕显示10个条目，则会创建10个ViewHolder缓存起来，每次复用的是ViewHolder，所以他把getView这个方法变为了onCreateViewHolder，而ListView的复用机制则是利用静态的holder把conertiew里面包含的所有组件保存起来，并通过setTag将其与conertView捆绑在一起，convertView是复用对象。</p>
<h4 id="ItemDecoration"><a href="#ItemDecoration" class="headerlink" title="ItemDecoration"></a>ItemDecoration</h4><p>&#160;&#160;&#160;Decoration意为修饰，android的开发文档中有这样的说明：ItemDecoration允许程序添加自定义的绘画或者布局边距，常用于分割列表子项，突显视觉上的界限。这类似于listView中的devider，但listView中所画的分割线是在Listview内部实现，对于开发者来说，灵活性较低。在新的RecyclerView中很好的解决这个问题，RecycView把对Decoration的控制交给了开发者，RecyclerView默认不带Decoration，但继承自RecyclerView.ItemDecoration开发者通过重写public void onDrawOver(Canvas c, RecyclerView parent)和public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent)等，结合CardView的使用可以实现不错的视觉效果，下面为默认模式和加入简单划线对比：</p>
<p> <img src="/images/2017-1-14-3.png" alt="image"> <img src="/images/2017-1-14-2.png" alt="image"></p>
<h4 id="LayoutManager"><a href="#LayoutManager" class="headerlink" title="LayoutManager"></a>LayoutManager</h4><p>&#160;&#160;&#160;这个类决定视图被放在画面中哪个位置，但这只是它的众多职责之一。它可以管理滚动和循环利用，ListView则不能设置为横向。在最新的support v7 中LayoutManager有三个实现类，LinearlayoutManager,GridLayoutManager和StaggeredGridLayoutManager，LayoutManager可以模拟列表的视图，但是没有页眉和页尾。开发者可以仿照原生给出的LinearLayoutManager代码创建一个BaseLayoutManager，并且基于此进行扩展。而在Android L以前，为了给LIstView后期进行扩展，ListVIew的主体功能实现都放在AbsListView，然后通过ListView，和GridVIew实现不同的布局，而在RecyclerVIew中则可以通过设置不同的LayoutManager达到此效果。下面给出RecyclerVIew不同的布局效果：</p>
<p> <img src="/images/2017-1-14-4.png" alt="image">  <img src="/images/2017-1-14-5.png" alt="image"><br> <img src="/images/2017-1-14-6.png" alt="image"></p>
<p>&#160;&#160;&#160;另外需要说明一下，使用RecylerView时必须加入LayoutManager，否则会出现报错。</p>
<h4 id="ItemAnimator"><a href="#ItemAnimator" class="headerlink" title="ItemAnimator"></a>ItemAnimator</h4><p>&#160;&#160;&#160;在ListView中我们通常在Adatper 的getview（）的时候对特定的item做动画。在RecyclerView中加入了新的实现方法。ItemAnimator同样是RecyclerView中的的抽象类，在V7包中给出了默认的实现类DefaultItemAnimator（渐隐），开发者同样的可以通过继承RecyclerView.ItemAnimator,参考DefaultAnimator建立BaseItemAnimator，然后对其进行扩展打造不同的动画效果，使用时通过调用Recycler.Adapter中的notifyItemChanged（）notifyItemInserted（）等方法触发，如果是使用默认的动画效果，直接添加如下代码即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> DefaultItemAnimator defaultItemAnimator = <span class="keyword">new</span> DefaultItemAnimator();</div><div class="line">recyclerView.setItemAnimator(defaultItemAnimator);</div></pre></td></tr></table></figure>
<p> <img src="/images/2017-1-14-7.gif" alt="image"></p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mvc、Mvp、Mvvm的使用]]></title>
      <url>http://yoursite.com/2017/01/09/Mvc%E3%80%81Mvp%E3%80%81Mvvm%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>MVC的概念很早就知道，现在发现还有MVP、MVVM，那么这些设计模式有什么区别呢？简单谈一下自己的理解</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>&#160;&#160;&#160;MVC、MVP和MVVM都是为了解决界面呈现和逻辑代码分离而出现的模式。经典的MVC模式是M-V-X模式的老祖宗，MVP和MVVM都是在MVC的基础上演化而来，和MVC框架模式一样，Model模型处理数据代码。这些架构的目的都是为了提高代码的复用率、降低代码的耦合度、便于模块测试、版本的迭代更新，下面对每个架构进行简单的介绍与使用。</p>
<h2 id="Mvc架构"><a href="#Mvc架构" class="headerlink" title="Mvc架构"></a>Mvc架构</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&#160;&#160;&#160;MVC全名是Model View Controller，如下图，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑，是Java企业级应用的典型架构,当然Android中界面部分也采用了当前比较流行的MVC框架，笔者在最开始接触android的时候用的比较多的是Mvc架构。</p>
<p><img src="/images/2017-1-4.png" alt="image"></p>
<p align="center">Mvc模式</p>

<p>&#160;&#160;&#160;如上图所示，其中M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层。</p>
<h3 id="Android中的Mvc"><a href="#Android中的Mvc" class="headerlink" title="Android中的Mvc"></a>Android中的Mvc</h3><p>&#160;&#160;&#160;在Android中：</p>
<ol>
<li>视图层：一般采用XML文件进行界面的描述，这些XML可以理解为AndroidApp的View。使用的时候可以非常方便的引入。同时便于后期界面的修改。逻辑中与界面对应的id不变化则代码不用修改，大大增强了代码的可维护性。</li>
<li>控制层：Android的控制层的重任通常落在了众多的Activity的肩上。这句话也就暗含了不要在Activity中写代码，要通过Activity交割Model业务逻辑层处理，这样做的另外一个原因是Android中的Actiivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。</li>
<li>模型层(Model)：我们针对业务模型，建立的数据结构和相关的类，就可以理解为AndroidApp的Model，Model是与View无关，而与业务相关的。对数据库的操作、对网络等的操作都应该在Model里面处理，当然对业务计算等操作也是必须放在的该层的。就是应用程序中二进制的数据。</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>&#160;&#160;&#160;请访问下面地址下载代码<a href="https://github.com/KidSea/CasualProject" target="_blank" rel="external">Mvc</a>,例子很简单，就是一个验证登入的例子，但是能很好的代入Mvc的特点。</p>
<h3 id="Android中的Mvc的缺点"><a href="#Android中的Mvc的缺点" class="headerlink" title="Android中的Mvc的缺点"></a>Android中的Mvc的缺点</h3><p>&#160;&#160;&#160;MVC虽然将界面呈现和逻辑代码分离了,但是在实际的Android开发中并没有完全起到想要的作用。View对应的XML文件实际能做的事情很少，很多界面显示由Controllor对应的Activity给做了，这样使得Activity变成了一个类似View和Controllor之间的一个东西。如果是小型项目，MVC是没任何问题的。因为项目比较小嘛，开发周期比较短，Controllor臃肿点也可以理解。假设项目越来越来，尤其是再加上比较复杂的逻辑，这时候一个Activity几千行代码就比较蛋疼了，再加点迷之缩进，那酸爽~~啧啧。所以MVC比较适用于快速开发的小型项目。</p>
<p>&#160;&#160;&#160;因为在在Android开发中，Activity并不是一个标准的MVC模式中的Controller，它的首要职责是加载应用的布局和初始化用户 界面，并接受并处理来自用户的操作请求，进而作出响应。随着界面及其逻辑的复杂度不断提升，Activity类的职责不断增加，以致变得庞大臃肿。</p>
<h2 id="Mvp架构"><a href="#Mvp架构" class="headerlink" title="Mvp架构"></a>Mvp架构</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>&#160;&#160;&#160;MVP从更早的MVC框架演变过来，与MVC有一定的相似性：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。</p>
<p><img src="/images/2017-1-4-2.png" alt="image"></p>
<p align="center">Mvp模式</p>

<p>&#160;&#160;&#160;MVP框架由3部分组成：View负责显示，Presenter负责逻辑处理，Model提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：</p>
<ul>
<li><p>View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity)</p>
</li>
<li><p>Model:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合)</p>
</li>
<li><p>Presenter:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。</p>
</li>
<li><p>View interface:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试</p>
</li>
</ul>
<h3 id="与Mvc的区别"><a href="#与Mvc的区别" class="headerlink" title="与Mvc的区别"></a>与Mvc的区别</h3><p>&#160;&#160;&#160;两种模式的主要区别：<br>View与Model并不直接交互，而是通过与Presenter交互来与Model间接交互。而在MVC中View可以与Model直接交互<br>通常View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑。而Controller是基于行为的，并且可以被多个View共享，Controller可以负责决定显示哪个View<br>Presenter与View的交互是通过接口来进行的，更有利于添加单元测试。</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>&#160;&#160;&#160;请访问下面地址下载代码<a href="https://github.com/KidSea/CasualProject" target="_blank" rel="external">Mvp</a> ,例子是在Mvc的基础先进行改进的，从Mvp的例子里可以看出：</p>
<ul>
<li>在MVP中，Activity的代码不臃肿；</li>
<li>在MVP中，Model(IUserModel的实现类)的改动不会影响Activity(View)，两者也互不干涉，而在MVC中会；</li>
<li>在MVP中，IUserView这个接口可以实现方便地对Presenter的测试；</li>
<li>在MVP中，UserPresenter可以用于多个视图，但是在MVC中的Activity就不行。</li>
</ul>
<h3 id="Mvp的缺点"><a href="#Mvp的缺点" class="headerlink" title="Mvp的缺点"></a>Mvp的缺点</h3><p>&#160;&#160;&#160;MVP模式虽然很好，但是增加了很多的接口和实现类。代码逻辑虽然清晰，但是代码量要庞大一些。当刚接手一个烂尾的MVP模式，如果事先没了解过MVP，会不会一脸的懵逼。所以MVP比较适用于中小型的项目，大型项目慎用。</p>
<h2 id="Mvvm架构"><a href="#Mvvm架构" class="headerlink" title="Mvvm架构"></a>Mvvm架构</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>&#160;&#160;&#160;MVVM可以算是MVP的升级版，其中的VM是ViewModel的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。</p>
<p><img src="/images/2017-1-4-3.png" alt="image"></p>
<p align="center">Mvc模式</p>

<h3 id="架构的演进"><a href="#架构的演进" class="headerlink" title="架构的演进"></a>架构的演进</h3><p>&#160;&#160;&#160;MVC -&gt; MVP -&gt; MVVM 这几个软件设计模式是一步步演化发展的，MVVM 是从 MVP 的进一步发展与规范，MVP 隔离了MVC中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用 MVP 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是 showData、showLoading等等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 MVVM 就弥补了这些缺陷。在 MVVM 中就出现的 Data Binding 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过 Binding 来实现。</p>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>&#160;&#160;&#160;请访问下面地址下载代码<a href="https://github.com/KidSea/CasualProject" target="_blank" rel="external">Mvvm</a> ,对于Mvvm读者用的不多，所以只能是班门弄斧了，想要多了解的话，去问问度娘或谷歌吧。</p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读深入理解Java虚拟机]]></title>
      <url>http://yoursite.com/2017/01/08/%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>简单谈下Java虚拟机的垃圾回收机制</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>&#160;&#160;&#160;对于Java来说，垃圾回收大部分人都把这个技术作为其伴生的产物，但是实际上GC技术的历史远比Java久远。并且对于我们的程序来说，垃圾回收机制的存在是十分有必要的，在通常情况下，垃圾收集对性能的影响一般有以下几个一般有以下几点：</p>
<ul>
<li>内存泄露</li>
<li>程序暂停</li>
<li>程序吞吐量下降</li>
<li>响应时间慢</li>
</ul>
<h3 id="垃圾收集的一些基本概念"><a href="#垃圾收集的一些基本概念" class="headerlink" title="垃圾收集的一些基本概念"></a>垃圾收集的一些基本概念</h3><ul>
<li>Concurrent Collector: 收集的同时可运行其他的工作进程。</li>
<li>Parallel Collector: 使用多CPU进行垃圾收集。</li>
<li>Stop-the-word(STW): 收集时必须暂停其他所有的工作进程。</li>
<li>Sticky-reference-count： 对于使用“引用计数”（reference count）算法的GC，如果对象的计数器溢出，则起不到标记某个对象是垃圾的作用了，这种错误称为sticky-reference-count problem，通常可以增加计数器的bit数来减少出现这个问题的几率，但是那样会占用更多空间。一般如果GC算法能迅速清理完对象，也不容易出现这个问题。</li>
<li>Mutator：mutate的中文是变异，在GC中即是指一种JVM程序，专门更新对象的状态的，也就是让对象“变异”成为另一种类型，比如变为垃圾。</li>
<li>On-the-fly：用来描述某个GC的类型：on-the-fly reference count garbage collector，此GC不用标记而是通过引用计数来识别垃圾。</li>
<li>Generational gc：这是一种相对于传统的“标记-清理”技术来说，比较先进的gc，特点是把对象分成不同的generation，即分成几代人，有年轻的，有年老的。这类gc主要是利用计算机程序的一个特点，即“越年轻的对象越容易死亡”，也就是存活的越久的对象越有机会存活下去。</li>
</ul>
<h3 id="吞吐量与响应时间"><a href="#吞吐量与响应时间" class="headerlink" title="吞吐量与响应时间"></a>吞吐量与响应时间</h3><p>&#160;&#160;&#160;牵扯到垃圾收集，还需要搞清楚吞吐量与响应时间的含义</p>
<ul>
<li>吞吐量是对单位时间内完成的工作量的量度。如：每分钟的 Web 服务器请求数量。</li>
<li>响应时间是提交请求和返回该请求的响应之间使用的时间。如：访问Web页面花费的时间。</li>
</ul>
<p>&#160;&#160;&#160;吞吐量与访问时间的关系很复杂，有时可能以响应时间为代价而得到较高的吞吐量，而有时候又要以吞吐量为代价得到较好的响应时间。而在其他情况下，一个单独的更改可能对两者都有提高。通常，平均响应时间越短，系统吞吐量越大；平均响应时间越长，系统吞吐量越小； 但是，系统吞吐量越大，未必平均响应时间越短；因为在某些情况（例如，不增加任何硬件配置）吞吐量的增大，有时会把平均响应时间作为牺牲，来换取一段时间处理更多的请求。</p>
<p>&#160;&#160;&#160;针对于Java的垃圾回收来说，不同的垃圾回收器会不同程度地影响这两个指标。例如：并行的垃圾收集器，其保证的是吞吐量，会在一定程度上牺牲响应时间。而并发的收集器，则主要保证的是请求的响应时间。</p>
<h3 id="GC的回收流程"><a href="#GC的回收流程" class="headerlink" title="GC的回收流程"></a>GC的回收流程</h3><ol>
<li>找出堆中活着的对象</li>
<li>释放死对象占用的资源</li>
<li>定期调整活对象的位置</li>
</ol>
<h3 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h3><ul>
<li>Mark-Sweep 标记-清除</li>
<li>Mark-Sweep-Compact 标记-整理</li>
<li>Copying Collector 复制算法</li>
<li>Mark-标记从”GC roots”开始扫描(这里的roots包括线程栈、静态常量等)，给能够沿着roots到达的对象标记为”live”,最终所有能够到达的对象都被标记为”live”,而无法到达的对象则为”dead”。效率和存活对象的数量是线性相关的。</li>
<li>Sweep-清除扫描堆，定位到所有”dead”对象，并清理掉。效率和堆的大小是线性相关的。</li>
<li>Compact-压缩对于对象的清除，会产生一些内存碎片，这时候就需要对这些内存进行压缩、整理。包括：relocate(将存货的对象移动到一起，从而释放出连续的可用内存)、remap(收集所有的对象引用指向新的对象地址)。效率和存活对象的数量是线性相关的。</li>
<li>Copy-复制将内存分为”from”和”to”两个区域，垃圾回收时，将from区域的存活对象整体复制到to区域中。效率和存活对象的数量是线性相关的。</li>
</ul>
<p>&#160;&#160;&#160;其中，Copy对比Mark-sweep</p>
<ol>
<li>内存消耗：copy需要两倍的最大live set内存；mark-sweep则只需要一倍。</li>
<li>效率上：copy与live set成线性相关，效率高；mark-sweep则与堆大小线性相关，效率较低。</li>
</ol>
<h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><p>&#160;&#160;&#160;分代收集是目前比较先进的垃圾回收方案。有以下几个相关理论:</p>
<ul>
<li>分代假设：大部分对象的寿命很短，“朝生夕死”，重点放在对年青代对象的收集，而且年青代通常只占整个空间的一小部分。</li>
<li>把年青代里活的很长的对象移动到老年代。</li>
<li>只有当老年代满了才去收集。</li>
<li>收集效率明显比不分代高。</li>
</ul>
<p>&#160;&#160;&#160;HotSpot虚拟机的分代收集，分为一个Eden区、两个Survivor去以及Old Generation/Tenured区，其中Eden以及Survivor共同组成New Generatiton/Young space。通常将对New Generation进行的回收称为Minor GC;对Old Generation进行的回收称为Major GC，但由于Major GC除并发GC外均需对整个堆以及Permanent Generation进行扫描和回收，因此又称为Full GC。</p>
<p>&#160;&#160;&#160;分代收集中典型的垃圾收集算法组合描述如下：</p>
<ul>
<li>年青代通常使用Copy算法收集，会stop the world</li>
<li>老年代收集一般采用Mark-sweep-compact, 有可能会stop the world，也可以是concurrent或者部分concurrent。</li>
</ul>
<p>&#160;&#160;&#160;那么何时进行Minor GC、何时进行Major GC? 一般的过程如下：</p>
<ul>
<li>对象在Eden Space完成内存分配</li>
<li>当Eden Space满了，再创建对象，会因为申请不到空间，触发Minor GC，进行New(Eden + S0 或 Eden S1) Generation进行垃圾回收</li>
<li>Minor GC时，Eden Space不能被回收的对象被放入到空的Survivor（S0或S1，Eden肯定会被清空），另一个Survivor里不能被GC回收的对象也会被放入这个Survivor，始终保证一个Survivor是空的</li>
<li>在Step3时，如果发现Survivor区满了，则这些对象被copy到old区，或者Survivor并没有满，但是有些对象已经足够Old，也被放入Old Space。</li>
<li>当Old Space被放满之后，进行Full GC</li>
</ul>
<p>&#160;&#160;&#160;但这个具体还要看JVM是采用的哪种GC方案。总而言之，内存回收和垃圾收集是比较复杂的原理，很多时候是影响系统性能、并发能力的主要的因素之一，深入理解其运作，对编写的程序有一点影响力。</p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[逝去的2016，归来的2017]]></title>
      <url>http://yoursite.com/2017/01/01/%E6%88%91%E7%9A%842016%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>致我已逝去的2016，迎我即将到来的2017</strong></p>
<hr>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>&#160;&#160;&#160;<strong>人生中总有一段时光会让人突然成长，突然想明白很多事，好似看懂了全世界。</strong></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="小谈"><a href="#小谈" class="headerlink" title="小谈"></a>小谈</h3><p>&#160;&#160;&#160;借着跨年的喜悦气氛，我翻阅了一下自己空间里整个2016年所记录下来的说说踪迹，感觉2016年像梦一样的从我脑海里一闪而过，在这一年里，我仿佛做了很多事情，经历了很多事情，又仿佛经历的没有想象的那么多，感觉这些记忆是那么近，又那么的远，这大概就叫矛盾吧！！</p>
<p>&#160;&#160;&#160;经常会听到身边有人跟我说，“你是我身边最会写说说的男的，你看你空间里面那么多说说”。哈哈，我承认他说的没错，但是我会去想，为什么我会时不时的发个说说，感觉像是在证明着什么或者是记录着什么。</p>
<p>&#160;&#160;&#160;我给自己的解释是，一方面，这也许就是害怕孤独的一种表现，可能知道我的人，都知道我是一个喜欢热闹的、喜欢瞎搞的、喜欢交朋友、喜欢….，发说说或者是朋友是为了让大家时刻记着，嗯，我身边有这么一个人，他喜欢发说说，哈哈；另外一方面我可能是想多记录下自己一天中经历的事情的所感所想，这样，也许在未来的某个日子，我去翻这些说说的时候，我能记起当时这天我在经历着生命，可能会让自己有一种回味的感觉，我不知道大家有没有写日记的习惯，反正我很少会去写，因为有的时候记些流水账，对我来说，很无趣，所以可能说说跟朋友圈就是我日记的一个替代品，只是想做为自己的一种习惯在延续着，哈哈。</p>
<h3 id="回顾2016"><a href="#回顾2016" class="headerlink" title="回顾2016"></a>回顾2016</h3><p>&#160;&#160;&#160;2016的大事件太多，太多，“与队友们完成美国数学建模比赛”，“在重庆遇见人生的一场雪（几十年不遇）”，“给弟弟的一封信”，“美国小哥的礼物”，“以为朋友在台湾被地震牵连”，“在家过年”，“看了一年很棒的NBA全明星”，“协会招新”，“校招提前批笔试”，“小李子圆了奥斯卡梦”，“完成2次课程设计”，“模拟双选会”，“全国计算机等级三级考试考了个59分（这尼玛）”，“库昊全票MVP”，“协会换届”，“第一次面试”，“得罪最不想得罪的人”，“见证LBJ带领的骑士创造历史”，“搭博客”，“找工作”，“面试魅族”，“面试华为”，“感受前一天天堂，后一天地狱的人生”，“找到工作”，“离校”，“实习”，“初入社会”，“坚持的事”等等…..</p>
<h4 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h4><p>&#160;&#160;&#160;对于找工作，如果现在有人问我，你后不后悔不继续读书而选择工作，我的答案是肯定的；如果有人问，你后不后悔进入自己选择的这家公司，答案也是肯定的。因为既然是自己选择的路，为什么要去后悔呢，可能最多的是有遗憾吧，我也庆幸自己能够足够幸运找到合适自己的工作，以及能够在这么一个大家庭里工作。</p>
<h4 id="离校"><a href="#离校" class="headerlink" title="离校"></a>离校</h4><p>&#160;&#160;&#160;时间总是不和任何人开玩笑，悄无声息地就从我们手中悄悄溜走。转眼之间就到大四了，找到了工作，也为自己盘算着离校的时间去实习。虽然以前不觉得，但是真的一个人如果想到自己要离开校园了，离开自己一直生活的环境，离开自己最熟悉的那群人，多少都会有些伤感。依稀记得，那天踏出校门，回头望去，只觉得那就是青春，可能以后都经历不了了，但是还是很高兴你在我的世界里出现。</p>
<h4 id="初入社会"><a href="#初入社会" class="headerlink" title="初入社会"></a>初入社会</h4><p>&#160;&#160;&#160;一直以来我都是一个比较独立自主的人，所以踏入社会，我可能会相对来说更容易适应。来到魅族实习，有了新的环境，认识了新的人与事。感受到了魅族的热情，感受到工作的热情，感受到了珠海的魅力，还有很多….，我喜欢这样的生活，充实而又满足，初入社会，我要做的还有很多，我相信未来会更好。</p>
<h4 id="见证历史"><a href="#见证历史" class="headerlink" title="见证历史"></a>见证历史</h4><p>&#160;&#160;&#160;不得不说，2016年是我看NBA以来最热血澎湃的一年。首先，今年的NBA全明星上，见证了可能是历史上少有的，精彩的扣篮大赛，见证了两个扣篮新星的奇迹表演；其次，见证了LBJ带领骑士创造了历史；最后，见证LBJ在新赛季创新的一个个新的历史，感谢有你。</p>
<h4 id="坚持的事"><a href="#坚持的事" class="headerlink" title="坚持的事"></a>坚持的事</h4><ol>
<li>健身，强度不是很大，但是我相信只要一直坚持下去，至少对身体是有好处的。</li>
<li>写博客，今年才开始写博客，记录自己的学习经历。</li>
<li>看书，读万卷书，行万里路。</li>
<li>看电影，看经典的电影，陶冶情操。</li>
<li>周末出去走走，希望不要宅在家里。</li>
<li>学习，巩固技术知识。</li>
<li>看新闻，看资讯，了解前沿技术，知识。</li>
<li>学英语。</li>
<li>思考。</li>
<li>理想。</li>
</ol>
<h4 id="我的成长"><a href="#我的成长" class="headerlink" title="我的成长"></a>我的成长</h4><ul>
<li>社交圈变广，慢慢扩展视野；</li>
<li>慢慢学会管理时间，明白时间的重要性；</li>
<li>初入社会，慢慢适应社会；</li>
<li>明白了这世界上有些事是有规律的，违背了规律可能会遇到麻烦；</li>
<li>制定了一个小目标</li>
<li>…</li>
</ul>
<h3 id="2017年展望"><a href="#2017年展望" class="headerlink" title="2017年展望"></a>2017年展望</h3><p>&#160;&#160;&#160;保持积极的态度，不骄不躁；</p>
<p>&#160;&#160;&#160;严肃对待时间，记录生活；</p>
<p>&#160;&#160;&#160;多出去走走，体验生活；</p>
<p>&#160;&#160;&#160;坚持看书，看电影；</p>
<p>&#160;&#160;&#160;坚持健身，锻炼身体；</p>
<p>&#160;&#160;&#160;技术更上一层楼；</p>
<p>&#160;&#160;&#160;让家慢慢变好；</p>
<p>&#160;&#160;&#160;当然也希望自己越活越年轻，哈哈哈哈哈；</p>
<p>&#160;&#160;&#160;还有很多…</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>&#160;&#160;&#160;人生最好的心态是平静，我知道自己可能无法做到，但是，我会慢慢向它靠拢。</p>
<p>&#160;&#160;&#160;2017年给自己的第一句话是，“当自己做了正确的事，就会感觉自己在地球的重量又会增加了些”。</p>
<p>&#160;&#160;&#160;2016年，感谢遇到的所有人，遇到的所有事，2017年，加油！</p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读深入理解Java虚拟机]]></title>
      <url>http://yoursite.com/2016/12/31/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>看了第二章的内容，大致了解了下Java虚拟机的内存分划，以及内存操作导致的内存溢出异常，对于我以后使用Java编程有很大帮助</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="Java-存储区域与内存溢出异常"><a href="#Java-存储区域与内存溢出异常" class="headerlink" title="Java 存储区域与内存溢出异常"></a>Java 存储区域与内存溢出异常</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>&#160;&#160;&#160;对于c/c++的程序开发人员来说，内存管理既是他们的权力也是让他们头疼的问题，而对于Java开发人员来说，在虚拟机的帮助下，我们不需要为每个new操作去配对delete/free代码，因此也不容易出现内存泄漏和内存溢出的问题，但是如果不了解虚拟机的内存管理机制，一旦出现内存问题，很难排查问题，笔者在读完<strong>深入理解Java虚拟机</strong>后做了以下的笔记，希望对于一些初识者有一些帮助。</p>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>&#160;&#160;&#160;Java虚拟机在执行Java程序的过程中把它所管理的内存划分成若干个不同的数据区域，各自在运行时起到不同的用途。其具体分区情况，如下图所示。</p>
<p><img src="/images/2016-12-31.png" alt=""></p>
<p align="center">Java虚拟机运行事数据区</p>

<p>&#160;&#160;&#160;下面对各个区域进行简单的介绍</p>
<ol>
<li>程序计数器： 一块较小的内存单元，是当前线程所执行的字节码的行号指示器；</li>
<li>Java虚拟机栈：描述Java方法执行的内存模型，每个方法从调用到执行完毕，对应于一个栈帧在虚拟机栈中入栈到出栈的过程；</li>
<li>本地方法栈： 与虚拟机栈发挥的作用比较相似，虚拟机栈为虚拟机执行Java方法服务，而本地方法栈是虚拟机使用到的Native方法服务。</li>
<li>Java堆： Java堆是Java虚拟机所管理的内存中最大的一块，是所有线程共享的一块内存区域，在虚拟机启动时创建,用以存放对象实例。</li>
<li>方法区： 与Java堆一样，是各个线程共享的内存区域，用以存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>
<li>运行时常量池： 方法区的一部分，用以存放编译期生成的各种字面量和符号作用；</li>
<li>直接内存: 这部分不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区，但是在运行是这个部分内存也频繁的使用。</li>
</ol>
<h3 id="虚拟机对象"><a href="#虚拟机对象" class="headerlink" title="虚拟机对象"></a>虚拟机对象</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>&#160;&#160;&#160;Java是一门面向对象的编程语言，在Java程序运行过程种无时无刻都有对象被创建出来。而创建对象的命令就是new,当虚拟机遇到一条new指令的时候，首先将去检查这个指令的参数是否能在常量池种定位到一个类的符号作用，并且检查这个符号引用代表的类是否被加载、解析和初始化过。如果没有，那就先执行相应的类加载过程，在类加载检查通过后，虚拟机才会对新生的对象分配内存，并且内存大小可确定，在内存分配完后，虚拟机要将内存分配到的内存空间初始化为零值，为了保证对象实例在Java代码中可以不赋值直接使用，接下来虚拟机将会对对象进行必要的设置。</p>
<p>&#160;&#160;&#160;在完成以上工作后，一个对象才算真正的被创建起来了。</p>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>&#160;&#160;&#160;在虚拟机中，对象在内存中的存储的布局被分为3块区域：对象头、实例数据和对齐填充。</p>
<ol>
<li>对象头： 对象头一部分用以存储对象自身的运行数据，一部分是它指向的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例；</li>
<li>实例数据： 是对象真正存储的有效数据，也是在程序代码中所定义的各种类型的字段内容；</li>
<li>对齐填充： 这部分并不是必然存在的，也没有特殊的含义，只是起占位符的作用。</li>
</ol>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>&#160;&#160;&#160;建立对象是为了使用对象，我们的Java程序需要通过栈上的reference数据来操作堆上的具体对象。</p>
<p>&#160;&#160;&#160;Java虚拟机规范规定了一个指向对象的引用，但是没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，而是取决于虚拟机的实现而定。目前主流的访问方式有使用句柄和直接指针这两种方式。</p>
<ul>
<li>使用句柄，Java堆中会划出一块内存来做句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，其原理如下图所示。</li>
</ul>
<p><img src="/images/2016-12-31-1.png" alt=""></p>
<p align="center">使用句柄访问</p>

<ul>
<li>使用直接指针访问，那么Java堆对象的布局需要考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址，其原理如下图所示。</li>
</ul>
<p><img src="/images/2016-12-31-2.png" alt=""></p>
<p align="center">使用直接指针访问</p>

<p>&#160;&#160;&#160;两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是隐定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要修改；而使用直接指针访问的最大好处就是速度快，节省时间开销。</p>
<h3 id="内存溢出异常"><a href="#内存溢出异常" class="headerlink" title="内存溢出异常"></a>内存溢出异常</h3><p>&#160;&#160;&#160;在Java虚拟机规范中，定义了两种异常，一种是线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError;另一种是虚拟机在扩展栈的时候无法申请到足够的内存空间，会抛出OutOfMemoryError异常，这两个异常都是我们平常编写程序时，必须要注意的，比如慎用static,数据库处理游标、文件等处理后是否释放资源，图片处理是否进行压缩、回收等。</p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读深入理解Java虚拟机]]></title>
      <url>http://yoursite.com/2016/12/31/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>最近从同事借了《深入理解Java虚拟机》，想着没事读读，做做读书笔记</strong></p>
<hr>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="第一章-走进java"><a href="#第一章-走进java" class="headerlink" title="第一章 走进java"></a>第一章 走进java</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>&#160;&#160;&#160;如今，Java不仅仅是一门编程语言，还是一个由一系列计算机软件和规范形成的技术体系，这个技术体系提供了完整的用于软件开发和跨平台不熟的支持环境，并广泛应用于嵌入式系统、移动终端、企业服务器、大型机等各个场合。其具有以下特点：</p>
<ol>
<li>结构严谨、面向对象的编程语言；</li>
<li>摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的特点；</li>
<li>具有相对安全的内存管理和访问机制；</li>
<li>实现了热点代码检测和运行时编译及优化；</li>
<li>拥有一套完善的应用程序接口等…</li>
</ol>
<h3 id="Java的技术体系"><a href="#Java的技术体系" class="headerlink" title="Java的技术体系"></a>Java的技术体系</h3><p>&#160;&#160;&#160;从传统意义上来看，Sun官方所定义的Java技术体系包括以下几个组成部分：</p>
<ul>
<li>Java程序设计语言</li>
<li>各种硬件平台上的虚拟机</li>
<li>Class文件格式</li>
<li>Java Api类库</li>
<li>来自商业机构和开源社区的第三方Java类库</li>
</ul>
<p>&#160;&#160;&#160;我们可以把Java程序设计语言、虚拟机、Java Api类库这三部分称之为JDK就是java开发的最小环境。把Java Api类库中的子集Java Se Api和虚拟机这两部分统称为JRE，即Java运行环境。Java技术体系可以分为四个平台，分别为：</p>
<ol>
<li>Java Card:支持一些Java小程序，运行在小内存设备里；</li>
<li>Java Me: 支持Java程序运行在移动终端上；</li>
<li>Java Se: 支持面向桌面级应用的Java平台；</li>
<li>Java EE: 支持使用多层架构的企业级应用的Java平台。</li>
</ol>
<h3 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h3><p>&#160;&#160;&#160;此处省略一万个字……总而言之现在发展到Java8了。</p>
<h3 id="Java虚拟机发展史"><a href="#Java虚拟机发展史" class="headerlink" title="Java虚拟机发展史"></a>Java虚拟机发展史</h3><p>&#160;&#160;&#160;同上….</p>
<h3 id="展望Java技术的未来"><a href="#展望Java技术的未来" class="headerlink" title="展望Java技术的未来"></a>展望Java技术的未来</h3><ol>
<li>模块化：模块化是解决应用系统与技术平台越来越复杂、越来越庞大问题的一个重要途径；</li>
<li>混合语言： 如今，单一的Java开发已经无法满足当前软件的复杂需求，为了更好解决问题，混合语言层出不穷，如Clojure,Jruby,Groovy等；</li>
<li>多核并行： Cpu硬件的发展方向已经从高频率转变到多核心，随着多核时代的到来，软件开发越来越多关注并行编程，Java也更加专注；</li>
<li>进一步丰富语言，语法；</li>
<li>64位虚拟机等。</li>
</ol>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android源码编译]]></title>
      <url>http://yoursite.com/2016/12/26/%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>Android源码编译学习小结</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="系统源码编译"><a href="#系统源码编译" class="headerlink" title="系统源码编译"></a>系统源码编译</h2><p>&#160;&#160;&#160;笔者最近在学习安卓系统源码的编译，为了能够印象深刻，粗略的总结了以下内容，希望对我一样的初学者有一些帮助。</p>
<h3 id="系统编译的初始化指令"><a href="#系统编译的初始化指令" class="headerlink" title="系统编译的初始化指令"></a>系统编译的初始化指令</h3><p>&#160;&#160;&#160;对Android编译环境进行初始化很简单，分为两步。第一步打开终端输入source build/envseup.sh加载所需的文件。</p>
<pre><code>$ source build/envseup.sh
including device/asusource build/envseup.shs/grouper/vendorsetup.sh  
including device/asus/tilapia/vendorsetup.sh  
including device/generic/armv7-a-neon/vendorsetup.sh  
including device/generic/armv7-a/vendorsetup.sh  
including device/generic/mips/vendorsetup.sh  
including device/generic/x86/vendorsetup.sh  
including device/lge/mako/vendorsetup.sh  
including device/samsung/maguro/vendorsetup.sh  
including device/samsung/manta/vendorsetup.sh  
including device/samsung/toroplus/vendorsetup.sh  
including device/samsung/toro/vendorsetup.sh  
including device/ti/panda/vendorsetup.sh  
including sdk/bash_completion/adb.bash  
</code></pre><p>&#160;&#160;&#160;从命令的输出可以知道，文件build/envsetup.sh在加载的过程中，又会在device目录中寻找那些名称为vendorsetup.sh的文件，并且也将它们加载到当前终端来。另外，在sdk/bash_completion目录下的adb.bash文件也会加载到当前终端来，它是用来实现adb命令的bash completion功能的。也就是说，加载了该文件之后，我们在运行adb相关的命令的时候，通过按tab键就可以帮助我们自动完成命令的输入。</p>
<p>&#160;&#160;&#160;第二步是执行命令lunch，如下所示：</p>
<pre><code>$ lunch  

You&apos;re building on Linux  

Lunch menu... pick a combo:  
     1. full-eng  
     2. full_x86-eng  
     3. vbox_x86-eng  
     4. full_mips-eng  
     5. full_grouper-userdebug  
     6. full_tilapia-userdebug  
     7. mini_armv7a_neon-userdebug  
     8. mini_armv7a-userdebug  
     9. mini_mips-userdebug  
     10. mini_x86-userdebug  
     11. full_mako-userdebug  userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。
     12. full_maguro-userdebug  
     13. full_manta-userdebug  
     14. full_toroplus-userdebug  
     15. full_toro-userdebug  
     16. full_panda-userdebug  

Which would you like? [full-eng]   
</code></pre><p>&#160;&#160;&#160;我们看到lunch命令输出了一个Lunch菜单，该菜单列出了当前Android源码支持的所有设备型号及其编译类型。例如，第一项“full-eng”表示的设备“full”即为模拟器，并且编译类型为“eng”即为工程机。</p>
<p>&#160;&#160;&#160;当我们选定了一个Lunch菜单项序号(1-16)之后，按回车键，就可以完成Android编译环境的初始化过程。例如，我们选择1，可以看到以下输出：</p>
<pre><code>Which would you like? [full-eng] 1  

============================================  
PLATFORM_VERSION_CODENAME=REL  
PLATFORM_VERSION=4.2  
TARGET_PRODUCT=full  
TARGET_BUILD_VARIANT=eng  
TARGET_BUILD_TYPE=release  
TARGET_BUILD_APPS=  
TARGET_ARCH=arm  
TARGET_ARCH_VARIANT=armv7-a  
HOST_ARCH=x86  
HOST_OS=linux  
HOST_OS_EXTRA=Linux-3.8.0-31-generic-x86_64-with-Ubuntu-13.04-raring  
HOST_BUILD_TYPE=release  
BUILD_ID=JOP40C  
OUT_DIR=out  
============================================  
</code></pre><p>&#160;&#160;&#160;我们可以看到，lunch命令帮我们设置好了很多环境变量。通过设置这些环境变量，就配置好了Android编译环境。</p>
<h3 id="源码编译指令"><a href="#源码编译指令" class="headerlink" title="源码编译指令"></a>源码编译指令</h3><p>&#160;&#160;&#160;在执行编译指令之前，为了确保编译环境的Api匹配所要编译的源码版本，我们会先进行<strong>make update-api</strong>进行Api更新，在此步骤之中可能会遇到各种问题，请读者们自行上网搜索解决，直到更新完成后执行<strong>make</strong>指令进行编译，注：对于整个系统源码编译，必须在系统源码根目录下执行。</p>
<p>&#160;&#160;&#160;在Android编译系统在编译过程中，会通过根目录下的Makefile脚本加载build/core/main.mk脚本，接着build/core/main.mk脚本又会加载build/core/Makefile脚本，而Android系统镜像文件就是由build/core/Makefile脚本负责打包生成的。</p>
<h3 id="编译打包过程"><a href="#编译打包过程" class="headerlink" title="编译打包过程"></a>编译打包过程</h3><ol>
<li>首先，每个模块对应一个android.mk，对应于各个模块的makefile，该文件中只需定义一些变量，就能触发一个模块的编译，不同模块的编译方式不同，当然每个模块必须遵守编译规则；</li>
<li>其次，每个模块相互独立，但是利用include指令可以将各个模块，添加如main.mk文件中，并有先后顺序，最终各个零散的makefile文件汇聚成最终的makefile文件；</li>
<li>最后，通过以上过程讲所有模块编译打包。</li>
</ol>
<h3 id="打包的产物"><a href="#打包的产物" class="headerlink" title="打包的产物"></a>打包的产物</h3><p>&#160;&#160;&#160;所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：</p>
<ul>
<li>/out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。</li>
<li>/out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。</li>
<li>/out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。</product_name></product_name></li>
<li>/out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。</li>
</ul>
<h3 id="编译生成的镜像文件"><a href="#编译生成的镜像文件" class="headerlink" title="编译生成的镜像文件"></a>编译生成的镜像文件</h3><p>&#160;&#160;&#160;Build 的产物中最重要的是三个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。</product_name></p>
<ul>
<li>system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区。</li>
<li>ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程。</li>
<li>userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。</li>
</ul>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序员励志名言]]></title>
      <url>http://yoursite.com/2016/11/17/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8A%B1%E5%BF%97%E5%90%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>1、作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具。 　　2、程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的。 　　3、编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情。 　　4、程序不是年轻的专利，但是，他属于年轻。 </strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<p>1、作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具。</p>
<p>2、程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的。</p>
<p>3、编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情。</p>
<p>4、程序不是年轻的专利，但是，他属于年轻。</p>
<p>5、没有情调，不懂浪漫，也许这是程序员的一面，但拥有朴实无华的爱是他们的另一面。</p>
<p>6、一个好汉三个帮，程序员同样如此。</p>
<p>7、一个100行的代码调试都可能会让程序员遇到很多挫折，所以，面对挫折，我们永远不能低头。</p>
<p>8、调试完一个动态连接函数，固然值得兴奋，但真正的成功远还在无数个函数之后。</p>
<p>9、程序是我的生命，但我相信爱她甚过爱我的生命。</p>
<p>10、信念和目标，必须永远洋溢在程序员内心。</p>
<p>11、就算我们站在群山之颠，也别忘记雄鹰依旧能从我们头顶飞过。骄傲是比用JAVA进行底层开发更可笑的东西。</p>
<p>12、这句话不是很文雅，彻底鄙视那些害怕别人超越自己而拒绝回答别人问题的程序员。</p>
<p>13、如果调试一个程序让你很苦恼，千万不要放弃，成功永远在拐角之后，除非你走到拐角，否则你永远不知道你离他多远，所以，请记住，坚持不懈，直到成功。</p>
<p>14、最累的时候，家人是你最好的归宿。</p>
<p>15、退一步海阔天空，这是一种应有的心境。<br>　　<br>16、如果你喜欢底层开发，千万不要勉强自己去搞VC，找到你最真实的想法，程序员最不能忍受的就是万精油。</p>
<p>17、IF（BOOL 学习= =FALSE）BOOL 落后=TRUE；不断的学习，我们才能不断的前进。<br>　　<br>18、你的一个程序有时正常有时不正常，而你已经完全遵循编程的规则，为什么？事实上我认为相信只要遵循别人所说就能得到想当然的结果的人其实是个傻瓜。<br>　　<br>19、编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲。<br>　　<br>20、非优秀的程序员常常把空间和时间消耗殆尽，优秀的程序员则总是有足够的空间和时间去完成编程任务，而且配合近乎完美。<br>　　<br>21、我们应该重视团队的精神，一个人作用再大，也不过是一碗水中比较大的一粒水珠而已。<br>　　<br>22、无私奉献不是天方夜谭，有时候，我们也可以做到。<br>　　<br>23、程序员是值得尊敬的，程序员的双手是魔术师的双手，他们把枯燥无味的代码变成了丰富多彩的软件。<br>　　<br>24、你比他好一点，他不会承认你，反而会嫉妒你，只有你比他好很多，他才会承认你，然后还会很崇拜你，所以要做，就一定要比别人做得好很多。<br>　　<br>25、对程序员来说大部分的快乐是从解决问题，特别是独立解决问题中获得，而不是从这个CASE有多大，奖金有多少中获得。<br>　　<br>26、人呐，眼光放得长远一些，看到的东西也会多一些，生活也就会过得更有意义一点。<br>　　<br>27、程序员，他们想的是什么？他们想的永远都是技术，他们崇尚的也永远都是技术。</p>
<p>28、其实你找不到错误不代表错误不存在，同样你看不到技术比你牛的人并不代表世界上没有技术比你牛的人。<br>　　<br>29、一个人静静坐在电脑面前写代码的感觉，那是什么感觉？那是武林高手闭关修炼的感觉。<br>　　<br>30、程序员中的前辈在谈到一个人学写程序有没有前途时，总是会说：“学程序不光要能吃苦能用功，还得看有没有sense，没sense的人，就是再怎么学，再怎么给他讲效果都不好。”<br>　　<br>31、为什么很多人都想成功，但成功的人只是极少数？不是因为成功有多困难，其实成功简单得很，只要你一开始都有计划，并且能一直做下去，总会成功的。关键是如何面对成功，你失败了，起码还有人同情你，而成功了，连得到同情的机会都没有。<br>　　<br>32、一匹真正的好马，即使在鞭子的影子下，也能飞奔。<br>　　<br>33、如果你没有把握做到，最好就不要承诺，你什么也不承诺，至少别人不会看不起你。<br>　　<br>34、一本好书，就像高级武功秘籍一样，哪怕只是从里面领悟到个一招半势，功力提升起来都是惊人的。<br>　　<br>35、永不放弃，永不放弃又有两个原则，第一个原则是永不放弃，第二个原则就是：当你想放弃时回头看第一个原则。<br>　　<br>36、疯狂的程序员决不是靠狂妄和拼命的程序员，而是能够脚踏实地，持续努力的程序员，一个程序员真正做到这两点，技术上去后，唯一能限制他的只有想象力，到那个时候才算“疯狂的程序员”，这种程序员，才能令对手无比恐惧。<br>　　<br>37、硬的怕横的，横的怕不要命的，疯子都是不要命的，所以疯子力量大，程序员只有一种，疯狂的程序员。<br>　　<br>38、要么做第一个，要么做最好的一个。<br>　　<br>39、理想如果不向现实做一点点屈服，那么理想也将归于尘土。<br>　<br>40、每一个问题都是一把锁，你要相信世界上一定有一把钥匙能打开这把锁，你也能找到这把钥匙。<br>　　<br>41、所有的道理都是相通的，我们所做的并非是创造性的工作，所有的问题前人都曾经解决，所以我们更是无所畏惧，更何况我们不只有书店，而且有互联网，动动手脚就能找到需要的资料，我们只要认真研究就够了。所以当遇到困难时，请静下心来慢慢研究，因为只要用心，没有学不会的东西。<br>　　<br>42、完美主义者常常因试图努力把一件事做好而放弃对新领域的尝试，从而使做事的机会成本增加，有时回头一看才发现，自己在某件事上，已经花了太多时间，而实际上，暂时的妥协可能并不会影响到最终完美结果的呈现，因为不但知识需要积累，事情之间也总是有关联的。<br>　　<br>43、调试完一个动态连接函数，固然值得兴奋，但真正的成功远还在无数个函数之后。<br>　　<br>44、“设计是一个发现问题、而不是发现解决方案的过程” —— Leslie Chicoine<br>　　<br>45、“功能说明书里不存在可操作性” —— 37 Signals<br>　　<br>46、“过去的代码都是未经测试的代码” —— Michael Feathers<br>　　<br>47、“任何傻瓜都能写出计算机可以理解的代码。好的程序员能写出人能读懂的代码” —— Martin Fowler<br>　　<br>48、“测试是来表明bug的存在而不是不存在” —— Edsger Dijkstra<br>　　<br>49、“简单不先于复杂，而是在复杂之后” —— Alan Perlis<br>　　<br>50、“Real developers ship” —— Jeff Attwood<br>　　<br>51、“没有绝世神功” —— Frederick Brooks<br>　　<br>52、“过去的33年里，我每天早上看着镜子问自己：“今天是我生命的最后一天吗？我是否要去做今天该做的事？”一天一天太多次是“不是”，我知道这需要改变…所有的事情——所有身外的期望，所有的骄傲，所有的对困难和失败的恐惧——这些东西在死亡面前立刻消失的无影无踪，只剩下真正重要的东西。想着自己即将死去，这是让我避免落入担心失去什么的陷阱里的最好的方法。” —— Steve Jobs</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="https://yq.aliyun.com/articles/62842?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_7362" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为自己的人生打工场]]></title>
      <url>http://yoursite.com/2016/10/17/%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%BA%E7%94%9F%E6%89%93%E5%B7%A5%E5%9C%BA/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>在中国，虽然找一份工作可能不是太困难的事情，但是，真正找一份理想的工作并不容易。</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<p>在中国，虽然找一份工作可能不是太困难的事情，但是，真正找一份理想的工作并不容易。因此，珍惜现有的工作岗位是一个优秀员工时刻要牢记的。只要你把公司当作是自己实现抱负的平台，你就已经是公司的老板了。因为你已经和公司融为一体了，你的每一分努力都不会白费。</p>
<p>齐勃瓦出生在美国乡村，只接受过很短的学校教育。15岁那年，家中一贫如洗的他就到一个山村做了马夫。他不甘心一辈子做马夫，无时无刻不在寻找发展的机会。三年后，齐勃瓦终于来到钢铁大王卡内基所属的一个建筑工地打工。虽然他也是一个进城的农民工，但是，自从进入建筑工地那一天起，齐勃瓦就下定决心，要做同事中最优秀的人。当其他人在抱怨工作辛苦、薪水低的时候，齐勃瓦却默默地积累着工作经验，并自学建筑知识。晚上吃过晚饭，工友们往往扎在一起闲聊天或打扑克，只有齐勃瓦躲在角落里看书。有一天，公司经理到工地检查，视察工人宿舍时看见了齐勃瓦手中的书，又翻了翻他的笔记，什么也没说就走了。</p>
<p>第二天，经理把齐勃瓦叫到办公室问：“你学那些东西干什么？”齐勃瓦不慌不忙地回答说：“我想我们公司并不缺少打工者，缺少的是既有工作经验、又有专业知识的技术人员和管理者，是不是？”经理点了点头。</p>
<p>不久，齐勃瓦就被破格提升为技师，那些打工者中也有人讽刺挖苦齐勃瓦，但是他回答说：“我不光是在为老板打工，更不单纯是为了赚钱，我是在为自己的梦想打工。我们只能在工作业绩中提升自己，我要使自己工作所创造的价值远远超过所得的薪水。我把自己当作公司的主人，就能获得发展的机遇。”</p>
<p>正是抱定了这样的信念，他努力工作，刻苦钻研，系统地掌握了技术知识。就这样，齐勃瓦一步一步升到了总工程师的职位上。25岁那年，齐勃瓦终于做了这家建筑公司的总经理。</p>
<p>齐勃瓦的成功完全在于他自己的努力。他自从加入公司的那一天起就胸怀大志，为自己的目标去努力奋斗，公司反过来就成为他实现自己奋斗目标的平台和施展自己才华的舞台。正是由于这种目标加勤奋，齐勃瓦不仅做了建筑公司的总经理，在建筑公司建成了最大的布拉得钢铁厂时，他超人的工作热情和管理才能又被卡内基钢铁公司的天才工程师兼合伙人琼斯发现。琼斯立即推荐齐勃瓦做了自己的副手，主管全厂事务。两年后，琼斯因一次事故而丧生，齐勃瓦接任了厂长。由于齐勃瓦的积极努力和工作热情，加上他日渐成熟的管理艺术，布拉得钢铁厂成了卡内基钢铁公司的灵魂。几年过后，卡内基亲自任命齐勃瓦担任钢铁公司董事长。</p>
<p>我们讲齐勃瓦的故事，并非说只要努力，你就一定能够成为公司老板，而是说只要努力，只要付出比别人更多的工作热情，你的才华最终是不会被埋没的。前提是你必须把公司当作自己事业的舞台，以公司主人翁的心态去对待工作。</p>
<p>你在为谁打工？答案已经非常明确：你在为自己打工，为自己的人生打工！</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/rensheng/id-140918.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git学习笔记]]></title>
      <url>http://yoursite.com/2016/10/17/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>趁着偷闲的时间，写了一篇 Git 学习笔记以便学习和今后回顾</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Git-基础学习"><a href="#Git-基础学习" class="headerlink" title="Git 基础学习"></a>Git 基础学习</h2><p>Git 是一个开源的分布式版本控制工具，它的开发者是大名鼎鼎的 Linux 操作系统的作者 Linus Torvalds 。优点有<strong>速度快、完全分布式、允许成千上万个并行开发的分支、有能力高效管理类似 Linux 内核一样的超大规模项目</strong>。</p>
<p>学习 Git 最重要的是理解其内部原理，分清楚工作区、暂存区、版本库，还有就是理解 Git 跟踪并管理的是修改，而非文件。下面列举一下 Git 的一些特点:</p>
<p><strong>1. 直接记录快照，而非差异比较</strong></p>
<p>Git 和其它版本控制系统的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。Git 更像是把数据看作是对小型文件系统的一组快照。 每次提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</p>
<p><strong>2. 近乎所有操作都是本地执行</strong></p>
<p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。比如要浏览项目的历史，Git 不需外连到服务器去获取历史，它只需直接从本地数据库中读取。 如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>
<p><strong>3. Git保证完整性</strong></p>
<p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p>
<p><strong>4. Git一般只添加数据</strong></p>
<p>你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。</p>
<p><strong>5. 三种状态：已提交、已修改、已暂存据</strong></p>
<p>已提交表示数据已经安全的保存在本地数据库中。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>
<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>
<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>
<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。</p>
<p>基本的 Git 工作流程如下：</p>
<blockquote>
<p>1.在工作目录中修改文件。<br>2.暂存文件，将文件的快照放入暂存区域。<br>3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p>
</blockquote>
<p>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>
<h2 id="Git简单命令行学习"><a href="#Git简单命令行学习" class="headerlink" title="Git简单命令行学习"></a>Git简单命令行学习</h2><p>以下是对git的简单操作介绍</p>
<h3 id="用户信息配置"><a href="#用户信息配置" class="headerlink" title="用户信息配置"></a>用户信息配置</h3><blockquote>
<p>1.$ git config –global user.name “Your Name”<br>2.$ git config –global user.email “Your Email”</p>
</blockquote>
<h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><blockquote>
<p>$ git config –l</p>
</blockquote>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote>
<p>$ git init</p>
</blockquote>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><blockquote>
<p>1.$ git clone url<br>2.$ git clone url name #重命名成 name</p>
</blockquote>
<h3 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h3><blockquote>
<p>$ git tag</p>
</blockquote>
<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><blockquote>
<p>$ git status<br>$ git diff</p>
</blockquote>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><blockquote>
<p>1.$ git add file.txt #将”当前修改”移动到暂存区(stage)<br>2.$ git commit -m “Add file.txt” #将暂存区修改提交</p>
</blockquote>
<h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><blockquote>
<p>1.# 取消commit(比如需要重写commit信息)<br>    $ git reset –soft HEAD<br>2.# 取消commit、add(重新提交代码和commit)<br>    $ git reset HEAD<br>3.$ git reset –mixed HEAD<br>4.# 取消commit、add、工作区修改(需要完全重置)<br>    $ git reset –hard HEAD</p>
</blockquote>
<h3 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h3><blockquote>
<p>1.$ git reflog<br>2.$ git log</p>
</blockquote>
<h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><blockquote>
<p>$ git remote add origin url</p>
</blockquote>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><blockquote>
<p>$ git branch</p>
</blockquote>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><blockquote>
<p>$ git branch branchname</p>
</blockquote>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><blockquote>
<p>$ git checkout branchname</p>
</blockquote>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><blockquote>
<p>$ git checkout -b branchname</p>
</blockquote>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote>
<p>$ git merge branchname</p>
</blockquote>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><blockquote>
<p>$ git branch -d branchname</p>
</blockquote>
<h2 id="参考与扩展阅读"><a href="#参考与扩展阅读" class="headerlink" title="参考与扩展阅读"></a>参考与扩展阅读</h2><ul>
<li><p><strong><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external">GitPro2</a></strong></p>
</li>
<li><p><strong><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git-简明指南</a></strong></p>
</li>
<li><p><strong><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">learnGitBranching</a></strong></p>
</li>
</ul>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[华为轮值CEO胡厚崑：站在云端看世界]]></title>
      <url>http://yoursite.com/2016/09/15/%E5%8D%8E%E4%B8%BA%E8%BD%AE%E5%80%BCCEO%E8%83%A1%E5%8E%9A%E5%B4%91%EF%BC%9A%E7%AB%99%E5%9C%A8%E4%BA%91%E7%AB%AF%E7%9C%8B%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>华为轮值CEO胡厚崑在2016华为全联接大会发表主题演讲</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="ICT是智能社会的基石"><a href="#ICT是智能社会的基石" class="headerlink" title="ICT是智能社会的基石"></a>ICT是智能社会的基石</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>智能社会正在到来。这是一次深刻的社会巨变，今天我们还无法全面认识它的深度和广度。但有一点确定的是，信息通信（ICT）技术，是智能社会背后最重要的基石。</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;智能社会有三个特征，万物感知、万物互联、万物智能。由于有了先进的ICT技术，这三大特征才能实现。<strong>在智能社会，终端是万物感知的触角，网络连接万物，而云则是万物智能的源泉，与此对应的是全面协同的“端、管、云”架构。</strong></p>
<p><img src="/images/9-15-1.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;未来，所有人和物都能感知环境，成为智能世界的入口。电脑与人的距离越来越近，从大型机时代的几公里、PC机时代的几米，到智能手机时代的几厘米、再到可穿戴的几毫米。最后，可植入的智能芯片将使人机融为一体。<strong>5到10年内，将出现各式各样的多场景、自适应的智能终端，智能手机只是其中一种。</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;未来，光缆和无线网络提供无处不在的超宽带、低时延的连接。在4G移动网络条件下，理论上可达到50毫秒的时延，这个速度对于网络运行VR、AR类应用还不够快，所以玩PokemonGO时，往往是看到了小精灵，就是抓不住！未来5G时代，理论上网络时延可以达到1毫秒，今天无法实现的很多应用，都有希望实现了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;未来，分布全球而又相互连接的计算机，汇聚了人类社会海量信息，在<strong>云端生成了一个“数字大脑”。它实时进化，永不衰老。</strong>人和机器可以通过超宽带连接和智能终端调用它的智慧。自动驾驶、智慧医疗以及大部分人类脑力活动会在“数字大脑”协助下变得更高效。</p>
<p><img src="/images/9-15-2.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于这些理解和假设，<strong>华为一直致力于打造智能社会的“端、管、云”技术架构，这也正是华为重点投入的战略方向。</strong></p>
<h2 id="云正在塑造一切，有变革才有重生"><a href="#云正在塑造一切，有变革才有重生" class="headerlink" title="云正在塑造一切，有变革才有重生"></a>云正在塑造一切，有变革才有重生</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像人类历史上其他重大技术革命一样，云的影响远远超过技术本身，还影响了商业模式和人的思维模式，引发了一系列商业革命。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;过去十年，谷歌、亚马逊、滴滴、Airbnb等是“生于云的一代”，它们开创了敏捷创新、体验好、低成本的云的1.0时代，利用云技术、云架构实现了资源共享，利用移动互联网技术更好联接客户，即使在酒店、出租车等传统行业中，创造了颠覆性的商业模式。</p>
<p><img src="/images/9-15-3.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;颠覆者的成功唤醒了各行各业。<strong>下一个十年，将是云的2.0时代，企业是云化的主角，各行各业将在云中成长，各种行业云也将兴起。我们预计，到2025年，所有企业企业都会用到云的技术、云的模式，85%以上企业应用会被部署到云上。</strong>企业都会结合核心业务，探索最适合的云化解决方案。</p>
<h2 id="化云为雨，Think-Big，Act-Small"><a href="#化云为雨，Think-Big，Act-Small" class="headerlink" title="化云为雨，Think Big，Act Small"></a>化云为雨，Think Big，Act Small</h2><p><img src="/images/9-15-4.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>云重要，化云为雨更重要，要让云为业务创造价值。</strong>实现化云为雨，不仅要大胆构想（Think Big）, 更要小步快跑（Act Small）。</p>
<h3 id="第一个体会是，重塑观念。"><a href="#第一个体会是，重塑观念。" class="headerlink" title="第一个体会是，重塑观念。"></a>第一个体会是，重塑观念。</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;企业应重新认识ICT的作用，把信息技术从辅助性技术上升为关键的生产技术，大胆利用信息技术驱动商业模式和运营模式创新，大胆利用新技术重新设计生产流程，而不是让技术适应流程。华为也在积极学习、思考，如何在云时代运用好云思维。</p>
<h3 id="第二个体会是，重构人才。"><a href="#第二个体会是，重构人才。" class="headerlink" title="第二个体会是，重构人才。"></a>第二个体会是，重构人才。</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;掌握以云为基础的信息技术应成为企业员工尤其是企业管理者的基本技能、素质。对于华为这样一个拥有17万员工的企业来说，如何升级员工知识结构，很具有挑战性，我们也一直在探索。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;纵观全球，云计算、大数据、人工智能方面的人才供不应求，顶尖人才更是稀缺资源，这种情况还会持续甚至加剧。企业应提前布局，大胆争夺人才；未雨绸缪，提前储备人才。在华为，我们也一直在积极部署人才战略，希望吸引更多顶尖人才。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说到人才，必须谈谈CIO。云时代，CIO不仅是企业“技术掌门人”，应成为“战略制定者”，能够用信息技术驱动业务变革。</p>
<h3 id="第三，小步快跑。"><a href="#第三，小步快跑。" class="headerlink" title="第三，小步快跑。"></a>第三，小步快跑。</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;制定云化战略，既要大胆构想，制定长期的、系统的战略，也要小步快跑，从小处入手，解决问题，创造价值，循序渐进地建立持久的信心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;华为在全球有8万研发人员、16个研究中心、超过1500个实验室。过去，计算资源非常分散，难以共享，利用率低。从2013年开始，我们整合研发资源，实现代码和研发作业的上云部署，重构研发流程，效率大幅提升，其中，资源复用率提升2.5倍，各环节作业时间平均缩短50%，产品上市时间也大幅提前。</p>
<h2 id="做智能社会发展推动者"><a href="#做智能社会发展推动者" class="headerlink" title="做智能社会发展推动者"></a>做智能社会发展推动者</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>在云时代，有变化，才有希望；有行动，才有未来。</strong></p>
<p><img src="/images/9-15-5.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;华为希望，成为成为智能社会的使能者与推动者。具体到<strong>华为云战略，我们的定位是：以客户为中心；聚焦ICT基础设施，提供创新的云技术；成为客户优选的伙伴；积极参与云生态建设。</strong></p>
<h2 id="做创新的云技术提供者"><a href="#做创新的云技术提供者" class="headerlink" title="做创新的云技术提供者"></a>做创新的云技术提供者</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;技术是不断演进，客户需求也不断变化、升级。华为有信心，做好创新的云技术提供者，底气来自于哪里呢？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了多年来积累的技术和创新能力，<strong>我们最大信心来自于华为以客户为中心的企业文化。28年来，这种价值观成为了华为的DNA和华为员工的最高行动指南。作为技术提供者，不能总想着用一把钥匙开不同的锁。所谓以客户为中心，就是接地气，愿意向客户学习，愿意真正沉下心去理解各行各业特点，把握业务特点带来的不同需求，并用创新的云技术和解决方案去匹配，做到“按需应变”。</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如，大企业客户在云化时，特别关注自主可控不被厂家锁定以及内外部数据互联互通，华为就应用业界主流开源技术构建了开放云架构。又如，数据安全和隐私保护是客户在云化时的首要顾虑，华为就推出了基于统一架构的混合云解决方案，让客户同时享受私有云自主可控和公有云弹性敏捷。华为的云解决方案，特别强调了开放性、安全性、企业级的体验，以及一站式等特性，受到越来越多客户欢迎，这更坚定了我们云技术的研究中以客户为中心的信念。</p>
<h2 id="我们是伙伴，而不仅仅是供应商"><a href="#我们是伙伴，而不仅仅是供应商" class="headerlink" title="我们是伙伴，而不仅仅是供应商"></a>我们是伙伴，而不仅仅是供应商</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;云时代，客户需要的不仅是供应商，而是深度合作的伙伴。华为愿意也有能力，成为这样的伙伴。今年，德国电信发布了开放电信云服务，为企业提供包括私有云、公有云以及软件解决方案在内的全套云服务。华为则被选为重要合作伙伴，提供硬件和软件解决方案。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合作实现了优势互补，德国电信有强大数字基础设施，以及对企业需求的深入了解和长期服务经验，华为则有强大的、从硬件到软件的、端到端的持续技术创新能力。我们认为，<strong>合作最大亮点在于，开放电信云完全是客户需求驱动的产物。</strong>我们发现，客户关切聚焦在IT服务标准化和敏捷性、处理和实时分析大数据、应对严格的数据安全监管要求等。因此，我们的解决方案的特性，也相应地聚焦“安全、可靠、简单、开放”。这使得德国电信提供的公有云服务，比通用型的公有云服务更好地满足企业客户需求，也更受欢迎。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>各方评价，开放电信云是德国乃至欧洲企业数字化进程中重要的新业务</strong>，它有可能成为面向行业和大企业提供公有云服务的标杆。</p>
<h2 id="做云生态的积极贡献者"><a href="#做云生态的积极贡献者" class="headerlink" title="做云生态的积极贡献者"></a>做云生态的积极贡献者</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;云的发展，生态很重要。华为不会独自做几朵云，华为是帮助千万万万客户建好千万朵云，积极参与云生态的建设。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在行动上，华为会以开放、合作、共赢的心态，去参与构建产业联盟，做大产业的蛋糕；还会与SAP、埃森哲、微软、Intel等重要合作伙伴形成商业战略联盟，一起帮助客户成功；我们还会积极共建开发者平台和开源社区，引入更多玩家，繁荣产业链。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;行动的背后，我们有两点理念：<strong>云生态的构建一定要以客户为中心，为客户创造价值，既是建立生态的目的，也是生态健康持续发展的保证；每个参与生态建设的组织或企业，都应该有独特价值。</strong>华为就是发挥优势，做好产品，服务好客户。健康、可持续发展的云生态一定要有优秀的技术和产品来支撑，否则就是无源之水、难以长久。</p>
<h2 id="宏大的云时代，才刚刚开始"><a href="#宏大的云时代，才刚刚开始" class="headerlink" title="宏大的云时代，才刚刚开始"></a>宏大的云时代，才刚刚开始</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;云时代，意味着更好的联接，更多的分享，更多的自由。要实现这些理想，必须有云的高度、云的思维。我们要站在云端看世界。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;十几天前，我在天山深处的夏塔古道拍下了这张照片。</p>
<p><img src="/images/9-15-6.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这条古道跨越南北疆，是古丝绸之路上最为险峻的一条路，又被称作“唐僧古道”，玄奘和尚当年就是由此去西天取经的。如今，它已成为新疆最热门的徒步探险线路之一。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;远处，是海拔6995米的天山汗腾格里峰和木扎尔特冰川。翻过雪山，尽头就是南疆蓝天白云下美丽的草原牧场。道路漫漫、艰险重重，古人如何能走得过去？我想，如果心中充满了美好憧憬，一切艰险都可以被克服。“夏塔”两个字，古语中也正是“天梯”的意思。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;借用一句流行语：<strong>哪里有什么洪荒之力，成功都是一步一步走出来的！</strong>企业数字化转型也是一段艰难之路，需要一步步走向前。这次大会，就是希望大家碰撞观点、交流思想，群策群力，共同探索如何塑造云时代，如何塑造整个世界。以上是我分享的内容。谢谢！</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.huawei.com/cn/industry-insights/market-trends/telecom-trends/ken-hu-speech" target="_blank" rel="external">华为</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玻璃杯碎了之后]]></title>
      <url>http://yoursite.com/2016/09/11/%E7%8E%BB%E7%92%83%E6%9D%AF%E7%A2%8E%E4%BA%86%E4%B9%8B%E5%90%8E/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>余秋雨在写《追询德国》的文章时，为了彻底了解德国，他一个人去德国体验生活。</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<p>余秋雨在写《追询德国》的文章时，为了彻底了解德国，他一个人去德国体验生活。</p>
<p>他要租房子，房东是一位和蔼可亲的德国老人。房子在五楼，余秋雨看了看房子，感觉还不错，就想和老人签长期租房合同。</p>
<p>老人笑了笑说：“不，年轻人，你还没有住，不会知道好坏，所以应该先签试住合同，有了切身体验，再定下一步是否长住。”</p>
<p>余秋雨一听很有道理，就和老人签了5天合同。</p>
<p>第5天到了，余秋雨想和老人谈长租的时候，发生了一点意外，他不小心打碎了一个玻璃杯。他很紧张，感觉这个玻璃杯价值不菲，又怕因为这个玻璃杯，老人不租给他房子。可是当他打电话告诉老人的时候，老人说：“不要紧，你又不是故意的，这个玻璃杯很便宜。”</p>
<p>余秋雨把碎玻璃和其他垃圾扫入垃圾袋里，放在了外面。过了不久，老人来了，进屋之后，没等余秋雨说话，老人问：“那玻璃杯碎片呢？”</p>
<p>余秋雨赶紧说：“我打扫完放在门外了。”老人赶紧出去，打开垃圾袋看完之后，脸色阴沉地进屋，对余秋雨说：“明天你可以搬出去了，我不再租给你房子。”</p>
<p>余秋雨感觉不可思议，就问：“是不是因为我打碎您的玻璃杯，惹您不高兴了？”</p>
<p>老人摇了摇手说：“不是，是因为你心中没有别人。”</p>
<p>余秋雨一头雾水。这时，老人拿了一支笔和一个垃圾袋，同时带上笤帚和撮子，来到外面，把余秋雨装好的垃圾倒了出来，重新分类。老人挑得很仔细，把所有玻璃杯碎片装入一个垃圾袋里，在上面用笔写上：里面是玻璃杯碎片，危险。然后把其他垃圾装入另一垃圾袋里，写上：安全。</p>
<p>此后若干年，余秋雨提起这件往事，感叹连连。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/wy/id-139474.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android笔记之JNI学习]]></title>
      <url>http://yoursite.com/2016/09/11/Android%E7%AC%94%E8%AE%B0%E4%B9%8BJNI%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>Android笔记之JNI学习</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><ul>
<li>在一个平台上去编译另一个平台上可以执行的本地代码</li>
<li>cpu平台 arm x86 mips</li>
<li>操作系统平台  windows linux mac os</li>
<li>原理 模拟不同平台的特性去编译代码 </li>
</ul>
<h2 id="jni开发工具"><a href="#jni开发工具" class="headerlink" title="jni开发工具"></a>jni开发工具</h2><ul>
<li>ndk native develop kit </li>
<li>ndk目录<ul>
<li>docs 帮助文档<ul>
<li>platforms  好多平台版本文件夹 选择时选择项目支持的最小版本号对应的文件夹</li>
<li>每一个版本号的文件夹中放了 不同cpu架构的资源文件</li>
<li>include文件夹 jni开发中常用的 .h头文件</li>
<li>lib 文件夹 google打包好的 提供给开发者使用的 .so文件</li>
<li>samples google官方提供的样例工程 可以参考进行开发</li>
<li>android-ndk-r9d\build\tools linux系统下的批处理文件 在交叉编译时会自动调用</li>
<li>ndk-build 交叉编译的命令</li>
</ul>
</li>
</ul>
</li>
<li>cdt eclipse的插件 高亮C代码 C的代码提示</li>
</ul>
<h2 id="jnihelloworld"><a href="#jnihelloworld" class="headerlink" title="jnihelloworld"></a>jnihelloworld</h2><ul>
<li><p>jni开发的步骤</p>
<ul>
<li>①写java代码 声明本地方法 用到native关键字 本地方法不用去实现</li>
<li>②项目根目录下创建jni文件夹</li>
<li>③在jni文件夹下创建.c文件<ul>
<li>本地函数命名规则: Java<em>包名</em>类名_本地方法名</li>
<li>JNIENV* env JNIEnv 是JniNativeInterface这个结构体的一级指针 </li>
<li>JniNativeInterface这个结构体定义了大量的函数指针</li>
<li>env 就是结构体JniNativeInterface这个结构体的二级指针</li>
<li>(*env)-&gt;调用结构体中的函数指针</li>
<li>第二个参数jobject 调用本地函数的java对象就是这个jobject</li>
</ul>
</li>
<li>④ 导入<jni.h></jni.h></li>
<li><p>⑤ 创建Android.mk makefile 告诉编译器.c的源文件在什么地方,要生成的编译对象的名字是什么</p>
<p>LOCAL_PATH := $(call my-dir)</p>
<p>include $(CLEAR_VARS)</p>
<p>LOCAL_MODULE    := hello   #指定了生成的动态链接库的名字<br>LOCAL_SRC_FILES := hello.c #指定了C的源文件叫什么名字</p>
<p>include $(BUILD_SHARED_LIBRARY)</p>
</li>
<li>⑥ 调用ndk-build编译c代码生成动态链接库.so文件 文件的位置 lib-&gt;armeabi-&gt;.so</li>
<li>⑦ 在java代码中加载动态链接库 System.loadlibrary(“动态链接库的名字”); Android.mkLOCAL_MODULE所指定的名字</li>
</ul>
</li>
</ul>
<h2 id="jni开发中的常见错误"><a href="#jni开发中的常见错误" class="headerlink" title="jni开发中的常见错误"></a>jni开发中的常见错误</h2><ul>
<li>java.lang.UnsatisfiedLinkError: Native method not found: 本地方法没有找到<ul>
<li>本地函数名写错</li>
<li>忘记加载.so文件 没有调用System.loadlibrary </li>
</ul>
</li>
<li>findLibrary returned null<ul>
<li>System.loadLibrary(“libhello”); 加载动态链接库时 动态链接库名字写错</li>
<li>平台类型错误 把只支持arm平台的.so文件部署到了 x86cpu的设备上 <ul>
<li>在jni目录下创建 Application.mk 在里面指定 </li>
<li>APP_ABI := armeabi<br>APP_PLATFORM := android-14</li>
</ul>
</li>
</ul>
</li>
<li>javah <ul>
<li>jdk 1.7 项目 src目录下运行javah</li>
<li>jdk 1.6 项目 bin目录下 classes文件夹</li>
<li>javah native方法声明的java类的全类名 </li>
</ul>
</li>
</ul>
<h2 id="jni简便开发流程"><a href="#jni简便开发流程" class="headerlink" title="jni简便开发流程"></a>jni简便开发流程</h2><ul>
<li>① 写java代码 native 声明本地方法</li>
<li>② 添加本地支持 右键单击项目-&gt;andorid tools-&gt;add native surport<ul>
<li>如果发现 finish不能点击需要给工作空间配置ndk目录的位置</li>
<li>window-&gt;preferences-&gt;左侧选择android-&gt;ndk 把ndk解压的目录指定进来</li>
</ul>
</li>
<li>③ 如果写的是.c的文件 先修改一下生成的.cpp文件的扩展名 不要忘了 相应修改Android.mk文件中LOCAL_SRC_FILES的值</li>
<li>④ javah生成头文件 在生成的头文件中拷贝c的函数名到.c的文件</li>
<li>⑤ 解决CDT插件报错的问题</li>
<li>右键单击项目选择 properties 选测 c/c++ general-&gt;paths and symbols-&gt;include选项卡下-&gt;点击add..-&gt;file system 选择ndk目录下 platforms文件夹 对应平台下(项目支持的最小版本)<br>usr 目录下 arch-arm -&gt; include  确定后 会解决代码提示和报错的问题</li>
<li>⑥编写C函数 如果需要单独编译一下c代码就在c/c++视图中找到小锤子 </li>
<li>如果想直接运行到模拟器上 就不用锤子了</li>
<li>⑦ java代码中不要忘了 system.loadlibrary();  </li>
</ul>
<h2 id="C代码中向logcat输出内容"><a href="#C代码中向logcat输出内容" class="headerlink" title="C代码中向logcat输出内容"></a>C代码中向logcat输出内容</h2><pre><code>Android.mk文件增加以下内容
LOCAL_LDLIBS += -llog
C代码中增加以下内容
#include &lt;android/log.h&gt;
#define LOG_TAG &quot;System.out&quot;
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
</code></pre><ul>
<li>define C的宏定义 起别名  #define LOG_TAG “System.out” 给”System.out”起别名LOG_TAG </li>
<li>#define LOGI(…) <strong>android_log_print(ANDROID_LOG_INFO, LOG_TAG, </strong>VA_ARGS__)</li>
<li>给 __android_log_print函数起别名  写死了前两个参数 第一个参数 优先级 第二个参数TAG</li>
<li><strong>VA_ARGS</strong> 可变参数的固定写法</li>
<li>LOGI(…)在调用的时候 用法跟printf()一样</li>
</ul>
<h2 id="C代码回调java方法"><a href="#C代码回调java方法" class="headerlink" title="C代码回调java方法"></a>C代码回调java方法</h2><ul>
<li>① 找到字节码对象 <ul>
<li>//jclass      (<em>FindClass)(JNIEnv</em>, const char*); </li>
<li>//第二个参数 要回调的java方法所在的类的路径 “com/itheima/callbackjava/JNI”</li>
</ul>
</li>
<li>② 通过字节码对象找到方法对象<ul>
<li>//jmethodID   (<em>GetMethodID)(JNIEnv</em>, jclass, const char<em>, const char</em>);</li>
<li>第二个参数 字节码对象 第三个参数 要反射调用的java方法名 第四个参数 要反射调用的java方法签名</li>
<li>javap -s 要获取方法签名的类的全类名 项目/bin/classes 运行javap </li>
</ul>
</li>
<li>③ 通过字节码创建 java对象(可选) 如果本地方法和要回调的java方法在同一个类里可以直接用 jni传过来的java对象 调用创建的Method<ul>
<li>jobject obj =(*env)-&gt;AllocObject(env,claz);</li>
<li>当回调的方法跟本地方法不在一个类里 需要通过刚创建的字节码对象手动创建一个java对象</li>
<li>再通过这个对象来回调java的方法</li>
<li>需要注意的是 如果创建的是一个activity对象 回调的方法还包含上下文 这个方法行不通!!!回报空指针异常 </li>
</ul>
</li>
<li>④ 反射调用java方法<ul>
<li>//void        (<em>CallVoidMethod)(JNIEnv</em>, jobject, jmethodID, …);</li>
<li>第二个参数 调用java方法的对象 第三个参数 要调用的jmethodID对象 可选的参数 调用方法时接收的参数 </li>
</ul>
</li>
</ul>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android下的Linux指令集]]></title>
      <url>http://yoursite.com/2016/09/09/Android%E4%B8%8B%E7%9A%84Linux%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>Android下的Linux指令集</strong><br><a id="more"></a></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Android目录结构"><a href="#Android目录结构" class="headerlink" title="Android目录结构"></a>Android目录结构</h2><ul>
<li><p>data</p>
<ul>
<li>app：用户安装的应用</li>
<li>data：应用的专属文件夹</li>
<li>system：系统的配置信息，注册表文件</li>
<li>anr：anr异常的记录信息</li>
</ul>
</li>
<li><p>dev：devices的缩写</p>
<ul>
<li>存放设备所对应的文件</li>
</ul>
</li>
<li><p>mnt：mount的缩写</p>
<ul>
<li>挂载在系统上的设备：sdcard，u盘</li>
</ul>
</li>
<li><p>proc：硬件配置，状态信息</p>
<ul>
<li>cpuinfo、meminfo</li>
</ul>
</li>
<li><p>sbin：system bin</p>
<ul>
<li>系统重要的二进制执行文件</li>
<li>adbd：服务器的adb进程</li>
</ul>
</li>
<li><p>system：</p>
<ul>
<li>app：存放系统应用，默认不能删除</li>
<li>bin：Android中可执行的linux指令文件</li>
<li>etc：host：主机名和ip地址的映射</li>
<li>fonts：Android中自带的字体</li>
<li>framework：存放谷歌提供的java api</li>
<li>lib：核心功能的类库，C/C++文件</li>
<li>media/audio：存放Android的音效文件</li>
<li>tts：语音发声引擎，默认不支持中文</li>
<li>usr：用户设备的配置信息，键盘编码和按键编码的映射</li>
<li>xbin：是专为开发人员准备的二进制指令</li>
</ul>
</li>
</ul>
<h2 id="Android下的Linux指令"><a href="#Android下的Linux指令" class="headerlink" title="Android下的Linux指令"></a>Android下的Linux指令</h2><ul>
<li>su：superuser<ul>
<li>切换到超级用户</li>
</ul>
</li>
<li>rm：remove，删除文件<ul>
<li>rm 文件名</li>
</ul>
</li>
<li>ls：列出目录下的所有文件和文件夹<ul>
<li>ls -l：查看文件的详细信息</li>
<li>ls -a：查看隐藏文件</li>
</ul>
</li>
<li>cd：切换到某个目录</li>
<li>cat：查看文件内容<ul>
<li>cat 文件名</li>
<li>不要cat二进制可执行文件</li>
</ul>
</li>
<li>mv：move 修改文件名<ul>
<li>mv 原文件名 新文件名</li>
</ul>
</li>
<li>mkdir：创建文件夹<ul>
<li>mkdir 文件夹名字</li>
</ul>
</li>
<li>rmdir：删除文件夹<ul>
<li>rmdir 文件夹名字 </li>
</ul>
</li>
<li>touch：创建新文件<ul>
<li>touch 文件名</li>
</ul>
</li>
<li>chmod：change mode，切换文件访问权限<ul>
<li>chmod 777 文件名</li>
</ul>
</li>
<li>echo：回显数据；重定向数据<ul>
<li>echo 数据 &gt; 文件名</li>
</ul>
</li>
<li>sleep：睡眠几秒</li>
<li>df：显示指定目录的容量</li>
<li>id：打印当前用户的id<ul>
<li>uid=0：root</li>
<li>uid=1000：system</li>
<li>uid=2000：shell</li>
<li>uid=10000+：一般应用程序的id</li>
</ul>
</li>
<li>ps：列出系统中运行的所有进程</li>
<li>kill：杀死指定pid的进程<ul>
<li>kill pid</li>
</ul>
</li>
<li>chown：change owner，修改拥有者<ul>
<li>chown 0.0 文件名</li>
</ul>
</li>
<li>mount：挂载文件系统<ul>
<li>mount -o remount rw /：挂载当前目录为可读可写权限</li>
<li>mount -o remount rw /system：重新挂载指定目录</li>
</ul>
</li>
</ul>
<h2 id="Android中特有的指令"><a href="#Android中特有的指令" class="headerlink" title="Android中特有的指令"></a>Android中特有的指令</h2><ul>
<li><p>am：ActivityManager，可以进行跟activity相关的操作</p>
<ul>
<li>am start -n com.itheima.createfile/com.itheima.createfile.MainActivity：开启指定Activity</li>
<li>am kill com.itheima.createfile：结束非前台进程</li>
<li>am force-stop com.itheima.createfile：结束进程</li>
</ul>
</li>
<li><p>pm：PackageManager</p>
<ul>
<li>pm disable 包名：冻结指定应用</li>
<li>pm enable 包名：解冻指定应用</li>
</ul>
</li>
<li><p>monkey -p com.itheima.createfile 1000：自动点击指定应用1000次</p>
</li>
</ul>
<hr>
<h2 id="刷模拟器，rom写文件（su）"><a href="#刷模拟器，rom写文件（su）" class="headerlink" title="刷模拟器，rom写文件（su）"></a>刷模拟器，rom写文件（su）</h2><ul>
<li>如果想让真实手机运行这些指令，手机必须要有root权限</li>
<li>刷root原理：把su二进制文件拷贝到/system/bin或者/system/xbin</li>
<li>Android刷root软件，工作的原理全部都是利用系统的漏洞实现</li>
<li>rom：可以理解为android系统的安装文件</li>
<li>把su文件和superuser.apk写入img文件</li>
<li><p>执行su指令</p>
<pre><code>Runtime.getRuntime().exec(&quot;su&quot;);
</code></pre></li>
</ul>
<hr>
<h2 id="小案例：冻结解冻应用"><a href="#小案例：冻结解冻应用" class="headerlink" title="小案例：冻结解冻应用"></a>小案例：冻结解冻应用</h2><ul>
<li>冻结和解冻指定的应用</li>
<li>  RootTools.sendShell(“pm disable “ + package, 300000);<br>  RootTools.sendShell(“pm enable “ + package, 300000);</li>
</ul>
<hr>
<h2 id="小案例：零权限读取用户隐私数据"><a href="#小案例：零权限读取用户隐私数据" class="headerlink" title="小案例：零权限读取用户隐私数据"></a>小案例：零权限读取用户隐私数据</h2><ul>
<li><p>直接修改短信数据库访问权限</p>
<pre><code>RootTools.sendShell(&quot;chmod 777 data/data/com.android.providers.telephony/databases/mmssms.db&quot;, 300000);
SQLiteDatabase db = SQLiteDatabase.openDatabase(&quot;data/data/com.android.providers.telephony/databases/mmssms.db&quot;, null, SQLiteDatabase.OPEN_READONLY);
Cursor cursor = db.query(&quot;sms&quot;, new String[]{&quot;body&quot;, &quot;address&quot;}, null, null, null, null, null);
while(cursor.moveToNext()){
    String body = cursor.getString(0);
    String address = cursor.getString(1);
    System.out.println(body + &quot;;&quot; + address);
}
RootTools.sendShell(&quot;chmod 660 data/data/com.android.providers.telephony/databases/mmssms.db&quot;, 300000);
</code></pre></li>
</ul>
<hr>
<h2 id="静默安装"><a href="#静默安装" class="headerlink" title="静默安装"></a>静默安装</h2><ul>
<li>为什么有静默安装的需求<ol>
<li>正规应用。电子市场，方便用户静默安装</li>
<li>流氓软件。后台偷偷下载安装。</li>
</ol>
</li>
<li><p>自动下载应用，然后静默安装</p>
<pre><code>//静默安装
RootTools.sendShell(&quot;pm install sdcard/flowstat.apk&quot;, 30000);
//打开
RootTools.sendShell(&quot;am start -n com.jijian.flowstat/com.jijian.flowstat.TrafficWidgetSetting&quot;, 30000);
//卸载应用
RootTools.sendShell(&quot;pm uninstall com.jijian.flowstat&quot;, 30000);
//删除下载的apk包
RootTools.sendShell(&quot;rm sdcard/flowstat.apk&quot;, 30000);
</code></pre></li>
</ul>
<hr>
<h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><ul>
<li>把ttf文件刷进img中</li>
<li>Android系统默认的中文字体为DroidSansFallBack.ttf</li>
<li>用你想使用的字体ttf文件替换掉这个文件即可</li>
</ul>
<hr>
<h2 id="修改开机动画"><a href="#修改开机动画" class="headerlink" title="修改开机动画"></a>修改开机动画</h2><ul>
<li>从真机中得到bootanimation.zip</li>
<li>把bootanimation.zip放入system/media目录下 </li>
</ul>
<hr>
<h2 id="删除锁屏密码"><a href="#删除锁屏密码" class="headerlink" title="删除锁屏密码"></a>删除锁屏密码</h2><ul>
<li>删除data/system下的key文件<ul>
<li>文本密码为password.key</li>
<li>手势密码为gesture.key</li>
</ul>
</li>
</ul>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知识，比什么都重要]]></title>
      <url>http://yoursite.com/2016/09/08/%E7%9F%A5%E8%AF%86%EF%BC%8C%E6%AF%94%E4%BB%80%E4%B9%88%E9%83%BD%E9%87%8D%E8%A6%81/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>每个犹太人在小的时候，他们的母亲都会给他们讲这样一个故事：</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>每个犹太人在小的时候，他们的母亲都会给他们讲这样一个故事：</p>
<p>有一艘大船出海远行，船上的乘客中除了一位拉比外，全是大亨。</p>
<p>大亨们闲来无聊，就开始相互炫耀起自己的财富来。正在他们争得面红耳赤时，拉比插话了：“我是你们这群人中最富有的，不信你们走着瞧。”</p>
<p>船行途中遇到了大风，只好靠岸，一靠岸便遇到了海盗，大亨们的财产被抢劫一空；而拉比的智慧和学识很快就受到岸边居民的赏识，他陆续在当地开班授课。于是，那些处境落魄的大亨们纷纷前来寻求拉比的帮助。他们见到拉比的第一句话就是：“还是您说得对，您确实是最富有的人。”</p>
<p>因此，在犹太人的心目中，赚了钱并不等于成功，真正的成功是获取知识和智慧，知识和智慧是任何人都抢不走的财富。正如《塔木德》所言：任何有知识的人都不会贫穷。</p>
<p>在犹太人的心目中，学者的地位不仅高于商人，而且高于国王。有话为证：“一个学者死了，没有人能代替他，而一个国王死了，所有人都能胜任。”</p>
<p>犹太商人说：“财富是靠脑袋的，而不是靠手，钞票有的是，遗憾的是你的口袋太小了。如果你的思维足够开阔，那你的钱包就会随之增大。”</p>
<p>正如犹太作家茨威格在其回忆录中所言：“发财致富对犹太人来说只是一个过渡阶段，而根本不是他的内在目标。一个犹太人的真正愿望，是提高自己的精神文明，使自己进入到更高的文化层次……倘若在自己的家庭成员中有一个人明显地成了称得上有知识的人，如当了教授、学者、音乐家，那么就会把这种荣誉头衔看做是属于全家的，仿佛他通过自己的成就会使全家人都变得高贵似的。”</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/rensheng/id-139345.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-10]]></title>
      <url>http://yoursite.com/2016/09/06/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-10/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Jsp学习-2</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Jsp中的四个域对象"><a href="#Jsp中的四个域对象" class="headerlink" title="Jsp中的四个域对象"></a>Jsp中的四个域对象</h2><pre><code>四个域对象：
pageContext      page域                
request          request域
session          session域
application       context域

1）域对象作用：
        保存数据  和 获取数据 ，用于数据共享。

2）域对象方法：
        setAttribute(&quot;name&quot;,Object) 保存数据
        getAttribute(&quot;name&quot;)  获取数据
        removeAttribute(&quot;name&quot;) 清除数据

3）域对象作用范围：
        page域： 只能在当前jsp页面中使用（当前页面）
        request域： 只能在同一个请求中使用（转发）
        session域： 只能在同一个会话（session对象）中使用（私有的）
        context域： 只能在同一个web应用中使用。（全局的）
</code></pre><h2 id="Jsp的最佳实践"><a href="#Jsp的最佳实践" class="headerlink" title="Jsp的最佳实践"></a>Jsp的最佳实践</h2><pre><code>Servlet技术： 开发动态资源。是一个java类，最擅长写java代码
jsp技术： 开发动态资源。通过java代码最擅长输出html代码。


各取所长：
    在web项目中涉及到逻辑：
        1）接收参数      servlet做
        2）处理业务逻辑，返回结果    servlet做
        3）显示数据到浏览器      jsp做
        4）跳转到其他页面        servlet做


servlet+jsp模式

  servlet:
        1）接收参数
        2）处理业务逻辑
        3）把结果保存到域对象中
        4）跳转到jsp页面
    Jsp:
        1）从域对象取出数据
        2）把数据显示到浏览器

servlet的数据    -&gt;   jsp页面
List&lt;Contact&gt;    使用域对象 共享数据    
</code></pre><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><pre><code>EL作用
    替换jsp表达式

EL表达式作用
    向浏览器输出域对象中的变量值或者是表达式计算的结果

语法：
    $(变量或表达式)
    1）输出基本数据类型变量
    1.1 从四个域获取    ${name}
            1.2 指定域获取
                ${pageScope.name}
        域范围： pageScoep / requestScope / sessionScope / 
        applicationScope

    2）输出对象的属性值
            Student
    3）输出集合对象
           List  和 Map
    4）EL表达式计算        
</code></pre><h2 id="Jsp标签"><a href="#Jsp标签" class="headerlink" title="Jsp标签"></a>Jsp标签</h2><h3 id="jsp标签的作用"><a href="#jsp标签的作用" class="headerlink" title="jsp标签的作用"></a>jsp标签的作用</h3><pre><code>替换jsp脚本

1）流程判断（if   for循环）
2）跳转页面（转发，重定向）
3）。。。。。        
</code></pre><h3 id="jsp标签分类"><a href="#jsp标签分类" class="headerlink" title="jsp标签分类"></a>jsp标签分类</h3><pre><code>1）内置标签（动作标签）： 不需要在jsp页面导入标签
2）jstl标签： 需要在jsp页面中导入标签
3）自定义标签 ： 开发者自行定义，需要在jsp页面导入标签        
</code></pre><h3 id="动作标签"><a href="#动作标签" class="headerlink" title="动作标签"></a>动作标签</h3><pre><code>转发标签  &lt;jsp:forward/&gt;
参数标签  &lt;jsp:pararm/&gt;
包含标签  &lt;jsp:include/&gt;
原理： 包含与被包含的页面先各自翻译成java源文件，然后再运行时合并在一起。
            （先翻译再合并），动态包含

        静态包含  vs  动态包含的区别？

    1） 语法不同
    静态包含语法： &lt;%@inclue file=&quot;被包含的页面&quot;%&gt;
    动态包含语法：　&lt;jsp:include page=&quot;被包含的页面&quot;&gt;

    2）参数传递不同
    静态包含不能向被包含页面传递参数
    动态包含可以向被包含页面传递参数

    3）原理不同
    静态包含： 先合并再翻译
    动态包含： 先翻译再合并    
</code></pre><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><pre><code>JSTL (全名：java  standard  tag  libarary   -  java标准标签库  )

核心标签库 （c标签库） 天天用
国际化标签（fmt标签库）
EL函数库（fn函数库）
xml标签库（x标签库）
sql标签库（sql标签库）    
</code></pre><h3 id="使用JSTL标签步骤"><a href="#使用JSTL标签步骤" class="headerlink" title="使用JSTL标签步骤"></a>使用JSTL标签步骤</h3><pre><code>1）导入jstl支持的jar包（标签背后隐藏的java代码）
        注意：使用javaee5.0的项目自动导入jstl支持jar包
2）使用taglib指令导入标签库 
                &lt;%@taglib uri=&quot;tld文件的uri名称&quot; prefix=&quot;简写&quot; %&gt;
3）在jsp中使用标签    
</code></pre><h3 id="核心标签库的重点标签："><a href="#核心标签库的重点标签：" class="headerlink" title="核心标签库的重点标签："></a>核心标签库的重点标签：</h3><pre><code>保存数据：
        &lt;c:set&gt;&lt;/c:set&gt;   
获取数据： 
         &lt;c:out value=&quot;&quot;&gt;&lt;/c:out&gt;
单条件判断
        &lt;c:if test=&quot;&quot;&gt;&lt;/c:if&gt;
多条件判断
      &lt;c:choose&gt;&lt;/c:choose&gt;
      &lt;c:when test=&quot;&quot;&gt;&lt;/c:when&gt;
      &lt;c:otherwise&gt;&lt;/c:otherwise&gt;
循环数据
      &lt;c:forEach&gt;&lt;/c:forEach&gt;
      &lt;c:forTokens items=&quot;&quot; delims=&quot;&quot;&gt;&lt;/c:forTokens&gt;
重定向
      &lt;c:redirect&gt;&lt;/c:redirect&gt;        
</code></pre><h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>需求： 向浏览器输出当前客户的IP地址 （只能使用jsp标签）</p>
<h3 id="第一个自定义标签开发步骤"><a href="#第一个自定义标签开发步骤" class="headerlink" title="第一个自定义标签开发步骤"></a>第一个自定义标签开发步骤</h3><blockquote>
<ol>
<li>编写一个普通的java类，继承SimpleTagSupport类，叫标签处理器类</li>
<li>在web项目的WEB-INF目录下建立itcast.tld文件，这个tld叫标签库的声明文件。（参考核心标签库的tld文件）</li>
<li>在jsp页面的头部导入自定义标签库<br>  &lt;%@taglib uri=”<a href="http://gz.itcast.cn" target="_blank" rel="external">http://gz.itcast.cn</a>“ prefix=”itcast”%&gt;</li>
<li>在jsp中使用自定义标签</li>
</ol>
</blockquote>
<h3 id="自定义标签的执行过程"><a href="#自定义标签的执行过程" class="headerlink" title="自定义标签的执行过程"></a>自定义标签的执行过程</h3><pre><code>问题： http://localhost:8080/day14/01.hellotag.jsp  
如何访问到自定义标签？

前提： tomcat服务器启动时，加载到每个web应用，
加载每个web应用的WEB-INF目录下的所有文件！！！例如。web.xml, tld文件！！！

1）访问01.hellotag.jsp资源

2）tomcat服务器把jsp文件翻译成java源文件-&gt;编译class
-&gt;构造类对象-&gt;调用_jspService（）方法

3）检查jsp文件的taglib指令，是否存在一个名为
http://gz.itcast.cn的tld文件。如果没有，则报错

4）上一步已经读到itcast.tld文件

5）读到&lt;itcast:showIp&gt;到itcast.tld文件中查询是否存在&lt;name&gt;为showIp的
&lt;tag&gt;标签

6）找到对应的&lt;tag&gt;标签，则读到&lt;tag-class&gt;内容

7）得到 gz.itcast.a_tag.ShowIpTag

构造ShowIpTag对象，然后调用ShowIpTag里面的方法
</code></pre><h3 id="自定义标签的作用"><a href="#自定义标签的作用" class="headerlink" title="自定义标签的作用"></a>自定义标签的作用</h3><blockquote>
<p>1）控制标签体内容是否输出<br>2）控制标签余下内容是否输出<br>3）控制重复输出标签体内容<br>4）改变标签体内容<br>5）带属性的标签</p>
</blockquote>
<h3 id="输出标签体内容格式"><a href="#输出标签体内容格式" class="headerlink" title="输出标签体内容格式"></a>输出标签体内容格式</h3><p>JSP：   在传统标签中使用的。可以写和执行jsp的java代码。<br>scriptless:  标签体不可以写jsp的java代码<br>empty:    必须是空标签。<br>tagdependent : 标签体内容可以写jsp的java代码，但不会执行。</p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[人生最好的心态是平静]]></title>
      <url>http://yoursite.com/2016/09/05/%E4%BA%BA%E7%94%9F%E6%9C%80%E5%A5%BD%E7%9A%84%E5%BF%83%E6%80%81%E6%98%AF%E5%B9%B3%E9%9D%99/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><img src="/images/9-5-1.jpg" alt=""></p>
<p><strong>经典哲理语句分享给大家</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>在我们的人生道路上，我们会遇到很多选择，如何选择也是非常重要的，不管前方的路有多苦，只要方向正确，朝着目标而努力奋斗，不要急着去说别无选择，下个路口就会遇见希望。</p>
<p>世界再大，大不过一颗心，如果你无法忘掉昨天，就不会有一个更好的明天世界再大，大不过一颗心;走得再远，远不过一场梦。;前路曲折其实是好事，因为我们能够看到更多的风景。人的一生，总是失意的时候多，得意的时候少，无论失意还是得意，都要淡定。感恩生活，你会发现生活中总有一些很随意的、很质朴无华的人或事，会为咸咸淡淡的人生抹上一层玫瑰般的亮色，而也正是这些零零碎碎的偶然美丽，给了你一个活得更美好的理由。</p>
<p>脚踏实地走好每一天，每一个现在，都是我们以后的记忆。以平常之心，接受已发生的事。以宽阔之心，包容对不起你的人。不要爱上一个漂亮的人，而要爱上一个使你的生活变漂亮的人。远处的是风景，近处的才是人生。走过的生活并不完美，太完美的也就不是生活了!如果生下来只是为了活下去，那倒不如为了生活而生活，所以对待生活的态度很重要!一个人有个好的心态，才能享受人生。人生途中，有些是无法逃避的，比如命运;有些是无法更改的，比如情缘。</p>
<p>那么，我们要如何面对生命呢?我们毋需等到生活完美无瑕，也毋需等到一切都平稳，想做什么，现在就可以开始做起。别哭穷，因为没人会给你钱。别喊累，因为没人会帮你做。别认输，因为没人希望你赢。别靠人，因为只有自己最可靠。别哭泣，因为大家等着看笑话。别乞求，因为有些人恨不得你当乞丐。别落魄，因为一堆人等着落井下石。别回首，因为事情多不堪回首。别离愁，因为只会才下眉头却上心头。别低头，因为地上没有黄金只有石头。别强求，因为强扭的瓜不甜。生活应该是愉快的，人生在世，不能没有欲望，生活总是一直变动，环境总是不可预知，现实生活中，各种突发状况总是层出不穷。</p>
<p>世上有许多的不幸，都是在急于向别人证明自己的过程中发生。“证明自己”本身并没有错，错的是很多人不过是在挣扎着“证明自己给别人看”。生命是自己的，不必用别人的标准来框定自己的人生。如果想讨好所有人，满足所有人的标准，最终只会迷失自己。试图让所有人都喜欢你，是徒劳无功的，也是对自己的不负责任。不要迷失在别人的评价里，用心倾听自己内心的声音，做自己就好。有人不在意你，你却在珍惜;有人在伤你，你却在原谅。情可以无价，但不能廉价;可以放宽底线，但不允许践踏底线。为爱可放弃所有，唯独不能放弃自尊。真心对你的人，会把你牵挂在心，绝不会因忙碌而去忽略;真正在乎你的情，会把你捧在手心，绝不会忽冷忽热让你去猜测感觉。</p>
<p>如果你要做一件事，请不要炫耀，也不要宣扬，不要以自己的标准来要求别人，也不要戴着有色眼镜看人。因为每个人都有自己的喜好和个性以及价值。你看不惯的事情，并不一定就是不好。幸福的理解有千万种，每人的诠释也不同，人生最大的幸福就是可以做自己。相信自己，跟随自己的心灵和直觉，不盲从信条，不盲目攀比，你就是最幸福的。金无赤足，人无完人，因为不完美，我们才最真实。只管安安静静的去做。因为那是你自己的事，别人不知道你的情况，也不可能帮你实现梦想。千万不要因为虚荣心而炫耀。也不要因为别人的一句评价而放弃自己的梦想。其实最好的状态，是坚持自己的梦想，听听前辈的建议，少错几步。值不值，时间是最好的证明。</p>
<p>该说时说是一种水平，该哑时哑是一种聪明。该干时干是一种能力，该退时退是一种修炼。该显时显是一种睿智，该藏时藏是一种城府。该吼时吼是一种威仪，该滑时滑是一种谋略。屈伸有度是一种成熟，吃睡平和是一种性情。俗话说：“害人之心不可有，防人之心不可无。”这说明了一个简单的道理：做人，要有一点心计。“心计”不是诡计、世故，而是做人的一种智慧和谋略。有了它，你就能左右逢源、游刃有余，永远立于不败之地。从未真正长大，人生，与其不断追求而无法满足，不如先沉淀自己，看清内心深处真正的需求。只要愿意打开封闭的心，去体会、去拥抱眼前的幸福，就会比别人活得更富足，更开心。</p>
<p>这世界上所有令人厌恶的伤害，所有烦人的工作，你怎么能放在心上呢?你静静待着，保持内心平静就好，根本没有必要去证明什么。人生给予了我们每一个人很多的礼物，只是有的人忘了拆开它，有的人丢弃一旁，有的人甚至没找着，那些礼物叫经验。人生，需要有一些时刻，慢下来，静下来，听一听花开的声音，看一看叶子舒卷的曼妙。不要以为你放不下的人同样会放不下你，鱼没有水会死，水没有鱼却会更清澈。该来的都会来，该走的全会走，别抗拒，别挽留。用最真实的自己，才能遇见最应该的那个人。一个人真正的强大，并非看他能做什么，而是看他能承担什么。</p>
<p>当有一天静静内省，感受着自己当下的幸福和快乐。才发现，对物质的欲望是永无止尽的。如果贪着太多，容易不择手段，误入歧途，所以要学会适可而止。一个人，一条路，人在途中，心随景动，从起点，到尽头，也许快乐，或有时孤独，如果心在远方，只需勇敢前行，梦想自会引路，有多远，走多远，把足迹连成生命线。旅行最大的好处，不是能见到多少人，见过多美的风景，而是走着走着，在一个际遇下，突然重新认识了自己。</p>
<p>人的一生，既不是想象中的那么好，也不是想象中的那么坏。每个人的背后都会有心酸，都会有无法言说的艰难。每个人都会有自己的泪要擦，都会有自己的路要走。只要记得，冷了给自己加件外衣;饿了给自己买个面包，痛了给自己一份坚强;失败了给自己一个目标，跌倒了在伤痛中爬起，给自己一个宽容的微笑继续往前走，做最真实的自己。别离，不记得容颜，忘记了彼此，而我们就像羁旅异乡一样。没有目的地，游离在这条路上，孤单或偶有人陪伴，可别忘了，路人，仅仅只能陪伴你一程，而不是全部，人生的路，要靠自己走，哪就坚强的迈步，勇敢的走完。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-9]]></title>
      <url>http://yoursite.com/2016/09/04/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-9/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Jsp学习-1</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="JSP基础"><a href="#JSP基础" class="headerlink" title="JSP基础"></a>JSP基础</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre><code>Servlet的作用：用java语言开发动态资源的技术
Jsp作用：用java(+html语言)开发动态资源的技术
                Jsp就是Servlet但作用不同
</code></pre><h3 id="Jsp的特点"><a href="#Jsp的特点" class="headerlink" title="Jsp的特点"></a>Jsp的特点</h3><pre><code>1) Jsp的运行也要交给tomcat服务器
    work目录 存放jsp运行时的临时文件
2) Jsp页面既可以写html代码，也可以写java代码
    (html不能写java代码，但是jsp可以写)
</code></pre><h3 id="Jsp页面作用"><a href="#Jsp页面作用" class="headerlink" title="Jsp页面作用"></a>Jsp页面作用</h3><pre><code>需求：显示当前的时间到浏览器上面
可以把jsp文件当做html页面在服务器上访问
</code></pre><h3 id="Jsp执行过程"><a href="#Jsp执行过程" class="headerlink" title="Jsp执行过程"></a>Jsp执行过程</h3><pre><code>问题： 访问http://localhost:8080/day12/01.hello.jsp  如何显示效果？

    1）访问到01.hello.jsp页面，tomcat扫描到jsp文件，在%tomcat%/work把
    jsp文件翻译成java源文件
                (01.hello.jsp   -&gt;   _01_hello_jsp.java) （翻译）
    2）tomcat服务器把java源文件编译成class字节码文件 （编译）
            （_01_hello_jsp.java  -&gt;  _01_hello_jsp.class）
    3）tomcat服务器构造_01_hello_jsp类对象
    4）tomcat服务器调用_01_hello_jsp类里面方法，返回内容显示到浏览器。    

    第一次访问jsp：
        走（1）（2）（3）（4）
    第n次访问jsp：
        走（4）

    jsp文件修改了或jsp的临时文件被删除了，要重新走翻译（1）和编译（2）的过程
</code></pre><h3 id="Jsp疑问"><a href="#Jsp疑问" class="headerlink" title="Jsp疑问"></a>Jsp疑问</h3><pre><code>问题：为什么Jsp就是Servlet？
jsp翻译的java文件：
    public final class _01_hello_jsp extends 
    org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent 

HttpJspBase类：
public abstract class org.apache.jasper.runtime.HttpJspBase extends 
javax.servlet.http.HttpServlet implements 
javax.servlet.jsp.HttpJspPage 

结论： Jsp就是一个servlet程序！！！
servlet的技术可以用在jsp程序中
jsp的技术并不是全部适用于servlet程序！

Servlet的生命周期：
        1）构造方法（第1次访问）
        2）init方法（第1次访问）
        3）service方法
        4）destroy方法        
Jsp的生命周期
        1）翻译： jsp-&gt;java文件
        2）编译： java文件-&gt;class文件（servlet程序）
        3）构造方法（第1次访问）
        4）init方法（第1次访问）：_jspInit()
        5）service方法：_jspService()
        6）destroy方法：_jspDestroy()
</code></pre><h2 id="Jsp语法"><a href="#Jsp语法" class="headerlink" title="Jsp语法"></a>Jsp语法</h2><h3 id="Jsp模板"><a href="#Jsp模板" class="headerlink" title="Jsp模板"></a>Jsp模板</h3><p>jsp页面中的html代码就是jsp模板</p>
<h3 id="Jsp表达式"><a href="#Jsp表达式" class="headerlink" title="Jsp表达式"></a>Jsp表达式</h3><pre><code>语法：&lt;%=变量或表达式%&gt;
作用： 向浏览器输出变量的值或表达式计算的结果
注意：        
    1）表达式的原理就是翻译成out.print(“变量” );通过该方法向浏览器写出内容
    2）表达式后面不需要带分号结束。        
</code></pre><h3 id="Jsp脚本"><a href="#Jsp脚本" class="headerlink" title="Jsp脚本"></a>Jsp脚本</h3><pre><code>语法：&lt;%java代码 %&gt;
作用： 执行java代码    
注意：
    1）原理把脚本中java代码原封不动拷贝到_jspService方法中执行。
</code></pre><h3 id="Jsp声明"><a href="#Jsp声明" class="headerlink" title="Jsp声明"></a>Jsp声明</h3><pre><code>语法：&lt;%! 变量或方法 %&gt;
作用： 声明jsp的变量或方法
注意:
    1）变量翻译成成员变量，方法翻译成成员方法。    
</code></pre><h3 id="Jsp注释"><a href="#Jsp注释" class="headerlink" title="Jsp注释"></a>Jsp注释</h3><pre><code>语法： &lt;%!--  jsp注释  --%&gt;
注意;
    1)html的注释会被翻译和执行。而jsp的注释不能被翻译和执行。    
</code></pre><h2 id="Jsp的三大指令"><a href="#Jsp的三大指令" class="headerlink" title="Jsp的三大指令"></a>Jsp的三大指令</h2><h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><pre><code>作用：用于包含其他页面
语法： &lt;%@include file=&quot;common/header.jsp&quot;%&gt;
注意：
    1）原理是把被包含的页面（header.jsp）的内容翻译到包含页面
    (index.jsp)中,合并成翻译成一个java源文件，再编译运行！！，
    这种包含叫静态包含（源码包含）
    2）如果使用静态包含，被包含页面中不需要出现全局的html标签了！！！
    （如html、head、body）    
</code></pre><h3 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h3><pre><code>作用： 告诉tomcat服务器如何翻译jsp文件
&lt;%@ page 
    language=&quot;java&quot;   --告诉服务器使用什么动态语言来翻译jsp文件
    import=&quot;java.util.*&quot; --告诉服务器java文件使用什么包
                                导入包，多个包之间用逗号分割
    pageEncoding=&quot;utf-8&quot;  --告诉服务器使用什么编码翻译jsp文件
    （成java文件）
 contentType=&quot;text/html; charset=utf-8&quot; 
 服务器发送浏览器的数据类型和内容编码
        注意：在开发工具中，以后只需要设置pageEncoding即可解决中文乱码问题
    errorPage=&quot;error.jsp&quot;
    isErrorPage=&quot;false&quot;
    buffer=&quot;8kb&quot;
    session=&quot;true&quot;
    isELIgnored=&quot;false&quot;
%&gt;        

异常错误相关的
    errorPage 指定当前jsp页面的错误处理页面。
    isErorrPage    指定当前页面为错误处理页面。flase，则表示不是，
    不能使用exception内置对象，只有true才可以

    配置全局错误处理
      &lt;!-- 全局错误处理页面配置 --&gt;
      &lt;error-page&gt;
        &lt;error-code&gt;500&lt;/error-code&gt;
        &lt;location&gt;/common/500.jsp&lt;/location&gt;
      &lt;/error-page&gt;
      &lt;error-page&gt;
        &lt;error-code&gt;404&lt;/error-code&gt;
        &lt;location&gt;/common/404.html&lt;/location&gt;
      &lt;/error-page&gt;    

    session:  是否开启session功能。false，不能用session内置对象；
    true，可以使用session内置对象。
    buffer:  jsp页面的缓存区大小。
    isELIgnore： 是否忽略EL表达式。
</code></pre><h3 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h3><h2 id="Jsp的内置对象-重点"><a href="#Jsp的内置对象-重点" class="headerlink" title="Jsp的内置对象(重点)"></a>Jsp的内置对象(重点)</h2><h3 id="什么是内置对象？"><a href="#什么是内置对象？" class="headerlink" title="什么是内置对象？"></a>什么是内置对象？</h3><pre><code>在jsp开发中，会频繁使用到一些对象
例如HttpSession,ServletContext,ServletContext,HttpServletRequet。
如果我们每次要使用这些对象都去创建这些对象就显示非常麻烦。
所以Sun公司设计Jsp时，在jsp页面加载完毕之后就会自动帮开发者创建好这些对象，
而开发者只需要直接使用这些对象调用方法即可！
这些创建好的对象就叫内置对象！！！！        

举例：
servlet: 
        HttpSession session = request.getSession(true); 
        （需要开发者做）

jsp:
    tomcat服务器：    HttpSession session = request.getSession(true);
    (不需要开发者做)
    开发者做的： session.getId();
</code></pre><h3 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h3><pre><code>内置对象名          类型
 request         HttpServletRequest
 response      HttpServletResponse
 config        ServletConfig
application        ServletContext
 session         HttpSession
exception        Throwable
page            Object(this)
out             JspWriter
pageContext     PageContext     
</code></pre><h3 id="Out-对象"><a href="#Out-对象" class="headerlink" title="Out 对象"></a>Out 对象</h3><pre><code>out对象类型：jspWriter类，相当于带缓冲的PrintWriter\

PrintWriter:
    writer(内容): 直接向浏览器写出内容

JspWriter:
    writer(内容)：向jsp缓存输出内容

    当满足以下条件之一，缓冲区内容写出：
    1）缓冲区满了
    2）刷新缓存区
    3）关闭缓存区
    4）执行完毕jsp页面
</code></pre><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><pre><code>pageContext对象的类型是PageContext，叫jsp的上下文对象

可以获取其他八个内置对象
    public class 01_hello_jsp {
            public void _jspService(request,response){
                创建内置对象
                HttpSession session =....;
                ServletConfig config = ....;

                把8个经常使用的内置对象封装到PageContext对象中
                PageContext pageContext  = 封装；
                调用method1方法
                method1(pageContext);
            }

            public void method1(PageContext pageContext){
                希望使用内置对象
                从PageContext对象中获取其他8个内置对象
                JspWriter out =pageContext.getOut();
                HttpServletRequest rquest =     
                pageContext.getRequest();
                ........
            }
    }

    使用场景： 在自定义标签的时候，PageContext对象频繁使用到！！！
</code></pre><h3 id="本身就是一个域对象"><a href="#本身就是一个域对象" class="headerlink" title="本身就是一个域对象"></a>本身就是一个域对象</h3><pre><code>ServletContext context域
HttpServletRequet  request域
HttpSession    session域     --Servlet学习的
PageContext   page域           --jsp学习的


作用： 保存数据和获取数据，用于共享数据

#保存数据
    1）默认情况下，保存到page域
            pageContext.setAttribute(&quot;name&quot;);
    2）可以向四个域对象保存数据
            pageContext.setAttribute(&quot;name&quot;,域范围常量)

#获取数据
    1）默认情况下，从page域获取
            pageContext.getAttribute(&quot;name&quot;)
    2）可以从四个域中获取数据
            pageContext.getAttribute(&quot;name&quot;,域范围常量)

        域范围常量:
            PageContext.PAGE_SCOPE
            PageContext.REQUEST_SCOPE
            PageContext..SESSION_SCOPE
            PageContext.APPLICATION_SCOPE
    3）自动在四个域中搜索数据
            pageContext.findAttribute(&quot;name&quot;);
        顺序： page域 -&gt; request域 -&gt; session域- &gt; 
        context域（application域）    
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-8]]></title>
      <url>http://yoursite.com/2016/09/03/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;会话管理</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="生活中的会话"><a href="#生活中的会话" class="headerlink" title="生活中的会话"></a>生活中的会话</h3><pre><code>我： 小张，你会跳小苹果码？
小张： 会，怎么了？
我： 公司年会上要表演节目，你教教我把
小张：没问题，一顿饭而已。
我： OK。
。。。。。。。。

在这次生活中的会话中产生通话记录（会话数据）
</code></pre><h3 id="软件中的会话"><a href="#软件中的会话" class="headerlink" title="软件中的会话"></a>软件中的会话</h3><p>一次会话： 打开浏览器 -&gt; 访问一些服务器内容 -&gt; 关闭浏览器</p>
<h4 id="登录场景："><a href="#登录场景：" class="headerlink" title="登录场景："></a>登录场景：</h4><pre><code>打开浏览器 -&gt; 浏览到登陆页面 -&gt; 输入用户名和密码 -&gt; 访问到用户主页(显示用户
名)
修改密码（输入原密码）
修改收货地址
.......

问题：在此处登录会话过程中产生的数据（用户会话数据）如何保存下来呢？
</code></pre><h4 id="购物场景："><a href="#购物场景：" class="headerlink" title="购物场景："></a>购物场景：</h4><pre><code>打开浏览器 -&gt; 浏览商品列表  -&gt; 加入购物车(把商品信息保存下来)  -&gt; 关闭
 浏览器
打开浏览器-&gt;  直接进入购物车 -&gt; 查看到上次加入购物车的商品 -&gt; 下订单 
 -&gt; 支付

问题： 在购物会话过程中，如何保存商品信息？？

会话管理： 管理浏览器客户端 和 服务器端之间会话过程中产生的会话数据。

域对象： 实现资源之间的数据共享。

request域对象
context域对象
</code></pre><h4 id="登录场景：-1"><a href="#登录场景：-1" class="headerlink" title="登录场景："></a>登录场景：</h4><pre><code>小张： 输入“张三” （保存数据： context.setAttribute(&quot;name&quot;,&quot;张三&quot;)）
-&gt; 用户主页（显示“张三”）
小李： 输入“李四”(保存数据：context.setAttribute(&quot;name&quot;,&quot;李四&quot;)) -&gt;     
用户主页（显示“李四”）

问题： context是所有用户公有的资源！！！会覆盖数据。

小张： 输入“张三”（保存数据： request.setAttribute(&quot;name&quot;,&quot;张三&quot;)）
- &gt; 用户主页（显示“张三”）                    
问题： 一定要使用转发技术来跳转页面！！！

解决办法： 可以使用session域对象来保存会话数据！！！
</code></pre><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><p>Cookie技术：会话数据保存在浏览器客户端<br>Session技术：会话数据保存在服务器端</p>
<h3 id="Cookie技术"><a href="#Cookie技术" class="headerlink" title="Cookie技术"></a>Cookie技术</h3><h4 id="Cookie技术核心"><a href="#Cookie技术核心" class="headerlink" title="Cookie技术核心"></a>Cookie技术核心</h4><p>Cookie类：用以存储会话数据</p>
<pre><code>1）构造Cookie对象
    Cookie(java.lang.String name, java.lang.String value)
2）设置cookie
    void setPath(java.lang.String uri)   ：设置cookie的有效访问路径
    void setMaxAge(int expiry) ： 设置cookie的有效时间
    void setValue(java.lang.String newValue) ：设置cookie的值
3）发送cookie到浏览器端保存
    void response.addCookie(Cookie cookie)  : 发送cookie
4）服务器接收cookie
    Cookie[] request.getCookies()  : 接收cookie
</code></pre><h4 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h4><pre><code>1）服务器创建cookie对象，把会话数据存储到cookie对象中。
        new Cookie(&quot;name&quot;,&quot;value&quot;);
2）    服务器发送cookie信息到浏览器
        response.addCookie(cookie);

举例： set-cookie: name=eric  (隐藏发送了一个set-cookie名称的响应头)
3）浏览器得到服务器发送的cookie，然后保存在浏览器端。
4）浏览器在下次访问服务器时，会带着cookie信息
        举例： cookie: name=eric  (隐藏带着一个叫cookie名称的请求头)
5）服务器接收到浏览器带来的cookie信息
        request.getCookies();    
</code></pre><h4 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h4><pre><code>1）void setPath(java.lang.String uri)   ：设置cookie的有效访问路径。
   有效路径指的是cookie的有效路径保存在哪里，那么浏览器在有效路径下访问服务
   器时就会带着cookie信息，否则不带cookie信息。

2）void setMaxAge(int expiry) ： 设置cookie的有效时间。
        正整数：表示cookie数据保存浏览器的缓存目录（硬盘中），数值表示保存的
        时间。
        负整数：表示cookie数据保存浏览器的内存中。浏览器关闭cookie就丢失
        了！！
        零：表示删除同名的cookie数据
3）Cookie数据类型只能保存非中文字符串类型的。
   可以保存多个cookie，但是浏览器一般只允许存放300个Cookie，每个站点最多存
   放20个Cookie，每个Cookie的大小限制为4KB。
</code></pre><h3 id="Session技术"><a href="#Session技术" class="headerlink" title="Session技术"></a>Session技术</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><pre><code>Cookie的局限：
    1）Cookie只能存字符串类型。不能保存对象
    2）只能存非中文。
    3）1个Cookie的容量不超过4KB。

如果要保存非字符串，超过4kb内容，只能使用session技术！！！

Session特点：
        会话数据保存在服务器端。（内存中）                
</code></pre><h4 id="Session核心技术"><a href="#Session核心技术" class="headerlink" title="Session核心技术"></a>Session核心技术</h4><pre><code>HttpSession类：用于保存会话数据

1）创建或得到session对象
    HttpSession getSession()  
    HttpSession getSession(boolean create)  
2）设置session对象
    void setMaxInactiveInterval(int interval)  ： 设置session的有效时
    间
    void invalidate()     ： 销毁session对象
    java.lang.String getId()  ： 得到session编号
3）保存会话数据到session对象
    void setAttribute(java.lang.String name, java.lang.Object value)  
    ： 保存数据
    java.lang.Object getAttribute(java.lang.String name)  ： 获取数据
    void removeAttribute(java.lang.String name) ： 清除数据        
</code></pre><h4 id="Session技术原理"><a href="#Session技术原理" class="headerlink" title="Session技术原理"></a>Session技术原理</h4><pre><code>问题： 服务器能够识别不同的浏览者！！！
现象：

前提： 在哪个session域对象保存数据，就必须从哪个域对象取出！！！！
浏览器1：(给s1分配一个唯一的标记：s001,把s001发送给浏览器)
        1）创建session对象，保存会话数据
                HttpSession session = request.getSession(); 
                --保存会话数据 s1
浏览器1    的新窗口（带着s001的标记到服务器查询，s001-&gt;s1,返回s1）    
        1）得到session对象的会话数据
                HttpSession session = request.getSession();   
                --可以取出  s1

新的浏览器1：(没有带s001,不能返回s1)
        1）得到session对象的会话数据
                HttpSession session = request.getSession();   
                --不可以取出  s2

浏览器2：(没有带s001,不能返回s1)
        1）得到session对象的会话数据
                HttpSession session = request.getSession();  
                --不可以取出  s3

代码解读：HttpSession session = request.getSession();

1）第一次访问创建session对象，给session对象分配一个唯一的ID，叫JSESSIONID
        new HttpSession();
2）把JSESSIONID作为Cookie的值发送给浏览器保存
        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, sessionID);
        response.addCookie(cookie);
3）第二次访问的时候，浏览器带着JSESSIONID的cookie访问服务器
4）服务器得到JSESSIONID，在服务器的内存中搜索是否存放对应编号的session对
象。
        if(找到){
            return map.get(sessionID);
        }
        Map&lt;String,HttpSession&gt;]

        &lt;&quot;s001&quot;, s1&gt;
        &lt;&quot;s001,&quot;s2&gt;
5）如果找到对应编号的session对象，直接返回该对象

6）如果找不到对应编号的session对象，创建新的session对象，继续走1的流程

结论：通过JSESSION的cookie值在服务器找session对象！！！！！    
</code></pre><h4 id="Session细节"><a href="#Session细节" class="headerlink" title="Session细节"></a>Session细节</h4><pre><code>1）java.lang.String getId()  ： 得到session编号
2）两个getSession方法：
    getSession(true) / getSession()  : 创建或得到session
        对象。没有匹配的session编号，自动创建新的session对象。
    getSession(false):得到session对象。没有匹配的session编号，
    返回null
3）void setMaxInactiveInterval(int interval)  ： 设置session的有效
时间
            session对象销毁时间：
                3.1 默认情况30分服务器自动回收
                3.2 修改session回收时间
                3.3 全局修改session有效时间
                3.4.手动销毁session对象
                    void invalidate()     ： 销毁session对象
4）如何避免浏览器的JSESSIONID的cookie随着浏览器关闭而丢失的问题                        
       /**
         * 手动发送一个硬盘保存的cookie给浏览器
         */
        Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId());
        c.setMaxAge(60*60);
        response.addCookie(c);    
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-7]]></title>
      <url>http://yoursite.com/2016/09/02/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-7/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Servlet编程</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Servlet编程"><a href="#Servlet编程" class="headerlink" title="Servlet编程"></a>Servlet编程</h2><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><pre><code>1) 编写java类，继承HttpServlet类
2) 重写doGet和doPost方法
3) Servlet程序交给tomcat服务器运行
    将程序的字节码class码拷贝到WEB-INF/classes目录下。
    在web.xml文件里进行配置 
    &lt;!-- 配置一个servlet --&gt;
      &lt;!-- servlet的配置 --&gt;
      &lt;servlet&gt;
        &lt;!-- servlet的内部名称，自定义。尽量有意义 --&gt;
        &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt;
        &lt;!-- servlet的类全名： 包名+简单类名 --&gt;
        &lt;servlet-class&gt;gz.example.a_servlet.FirstServlet&lt;/servlet-cl
        ass&gt;
      &lt;/servlet&gt;


      &lt;!-- servlet的映射配置 --&gt;
      &lt;servlet-mapping&gt;
        &lt;!-- servlet的内部名称，一定要和上面的内部名称保持一致！！ --&gt;
        &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt;
        &lt;!-- servlet的映射路径（访问servlet的名称） --&gt;
        &lt;url-pattern&gt;/first&lt;/url-pattern&gt;
      &lt;/servlet-mapping&gt;
</code></pre><h3 id="访问步骤"><a href="#访问步骤" class="headerlink" title="访问步骤"></a>访问步骤</h3><pre><code>问题：访问次URL： http://localhost:8080/day10/first

前提: tomcat服务器启动时，首先加载webapp上面的web.xml的配置文件
http:// http协议
localhost: 到本地的hosts文件中查找是否存在该域名对应的IP地址
            127.0.0.1
8080：找到tomcat服务器
/day10: 找到webapp目录下的day10目录
first: 资源名称.
        1）在day10的web.xml中查找是否有匹配的url-pattern的内容（/first）
        2）如果找到匹配的url-pattern,则使用当前servlet-name的名称到
        web.xml文件中查询是否相同名称的servlet配置
        3）如果找到，则取出对应的servlet配置信息中的servlet-class内容：
                字符串： gz.example.a_servlet.FirstServlet
        通过反射
           a) 构造FirstServlet的对象
           b) 然后调用FirstServlet里面的方法
</code></pre><h3 id="Servlet的映射路径"><a href="#Servlet的映射路径" class="headerlink" title="Servlet的映射路径"></a>Servlet的映射路径</h3><pre><code>&lt;!-- servlet的映射配置 --&gt;
  &lt;servlet-mapping&gt;
    &lt;!-- servlet的内部名称，一定要和上面的内部名称保持一致！！ --&gt;
    &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt;
    &lt;!-- servlet的映射路径（访问servlet的名称） --&gt;
    &lt;url-pattern&gt;/first&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
             url-pattern       浏览器输入
精确匹配     /first           http://localhost:8080/day10/first
            /itcast/demo1   http://localhost:8080/day10/itcast/demo1


模糊匹配         /*          http://localhost:8080/day10/任意路径               
               /itcast/*     http://localhost:8080/day10/itcast/任意
                             路径                       
               *.后缀名      

注意: 
    1) url-pattern 要么以/开头 要么以*开头。  例如， itcast是非法路径。
    2）不能同时使用两种模糊匹配，例如 /itcast/*.do是非法路径
    3）当有输入的URL有多个servlet同时被匹配的情况下：
        3.1 精确匹配优先。（长的最像优先被匹配）
        3.2 以后缀名结尾的模糊url-pattern优先级最低！！！               
</code></pre><h3 id="Servlet缺省路径"><a href="#Servlet缺省路径" class="headerlink" title="Servlet缺省路径"></a>Servlet缺省路径</h3><pre><code>servlet的缺省路径（&lt;url-pattern&gt;/&lt;/url-pattern&gt;）是在tomcat服务器内置的
一个路径。
该路径对应的是一个DefaultServlet（缺省Servlet）。
这个缺省的Servlet的作用是用于解析web应用的静态资源文件。

问题： URL输入http://localhost:8080/day10/index.html 如何读取文件

1）到当前day10应用下的web.xml文件查找是否有匹配的url-pattern。
2）如果没有匹配的url-pattern，则交给tomcat的内置的DefaultServlet处理
3）DefaultServlet程序到day10应用的根目录下查找是存在一个名称为
index.html的静态文件。
4）如果找到该文件，则读取该文件内容，返回给浏览器。
5）如果找不到该文件，则返回404错误页面。

    结论： 先找动态资源，再找静态资源。
</code></pre><h3 id="Servlet的生命周期-重点"><a href="#Servlet的生命周期-重点" class="headerlink" title="Servlet的生命周期(重点)"></a>Servlet的生命周期(重点)</h3><pre><code>Servlet的生命周期：Servlet类对象什么时候创建，调用什么方法，什么时候销毁。
Servlet程序的生命周期由tomcat服务器控制
</code></pre><h4 id="Servlet重要的生命周期"><a href="#Servlet重要的生命周期" class="headerlink" title="Servlet重要的生命周期"></a>Servlet重要的生命周期</h4><pre><code>构造方法： 创建servlet对象的时候调用。默认情况下，第一次访问servlet的时候创
建servlet对象。                        
init方法： 创建完servlet对象的时候调用。只调用1次。
service方法： 每次发出请求时调用。调用n次。
destroy方法： 销毁servlet对象的时候调用。停止服务器或者重新部署web应用时销
毁servlet对象。
只调用1次。    只调用1次。证明servlet对象在tomcat是单实例的。
</code></pre><h4 id="伪代码演示servlet的生命周期"><a href="#伪代码演示servlet的生命周期" class="headerlink" title="伪代码演示servlet的生命周期"></a>伪代码演示servlet的生命周期</h4><pre><code>Tomtcat内部代码运行：
1）通过映射找到到servlet-class的内容，字符串： 
gz.itcast.a_servlet.FirstServlet
2）通过反射构造FirstServlet对象
    2.1 得到字节码对象
    Class clazz = class.forName(&quot;gz.itcast.a_servlet.FirstServlet&quot;);
    2.2 调用无参数的构造方法来构造对象
    Object obj = clazz.newInstance();     ---1.servlet的构造方法被调用
3）创建ServletConfig对象，通过反射调用init方法
    3.1 得到方法对象
    Method m = clazz.getDeclareMethod(&quot;init&quot;,ServletConfig.class);
    3.2 调用方法
    m.invoke(obj,config);             --2.servlet的init方法被调用
4）创建request，response对象，通过反射调用service方法
    4.1 得到方法对象
    Methodm m =clazz.getDeclareMethod(&quot;service&quot;,
    HttpServletRequest.class,HttpServletResponse.class);
    4.2 调用方法
    m.invoke(obj,request,response);  --3.servlet的service方法被调用
5）当tomcat服务器停止或web应用重新部署，通过反射调用destroy方法
    5.1 得到方法对象
    Method m = clazz.getDeclareMethod(&quot;destroy&quot;,null);
    5.2 调用方法
    m.invoke(obj,null);            --4.servlet的destroy方法被调用        
</code></pre><h3 id="Servlet的自动加载"><a href="#Servlet的自动加载" class="headerlink" title="Servlet的自动加载"></a>Servlet的自动加载</h3><pre><code>默认情况下，第一次访问servlet的时候创建servlet对象。
如果servlet的构造方法或init方法中执行了比较多的逻辑代码，那么导致用户第一次
访问sevrlet的时候比较慢。

改变servlet创建对象的时机： 提前到加载web应用的时候！！！
在servlet的配置信息中，加上一个&lt;load-on-startup&gt;即可！！
&lt;servlet&gt;
    &lt;servlet-name&gt;LifeDemo&lt;/servlet-name&gt;
    &lt;servlet-class&gt;gz.itcast.c_life.LifeDemo&lt;/servlet-class&gt;
    &lt;!-- 让servlet对象自动加载 --&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  注意： 整数值越大，
    创建优先级越低！！
&lt;/servlet&gt;
</code></pre><h3 id="有参的init方法和无参的init方法"><a href="#有参的init方法和无参的init方法" class="headerlink" title="有参的init方法和无参的init方法"></a>有参的init方法和无参的init方法</h3><pre><code>有参方法，生命周期方法，一定会被tomcat服务器调用 
无参方法，是用以初始化的方法
</code></pre><h3 id="Servlet的多线程并发问题"><a href="#Servlet的多线程并发问题" class="headerlink" title="Servlet的多线程并发问题"></a>Servlet的多线程并发问题</h3><pre><code>注意： servlet对象在tomcat服务器是单实例多线程的。

因为servlet是多线程的，所以当多个servlet的线程同时访问了servlet的
共享数据，如成员变量，可能会引发线程安全问题。

解决办法：
    1）把使用到共享数据的代码块进行同步（使用synchronized关键字进行同步）
    2）建议在servlet类中尽量不要使用成员变量。如果确实要使用成员，
    必须同步。而且尽量缩小同步代码块的范围。
   （哪里使用到了成员变量，就同步哪里），以避免因为同步而导致并发效率降低。        
</code></pre><h3 id="Servlet学习："><a href="#Servlet学习：" class="headerlink" title="Servlet学习："></a>Servlet学习：</h3><pre><code>HttpServletRequest  请求对象：获取请求信息
HttpServletResponse 响应对象： 设置响应对象
ServletConfig对象    servlet配置对象
ServletContext对象  servlet的上下文对象
</code></pre><h3 id="Servletconfig对象"><a href="#Servletconfig对象" class="headerlink" title="Servletconfig对象"></a>Servletconfig对象</h3><pre><code>用于加载servlet的初始化参数

对象创建和得到
    创建时机：在创建完servlet对象后，调用init方法之前
    得到对象：直接从init方法里得到

servlet的初始化配置参数
    &lt;servlet&gt;
        &lt;servlet-name&gt;ConfigDemo&lt;/servlet-name&gt;
        &lt;servlet-class&gt;gz.itcast.f_config.ConfigDemo&lt;/servlet-class&gt;
        &lt;!-- 初始参数： 这些参数会在加载web应用的时候，封装到ServletConfi
        g对象中 --&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;path&lt;/param-name&gt;
            &lt;param-value&gt;e:/b.txt&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;
    注意： servlet的参数只能由当前的这个sevlet获取！！！！

    ServletConfig的API：
        java.lang.String getInitParameter(java.lang.String name) 
        根据参数名获取参数值
        java.util.Enumeration getInitParameterNames()    获取所有参数
        ServletContext getServletContext()     得到servlet上下文对象
        java.lang.String getServletName()       得到servlet的名称
</code></pre><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><pre><code>ServletContext对象 ,叫做Servlet的上下文对象。
表示一个当前的web应用环境。一个web应用中只有一个ServletContext对象。
</code></pre><h4 id="对象创建和得到"><a href="#对象创建和得到" class="headerlink" title="对象创建和得到"></a>对象创建和得到</h4><pre><code>创建时机：加载web应用时创建ServletContext对象。
得到对象： 从ServletConfig对象的getServletContext方法得到

    我们设计：
        创建ServletConfig对象
        public void init( ServletConfig config，ServletContext c
        ontext ){  多了一个参数
            得到ServletConfig对象
            得到ServletContext对象；
        }

    Sun公司设计
        1）创建ServletContext对象      ServletContext  context = 
        new ServletContext()        

        2）创建ServletConfig对象   ServetConfig config 
        = new ServletConfig();
         config.setServletContxt(context);
        class  ServletConfig{
                ServletContext context;

                public ServletContext getServletContxt(){
                    return contxt;
                }
        } 

        public void init( ServletConfig config ){
            得到ServletConfig对象
            从ServletConfig对象中得到ServletContext对象
            SerlvetContext context = config.getServletContext();

        }    
</code></pre><h4 id="ServletContext对象的核心API-作用"><a href="#ServletContext对象的核心API-作用" class="headerlink" title="ServletContext对象的核心API(作用)"></a>ServletContext对象的核心API(作用)</h4><pre><code>java.lang.String getContextPath()   --得到当前web应用的路径

java.lang.String getInitParameter(java.lang.String name) 
--得到web应用的初始化参数
java.util.Enumeration getInitParameterNames()  

void setAttribute(java.lang.String name, 
java.lang.Object object) --域对象有关的方法

java.lang.Object getAttribute(java.lang.String name)  
void removeAttribute(java.lang.String name)  

RequestDispatcher getRequestDispatcher(java.lang.String path)  
--转发（类似于重定向）

java.lang.String getRealPath(java.lang.String path)    
--得到web应用的资源文件
java.io.InputStream getResourceAsStream(java.lang.String path)  

得到web应用路径
java.lang.String getContextPath()  用在请求重定向的资源名称中

得到web应用的初始化参数（全局）
java.lang.String getInitParameter(java.lang.String name)  
--得到web应用的初始化参数

java.util.Enumeration getInitParameterNames()  

web应用参数可以让当前web应用的所有servlet获取！！！
</code></pre><h3 id="域对象有关的方法"><a href="#域对象有关的方法" class="headerlink" title="域对象有关的方法"></a>域对象有关的方法</h3><pre><code>域对象：作用是用于保存数据，获取数据。可以在不同的动态资源之间共享数据。

        案例：   
        Servlet1                   Servlet2
        name=eric                     
    response.sendRedirect(&quot;/Servlet2?name=eric&quot;)    
    String request.getParameter(&quot;name&quot;);
        保存到域对象中            从域对象获取
        Student                  
    方案1： 可以通过传递参数的形式，共享数据。局限：只能传递字符串类型。
    方案2： 可以使用域对象共享数据，好处：可以共享任何类型的数据！！！！！

    ServletContext就是一个域对象！！！！

保存数据： void setAttribute(java.lang.String name, java.lang.Object 
           object)                    
获取数据： java.lang.Object getAttribute(java.lang.String name)  
删除数据： void removeAttribute(java.lang.String name)  

ServletContext域对象：作用范围在整个web应用中有效！！！

    所有域对象：
        HttpServletRequet 域对象
        ServletContext域对象
        HttpSession 域对象
        PageContext域对象    
</code></pre><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><pre><code>RequestDispatcher getRequestDispatcher(java.lang.String path)

1）转发
    a）地址栏不会改变
    b）转发只能转发到当前web应用内的资源
    c）可以在转发过程中，可以把数据保存到request域对象中

2）重定向            
    a）地址栏会改变，变成重定向到地址。
    b）重定向可以跳转到当前web应用，或其他web应用，甚至是外部域名网站。
    c）不能再重定向的过程，把数据保存到request中。


结论： 如果要使用request域对象进行数据共享，只能用转发技术！！！

加载web应用中的资源文件
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-6]]></title>
      <url>http://yoursite.com/2016/09/01/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-6/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Servlet入门与Http协议</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="开发动态资源"><a href="#开发动态资源" class="headerlink" title="开发动态资源"></a>开发动态资源</h2><h3 id="静态资源和动态资源的区别"><a href="#静态资源和动态资源的区别" class="headerlink" title="静态资源和动态资源的区别"></a>静态资源和动态资源的区别</h3><pre><code>静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。
动态资源：当用户多次访问这个资源，资源的源代码可能会发送改变。
</code></pre><h3 id="动态资源开发技术"><a href="#动态资源开发技术" class="headerlink" title="动态资源开发技术"></a>动态资源开发技术</h3><pre><code>servlet: 用java语言来编写动态资源的开发技术.

servlet特点：
    1) 普通的java类，继承HttpServlet类，覆盖doGet方法
    2) Servlet类只能由tomcat服务器来运行(开发者不能运行)

Servlet手动编写步骤：
    1) 编写一个servlet程序，继承HttpServlet
        public class HelloServlet extends HttpServlet{

            @Override
            protected void doGet(HttpServletRequest req, HttpServlet
            Response resp)
                    throws ServletException, IOException {
                //解决中文乱码问题
                resp.setContentType(&quot;text/html;charset=utf-8&quot;);
                //向浏览器输出内容
                resp.getWriter().write(&quot;这是第一个servlet程序。当前时间
                为：&quot;+new Date());
            }
        }

    2) 找到HelloServlet类的class字节码，然后把拷贝到tomcat的一个web应用中
    WEB-INF/classes目录下。
    3) 在当前web应用下的web.xml文件配置Servlet。
        &lt;!-- 配置一个servlet程序 --&gt;
        &lt;servlet&gt;
            &lt;!-- servlet的内部名称 ，可以自定义--&gt;
            &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
            &lt;!-- servlet类名： 包名+简单类名--&gt;
            &lt;servlet-class&gt;gz.itcast.d_servlet.HelloServlet&lt;/servle
            t-class&gt;
        &lt;/servlet&gt;

        &lt;servlet-mapping&gt;
            &lt;!-- servlet的内部名称，和上面的名称保持一致！！！--&gt;
            &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
            &lt;!-- servlet的访问名称： /名称 --&gt;
            &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
        &lt;/servlet-mapping&gt;

    4) 启动tomcat服务器，运行访问
        访问servlet:  http://localhost:8080/myweb/ hello
</code></pre><h3 id="工具开发动态资源"><a href="#工具开发动态资源" class="headerlink" title="工具开发动态资源"></a>工具开发动态资源</h3><pre><code>1) 创建web project （javaweb工程）
2) 在WebRoot下建立静态资源文件，
3) 在src下建立动态资源文件
      3.1 new -&gt; Servlet( servlet的代码生成器)
      3.2 写pacakge  -&gt; class名 -&gt; 修改mapping  url 
4) 关联tomcat服务器
      4.1 window-&gt; Preferences - &gt; MyEcplise -&gt; servers -&gt; Tomcat 
      6.x (注意一定要enable)

5) 部署web project应用。（拷贝web应用到tomcat的webapps目录下）
6) 启动tomcat服务器
7) 访问servlet            
        http://localhost:8081/day08_web/hello
</code></pre><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><h3 id="Http协议入门"><a href="#Http协议入门" class="headerlink" title="Http协议入门"></a>Http协议入门</h3><pre><code>http协议：对浏览器客户端和服务器端之间数据传输的格式规范。

tcp/ip协议: 数据传输的底层协议，关注是客户端与服务器之间的数据是否传输成功。
            http协议是在tcp/ip之前的封装的一层协议，关注的是数据传输规范。
</code></pre><p><img src="/images/9-1-1.png" alt="">    </p>
<p></p><p align="center">Http协议</p><p></p>
<h3 id="查看Http协议的工具"><a href="#查看Http协议的工具" class="headerlink" title="查看Http协议的工具"></a>查看Http协议的工具</h3><pre><code>1）使用火狐的firebug插件（右键-&gt;firebug-&gt;网络）
2）使用谷歌的“审查元素”
3）使用系统自带的telnet工具（远程访问工具）                
    a）telnet localhost 8080      访问tomcat服务器
    b）ctrl+]     回车          可以看到回显
    c）输入请求内容
        GET /day09/hello HTTP/1.1
        Host: localhost:8080
    d）回车，即可查看到服务器响应信息。
</code></pre><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><h4 id="请求（浏览器-》服务器）"><a href="#请求（浏览器-》服务器）" class="headerlink" title="请求（浏览器-》服务器）"></a>请求（浏览器-》服务器）</h4><pre><code>GET /day09/hello HTTP/1.1  --请求行
Host: localhost:8080       --请求头(多个键值对象)
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/2
0100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xm
l;q=0.9,*/*;q=0.8
Accept-Language: zh-cn,en-us;q=0.8,zh;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive    
                           --一个空行
name=eric&amp;password=123456  --（可选）实体内容
</code></pre><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><pre><code>GET  /day09/hello  HTTP/1.1

http协议版本
    http1.0: 当前浏览器客户端与服务器建立连接后，只能发送一次请求，就结
    束连接，效率低。
    http1.1: 当前浏览器客户端与服务器建立连接后，可以在一次连接中发送多
    次请求，效率高。

请求资源
    URL: 统一资源定位符, http://localhost:8080/day09/testImg.html 
    只能定位互联网资源 是URI的子集
    URI：统一资源标记符, /day09/hello 可以定位任意资源 

请求方式
    常见的请求方式: GET 、 POST、 HEAD、 TRACE、 PUT、 CONNECT 、DE
    LETE    

    常用的请求方式：GET  和 POST

表单提交
    &lt;form action=&quot;提交地址&quot; method=&quot;GET/POST&quot;&gt;    

    &lt;form&gt;

get与post的区别

    1)get方式
        a）地址栏（URI）会跟上参数数据。以？开头，多个参数之间以&amp;分割。
        b）GET提交参数数据有限制，不超过1KB。
        c）GET方式不适合提交敏感密码。
        d）注意： 浏览器直接访问的请求，默认提交方式是GET方式

    2)post方式
        a）参数不会跟着URI后面。参数而是跟在请求的实体内容中。没有？开
        头，多个参数之间以&amp;分割。
        b）POST提交的参数数据没有限制。
        c）POST方式提交敏感数据。    
</code></pre><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><pre><code>Accept: text/html,image/*      -- 浏览器接受的数据类型

Accept-Charset: ISO-8859-1     -- 浏览器接受的编码格式

Accept-Encoding: gzip,compress  --浏览器接受的数据压缩格式

Accept-Language: en-us,zh-       --浏览器接受的语言

Host: www.it315.org:80          --（必须的）当前请求访问的
目标地址（主机:端口）

If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT  --浏览器最后的
缓存时间

Referer: http://www.it315.org/index.jsp      -- 当前请求来自于哪里

User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)  
--浏览器类型

Cookie:name=eric                     -- 浏览器保存的cookie信息

Connection: close/Keep-Alive            -- 浏览器跟服务器
连接状态。close: 连接关闭  keep-alive：保存连接。

Date: Tue, 11 Jul 2000 18:23:51 GMT      -- 请求发出的时间
</code></pre><h4 id="实体内容"><a href="#实体内容" class="headerlink" title="实体内容"></a>实体内容</h4><pre><code>只有POST提交的参数会放到实体内容中
</code></pre><h4 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h4><pre><code>HttpServletRequest对象作用是用于获取请求数据。

核心的API：
    请求行：
    request.getMethod();   请求方式
    request.getRequetURI()   / request.getRequetURL()   请求资源
    request.getProtocol()   请求http协议版本

    请求头：
    request.getHeader(&quot;名称&quot;)   根据请求头获取请求值
    request.getHeaderNames()    获取所有的请求头名称

    实体内容:
    request.getInputStream()   获取实体内容数据    

传递的请求参数如何获取
    GET方式： 参数放在URI后面
    POST方式： 参数放在实体内容中

    获取GET方式参数：
            request.getQueryString();
    获取POST方式参数：
            request.getInputStream();

    问题：但是以上两种不通用，而且获取到的参数还需要进一步地解析。
    所以可以使用统一方便的获取参数的方式：

         核心的API：
        request.getParameter(&quot;参数名&quot;);  根据参数名获取参数值
        （注意，只能获取一个值的参数）
        request.getParameterValue(&quot;参数名“)；根据参数名获取参数值
        （可以获取多个值的参数）

        request.getParameterNames();   获取所有参数名称列表  
</code></pre><h4 id="请求参数编码问题"><a href="#请求参数编码问题" class="headerlink" title="请求参数编码问题"></a>请求参数编码问题</h4><pre><code>修改POST方式参数编码：
        request.setCharacterEncoding(&quot;utf-8&quot;);
修改GET方式参数编码：
        手动解码：String name = new 
        String(name.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);
</code></pre><p><img src="/images/9-1-2.png" alt="">    </p>
<p></p><p align="center">请求参数编码问题</p><p></p>
<h3 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h3><h4 id="响应（服务器-》浏览器）"><a href="#响应（服务器-》浏览器）" class="headerlink" title="响应（服务器-》浏览器）"></a>响应（服务器-》浏览器）</h4><pre><code>HTTP/1.1 200 OK   --响应行
Server: Apache-Coyote/1.1  --响应头
Content-Length: 24
Date: Fri, 30 Jan 2015 01:54:57 GMT
                           --一个空格
this is hello servlet!!!   --实体内容
</code></pre><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><pre><code>HTTP/1.1 200 OK

http响应版本

状态码 
    常见的状态：
        200：表示请求处理完成并完美返回
        302：表示请求需要进一步细化。
        404：表示客户访问的资源找不到。
        500：表示服务器的资源发送错误。（服务器内部错误）
</code></pre><h4 id="常见的响应头"><a href="#常见的响应头" class="headerlink" title="常见的响应头"></a>常见的响应头</h4><pre><code>Location: http://www.it315.org/index.jsp   -表示重定向的地址，
该头和302的状态码一起使用。

Server:apache tomcat                 ---表示服务器的类型

Content-Encoding: gzip                 -- 表示服务器发送给浏览器的
数据压缩类型
</code></pre><p><img src="/images/9-1-3.png" alt="">    </p>
<p></p><p align="center">请求重定向</p><p>    </p>
<pre><code>Content-Length: 80                    --表示服务器发送给浏览器的数据长度

Content-Language: zh-cn               --表示服务器支持的语言

Content-Type: text/html; charset=GB2312   --表示服务器发送给浏览器的
数据类型及内容编码

Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT  --表示服务器资源的
最后修改时间

Refresh: 1;url=http://www.it315.org     --表示定时刷新

Content-Disposition: attachment; filename=aaa.zip --表示告诉浏览器以
下载方式打开资源（下载文件时用到）

Transfer-Encoding: chunked
Set-Cookie:SS=Q0=5Lb_nQ; path=/search   --表示服务器发送给浏览器的
cookie信息（会话管理用到）

Expires: -1                           --表示通知浏览器不进行缓存
Cache-Control: no-cache
Pragma: no-cache

Connection: close/Keep-Alive       
--表示服务器和浏览器的连接状态。close：关闭连接 keep-alive:保存连接            
</code></pre><h4 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h4><pre><code>HttpServletResponse对象修改响应信息：

    响应行： 
            response.setStatus()  设置状态码
    响应头： 
            response.setHeader(&quot;name&quot;,&quot;value&quot;)  设置响应头
    实体内容：
            response.getWriter().writer();   发送字符实体内容
            response.getOutputStream().writer()  发送字节实体内容 
</code></pre><p><img src="/images/9-1-4.png" alt="">    </p>
<p></p><p align="center">响应数据编码</p><p>                    </p>
<p><img src="/images/9-1-5.png" alt="">    </p>
<p></p><p align="center">项目中的编码问题</p><p></p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android源码下载]]></title>
      <url>http://yoursite.com/2016/08/31/Android%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>Android源码下载</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="Android源码下载"><a href="#Android源码下载" class="headerlink" title="Android源码下载"></a>Android源码下载</h3><blockquote>
<p>Android源码下载支持的系统目前只有Ubuntu和Mac OS两种操作系统, 本次以Ubuntu系统为例.</p>
<p>官方网站: <a href="http://source.android.com/source/downloading.html" target="_blank" rel="external">http://source.android.com/source/downloading.html</a></p>
<p>下载单独项目的源码：<a href="https://github.com/android" target="_blank" rel="external">https://github.com/android</a></p>
</blockquote>
<ol>
<li><p>下载Git(版本控制工具).  调出命令行: ctrl + alt + T</p>
<pre><code>sudo apt-get install git   （下载地址在源中,&quot;系统设置/软件和更新&quot;,路径：/etc/apt/sources.list）
</code></pre></li>
</ol>
<ol>
<li><p>安装curl(上传和下载数据的工具).</p>
<pre><code>sudo apt-get install curl
</code></pre></li>
<li><p>安装repo(一个基于git的版本库管理工具, 这里用于自动批量下载android整个项目.).</p>
<pre><code>// 创建目录
mkdir ~/bin

// 下载repo脚本到本地bin文件夹下
curl http://android.git.kernel.org/repo &gt;~/bin/repo  （官网：curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo）
// 如果上面下载失败, 采用下面这种方式
curl &quot;http://php.webtutor.pl/en/wp-content/uploads/2011/09/repo&quot; &gt;~/bin/repo

// 给所有用户追加可执行的权限
chmod a+x ~/bin/repo

// 临时把repo添加到环境变量中, 方便后面执行.
// 注意: 每次重启ubuntu之后此环境变量失效, 重新配置就可以了.
export PATH=~/bin:$PATH
</code></pre></li>
<li><p>创建文件夹, 用于存放下载的Android源码.</p>
<pre><code>// 创建目录
mkdir ~/android_source 

// 修改权限
chmod 777 ~/android_source

cd ~/android_source
</code></pre></li>
<li><p>初始化库.</p>
<pre><code>// 需要先配置git的用户信息
git config --global user.email &quot;dai_zhenliang@163.com&quot;
git config --global user.name &quot;haha&quot;

repo init -u https://android.googlesource.com/platform/manifest -b android-2.3_r1

// 如果上面初始化失败, 用下面的代码
repo init -u git://codeaurora.org/platform/manifest.git -b gingerbread
</code></pre><p> ######当屏幕出现以下信息表示成功初始化</p>
<pre><code>repo initialized in /home/haha/android_source
</code></pre></li>
<li><p>开始同步下载.</p>
<pre><code>repo sync
</code></pre><p> <strong>注意: 下载过程中, 因为网络问题, 可能会中断下载. 当中断下载时, 继续使用repo sync命令继续下载.</strong></p>
</li>
</ol>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android源码分析]]></title>
      <url>http://yoursite.com/2016/08/31/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>Android源码分析</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="Android系统启动流程"><a href="#Android系统启动流程" class="headerlink" title="Android系统启动流程"></a>Android系统启动流程</h3><ul>
<li><p>当系统引导程序启动Linux内核，内核会加载各种数据结构，和驱动程序，加载完毕之后，Android系统开始启动并加载第一个用户级别的进程：init（system/core/init/Init.c）</p>
</li>
<li><p>查看Init.c代码，看main函数</p>
<pre><code>int main(int argc, char **argv)
{
        ...
    //执行Linux指令
    mkdir(&quot;/dev&quot;, 0755);
    mkdir(&quot;/proc&quot;, 0755);
    mkdir(&quot;/sys&quot;, 0755);

      ...
    //解析执行init.rc配置文件
    init_parse_config_file(&quot;/init.rc&quot;);
    ...
}
</code></pre></li>
<li><p>在system\core\rootdir\Init.rc中定义好的指令都会开始执行，其中执行了很多bin指令，启动系统服务</p>
<pre><code>//启动孵化器进程，此进程是Android系统启动关键服务的一个母进程
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
socket zygote stream 666
    onrestart write /sys/android_power/request_state wake
onrestart write /sys/power/state on
onrestart restart media
onrestart restart netd
</code></pre></li>
<li><p>在app_process文件夹下找到app_main.cpp，查看main函数，发现以下代码</p>
<pre><code>int main(int argc, const char* const argv[])
{
       ...
    //启动一个系统服务：ZygoteInit
    runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,startSystemServer);
    ...
}
</code></pre></li>
<li><p>在ZygoteInit.java中，查看main方法</p>
<pre><code> public static void main(String argv[]) {
    ...
    //加载Android系统需要的类
    preloadClasses();
    ...
    if (argv[1].equals(&quot;true&quot;)) {
        //调用方法启动一个系统服务
        startSystemServer();
    }
    ...
}
</code></pre></li>
<li><p>startSystemServer()方法的方法体</p>
<pre><code>String args[] = {
    &quot;--setuid=1000&quot;,
    &quot;--setgid=1000&quot;,
    &quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,3001,3002,3003&quot;,
    &quot;--capabilities=130104352,130104352&quot;,
    &quot;--runtime-init&quot;,
    &quot;--nice-name=system_server&quot;,
    &quot;com.android.server.SystemServer&quot;,
};

...
//分叉启动上面字符串数组定义的服务
 pid = Zygote.forkSystemServer(
 parsedArgs.uid, parsedArgs.gid,
 parsedArgs.gids, debugFlags, null,
 parsedArgs.permittedCapabilities,
 parsedArgs.effectiveCapabilities);
</code></pre></li>
<li><p>SystemServer服务被启动</p>
<pre><code>public static void main(String[] args) {
    ...
    //加载动态链接库
     System.loadLibrary(&quot;android_servers&quot;);
    //执行链接库里的init1方法
    init1(args);
    ...
}
</code></pre></li>
<li><p>动态链接库文件和java类包名相同，找到com_android_server_SystemServer.cpp文件</p>
</li>
<li><p>在com_android_server_SystemServer.cpp文件中，找到了</p>
<pre><code>static JNINativeMethod gMethods[] = {
    /* name, signature, funcPtr */
    //给init1方法映射一个指针，调用system_init方法
    { &quot;init1&quot;, &quot;([Ljava/lang/String;)V&quot;, (void*) android_server_SystemServer_init1 },
};
</code></pre></li>
<li><p>android_server_SystemServer_init1方法体中调用了system_init()，system_init()没有方法体</p>
</li>
<li><p>在system_init.cpp文件中找到system_init()方法，方法体中</p>
<pre><code>//执行了SystemServer.java的init2方法
runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;, &quot;init2&quot;);
</code></pre></li>
<li><p>回到SystemServer.java，在init2的方法体中</p>
<pre><code>//启动一个服务线程
Thread thr = new ServerThread();
thr.start();
</code></pre></li>
<li><p>在ServerThread的run方法中</p>
<pre><code>//准备消息轮询器
Looper.prepare();
...
//启动大量的系统服务并把其逐一添加至ServiceManager
ServiceManager.addService(Context.WINDOW_SERVICE, wm);
...
//调用systemReady，准备创建第一个activity
 ((ActivityManagerService)ActivityManagerNative.getDefault())
        .systemReady(new Runnable(){
        ...
}）；
</code></pre></li>
<li><p>在ActivityManagerService.java中，有systemReady方法，方法体里找到</p>
<pre><code>//检测任务栈中有没有activity，如果没有，创建Launcher
mMainStack.resumeTopActivityLocked(null);
</code></pre></li>
<li><p>在ActivityStack.java中，方法resumeTopActivityLocked</p>
<pre><code>// Find the first activity that is not finishing.
ActivityRecord next = topRunningActivityLocked(null);
...
if (next == null) {
    // There are no more activities!  Let&apos;s just start up the
    // Launcher...
    if (mMainStack) {
        return mService.startHomeActivityLocked();
    }
}
...
</code></pre></li>
</ul>
<hr>
<h3 id="Handler消息机制"><a href="#Handler消息机制" class="headerlink" title="Handler消息机制"></a>Handler消息机制</h3><ul>
<li><p>Message类的obtain方法</p>
<ul>
<li>消息队列顺序的维护是使用单链表的形式来维护的</li>
<li><p>把消息池里的第一条数据取出来，然后把第二条变成第一条</p>
<pre><code>if (sPool != null) {
     Message m = sPool;
     sPool = m.next;
     m.next = null;
     sPoolSize--;
     return m;
 }
</code></pre></li>
</ul>
</li>
<li><p>创建Handler对象时，在构造方法中会获取Looper和MessageQueue的对象</p>
<pre><code>public Handler() {
    ...
    //拿到looper
    mLooper = Looper.myLooper();
    ...
    //拿到消息队列
    mQueue = mLooper.mQueue;
    mCallback = null;
}
</code></pre></li>
<li><p>查看myLooper方法体，发现Looper对象是通过ThreadLocal得到的，再查找ThreadLocal的set方法时发现</p>
<ul>
<li><p>Looper是直接new出来的，并且在Looper的构造方法中，new出了消息队列对象</p>
<pre><code>sThreadLocal.set(new Looper());

private Looper() {
    mQueue = new MessageQueue();
    mRun = true;
    mThread = Thread.currentThread();
   }
</code></pre></li>
<li>sThreadLocal.set(new Looper())是在Looper.prepare方法中调用的</li>
</ul>
</li>
<li><p>prepare方法是在prepareMainLooper()方法中调用的</p>
<pre><code>public static final void prepareMainLooper() {
       prepare();
    ...
}
</code></pre></li>
<li><p>在应用启动时，主线程要被启动，ActivityThread会被创建，在此类的main方法中</p>
<pre><code>public static final void main(String[] args) {
    ...
    //创建Looper和MessageQueue
    Looper.prepareMainLooper();
    ...
    //轮询器开始轮询
    Looper.loop();
    ...
}
</code></pre></li>
<li><p>Looper.loop()方法中有一个死循环</p>
<pre><code>while (true) {
    //取出消息队列的消息，可能会阻塞
    Message msg = queue.next(); // might block
    ...
    //解析消息，分发消息
    msg.target.dispatchMessage(msg);
    ...
}
</code></pre></li>
</ul>
<ul>
<li>Linux的一个进程间通信机制：管道（pipe）。原理：在内存中有一个特殊的文件，这个文件有两个句柄（引用），一个是读取句柄，一个是写入句柄</li>
<li><p>主线程Looper从消息队列读取消息，当读完所有消息时，进入睡眠，主线程阻塞。子线程往消息队列发送消息，并且往管道文件写数据，主线程即被唤醒，从管道文件读取数据，主线程被唤醒只是为了读取消息，当消息读取完毕，再次睡眠</p>
</li>
<li><p>Handler发送消息，sendMessage的所有重载，实际最终都调用了sendMessageAtTime</p>
<pre><code>public boolean sendMessageAtTime(Message msg, long uptimeMillis)
{
   ...
    //把消息放到消息队列中
    sent = queue.enqueueMessage(msg, uptimeMillis);
   ...
}
</code></pre></li>
<li><p>enqueueMessage把消息通过重新排序放入消息队列</p>
<pre><code>final boolean enqueueMessage(Message msg, long when) {
    ...
    final boolean needWake;
    synchronized (this) {
       ...
        //对消息的重新排序，通过判断消息队列里是否有消息以及消息的时间对比
        msg.when = when;

        Message p = mMessages;                
        if (p == null || when == 0 || when &lt; p.when) {
            // 如果消息队列中没有消息，或者当前消息的时候比队列中的消息的时间小，则让当前消息成为队列中的第一条消息
            msg.next = p;
            mMessages = msg;
            needWake = mBlocked; // new head, might need to wake up
        } else {        
            // 代码能进入到这里说明消息队列中有消息，且队列中的消息时间比当前消息时间小，说明当前消息不能做为队列中的第一条消息            
            Message prev = null;    // 当前消息要插入到这个prev消息的后面
            // 这个while循环用于找出当前消息(msg)应该插入到消息列表中的哪个消息的后面（应该插入到prev这条消息的后面）
            while (p != null &amp;&amp; p.when &lt;= when) {    
                prev = p;
                p = p.next;
            }

            // 下面两行代码
            msg.next = prev.next;
            prev.next = msg;
            needWake = false; // still waiting on head, no need to wake up
        }
    }
    //唤醒主线程
    if (needWake) {
        nativeWake(mPtr);
    }
    return true;
}
</code></pre></li>
<li><p>Looper.loop方法中，获取消息，然后分发消息</p>
<pre><code>//获取消息队列的消息
 Message msg = queue.next(); // might block
 ...
//分发消息，消息由哪个handler对象创建，则由它分发，并由它的handlerMessage处理  
msg.target.dispatchMessage(msg);
</code></pre></li>
<li><p>message对象的target属性，用于记录该消息由哪个Handler创建，在obtain方法中赋值</p>
</li>
<li>Handler中的Callback接口，可能过构造方法或其它方法传入</li>
<li><p>Handler的dispatchMessage方法中：</p>
<pre><code>public void dispatchMessage(Message msg) {
    if (msg.callback != null) {
        handleCallback(msg);                    // 第一优先Runnable对象
    } else {
        if (mCallback != null) {
            if (mCallback.handleMessage(msg)) { // 第二优先Callback对象
                return;
            }
        }
        handleMessage(msg);
    }
}
</code></pre></li>
<li>Message中保存了callback(Runnabe)和target(Handler)，也可以调用Message的sendToTarget()方法来发消息，前提是必须已经给Message设置了target对象。</li>
</ul>
<p><img src="/images/Handler消息机制.png" alt=""></p>
<p align="center">Handler消息机制</p>

<hr>
<h3 id="AsyncTask机制"><a href="#AsyncTask机制" class="headerlink" title="AsyncTask机制"></a>AsyncTask机制</h3><ul>
<li><p>AsyncTask基本使用：</p>
<pre><code>AsyncTask&lt;String, Integer, Object&gt; asyncTask = new AsyncTask&lt;String, Integer, Object&gt;() {

    protected void onPreExecute() {};

    @Override
    protected Object doInBackground(String... params) {
        return null;
    }

    protected void onPostExecute(Object result) {};

    protected void onProgressUpdate(Integer[] values) {};

};
asyncTask.execute(&quot;params&quot;)
</code></pre></li>
<li><p>AsyncTask的execute方法，开始执行异步任务，在此方法体中</p>
<pre><code>public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) {
    ...

    mStatus = Status.RUNNING;

    //调用onPreExecute方法
    onPreExecute();

    //把参数赋值给mWorker对象
    mWorker.mParams = params;
    //线程池对象执行mFuture
    sExecutor.execute(mFuture);

    return this;
}
</code></pre></li>
<li><p>mWorker是什么类型？，在AsyncTask的构造方法中</p>
<pre><code>mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
    public Result call() throws Exception {
        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
        return doInBackground(mParams);
    }
};
</code></pre></li>
<li><p>然后把mWorker对象封装至FutureTask对象</p>
<pre><code>mFuture = new FutureTask&lt;Result&gt;(mWorker)
</code></pre></li>
<li><p>在FutureTask的构造中，又把mWorker封装给Sync对象</p>
<pre><code>public FutureTask(Callable&lt;V&gt; callable) {
if (callable == null)
    throw new NullPointerException();
    sync = new Sync(callable);
}
</code></pre></li>
<li><p>在Sync的构造方法中</p>
<pre><code>Sync(Callable&lt;V&gt; callable) {
    //这里的callable就是mWorker
    this.callable = callable;
}
</code></pre></li>
<li><p>线程池执行mFuture对象，此对象是FutureTask的对象，而FutureTask实现了Runnable接口</p>
<pre><code>public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) {
...

//线程池对象开一个子线程去执行mFuture对象中的run方法
sExecutor.execute(mFuture);    
...
</code></pre><p>  }</p>
</li>
<li><p>mFuture的run方法被调用了</p>
<pre><code>public void run() {
    sync.innerRun();
}
</code></pre></li>
<li><p>在innerRun方法中，调用了callable的call方法，但是在sync被new出来的时候，在构造方法中就已经把mWorker赋值给了callable，所以实际上是调用mWorker的call方法</p>
<pre><code>void innerRun() {
    ...
        //调用mWorker的call()
        result = callable.call();

        set(result);
    ...
}
</code></pre></li>
<li><p>mWorker的call在mWorker被new出来时就已经重写了</p>
<pre><code>mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
    public Result call() throws Exception {
       ...
        //在子线程中调用了doInBackground方法
        return doInBackground(mParams);
    }
};
</code></pre></li>
<li><p>call方法调用完毕后，得到doInBackground所返回的result</p>
<pre><code>void innerRun() {
    ...
        result = callable.call();
        //返回的result传入了set方法
        set(result);
    ...
}
</code></pre></li>
<li><p>set方法体</p>
<pre><code>protected void set(V v) {
        sync.innerSet(v);
}
</code></pre></li>
<li><p>innerSet方法体</p>
<pre><code>if (compareAndSetState(s, RAN)) {
           result = v;
           releaseShared(0);
           //关键的done方法
           done();
           return;
 }
</code></pre></li>
<li><p>innerSet方法是属于FutureTask类的，那么done方法也是调用FutureTask类的，这个done方法定义的地方，在AsyncTask.java的构造方法里</p>
<pre><code>mFuture = new FutureTask&lt;Result&gt;(mWorker) {
    //此处重写done方法
    @Override
    protected void done() {
</code></pre></li>
</ul>
<pre><code>       //获取doInbackground方法返回的结果
        result = get();

        //创建一个消息
        message = sHandler.obtainMessage(MESSAGE_POST_RESULT,
                new AsyncTaskResult&lt;Result&gt;(AsyncTask.this, result));
        //把这条消息发送给创建这个消息的Handler：target.sendMessage(this)
        message.sendToTarget();
    }
};
</code></pre><ul>
<li><p>然后sHandler的handlerMessage被触发</p>
<pre><code>public void handleMessage(Message msg) {
    AsyncTaskResult result = (AsyncTaskResult) msg.obj;
    switch (msg.what) {
        case MESSAGE_POST_RESULT:
            //调用finish方法
            result.mTask.finish(result.mData[0]);
            break;

    }
}
</code></pre></li>
<li><p>查看AsyncTaskResult类中的mTask成员，其实它就是AsyncTask对象</p>
</li>
<li><p>再看AsyncTask对象的finish的方法体</p>
<pre><code>private void finish(Result result) {
    if (isCancelled()) result = null;
    //调用onPostExecute方法，并传入结果
    onPostExecute(result);
    mStatus = Status.FINISHED;
}
</code></pre></li>
</ul>
<p><img src="/images/AsyncTask分析.png" alt=""></p>
<p align="center">AsyncTask分析</p>


<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android源码编译]]></title>
      <url>http://yoursite.com/2016/08/31/Android%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>Android源码编译</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="Android源码编译"><a href="#Android源码编译" class="headerlink" title="Android源码编译"></a>Android源码编译</h3><h4 id="在编译源码之前需要做一些准备操作-详细步骤如下"><a href="#在编译源码之前需要做一些准备操作-详细步骤如下" class="headerlink" title="在编译源码之前需要做一些准备操作, 详细步骤如下:"></a>在编译源码之前需要做一些准备操作, 详细步骤如下:</h4><blockquote>
<h5 id="1-安装JDK-google官方要求编译2-3源码需要JDK1-6"><a href="#1-安装JDK-google官方要求编译2-3源码需要JDK1-6" class="headerlink" title="1. 安装JDK, google官方要求编译2.3源码需要JDK1.6."></a>1. 安装JDK, google官方要求编译2.3源码需要JDK1.6.</h5></blockquote>
<ul>
<li>1). 下载JDK1.6, 下载地址:<a href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html</a>、<a href="http://download.oracle.com/otn/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin" target="_blank" rel="external">http://download.oracle.com/otn/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin</a></li>
</ul>
<ul>
<li><p>2). 创建目录.</p>
<pre><code>sudo mkdir /usr/java
</code></pre></li>
<li><p>3). 在文件系统中右击上面的创建的文件夹，选择“以管理员权限打开”，然后把下载好的jdk-6u45-linux-x64.bin拖动到/usr/java目录中</p>
</li>
<li><p>4). 添加可执行权限.</p>
<pre><code>sudo chmod 755 /usr/java/jdk-6u45-linux-x64.bin
</code></pre></li>
<li><p>5). 解压.</p>
<pre><code>cd /usr/java
sudo ./jdk-6u45-linux-x64.bin
</code></pre></li>
<li><p>6). 配置环境变量.</p>
<pre><code>export JAVA_HOME=/usr/java/jdk1.6.0_45
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></pre></li>
<li><p>7). 验证是否成功.</p>
<pre><code>java -version
</code></pre></li>
</ul>
<blockquote>
<h5 id="2-安装其他编译时依赖的软件"><a href="#2-安装其他编译时依赖的软件" class="headerlink" title="2. 安装其他编译时依赖的软件."></a>2. 安装其他编译时依赖的软件.</h5><pre><code>sudo apt-get install gnupg
sudo apt-get install flex
sudo apt-get install bison
sudo apt-get install gperf
sudo apt-get install zip
sudo apt-get install curl
sudo apt-get install build-essential
sudo apt-get install libesd0-dev
sudo apt-get install libwxgtk2.8-dev
sudo apt-get install libsdl-dev
sudo apt-get install lsb-core
sudo apt-get install lib32readline-gplv2-dev
sudo apt-get install g++-multilib
sudo apt-get install lib32z1-dev
sudo apt-get install libswitch-perl
</code></pre><p>安装注意事项：<br>        <img src="http://i.imgur.com/Iim4UnR.png" alt=""></p>
<h5 id="3-开始编译-在源码的目录下-执行一下命令"><a href="#3-开始编译-在源码的目录下-执行一下命令" class="headerlink" title="3. 开始编译, 在源码的目录下, 执行一下命令:"></a>3. 开始编译, 在源码的目录下, 执行一下命令:</h5><pre><code>cd ~/android_source
make clean(如果之前有编译过，则需要调用这个命令)
make
</code></pre></blockquote>
<h5 id="注意-ubuntu自带的源中速度比较慢-有些软件找不到-所以需要修改为国内的源-修改源步骤如下"><a href="#注意-ubuntu自带的源中速度比较慢-有些软件找不到-所以需要修改为国内的源-修改源步骤如下" class="headerlink" title="注意: ubuntu自带的源中速度比较慢, 有些软件找不到, 所以需要修改为国内的源, 修改源步骤如下:"></a>注意: ubuntu自带的源中速度比较慢, 有些软件找不到, 所以需要修改为国内的源, 修改源步骤如下:</h5><ul>
<li><p>1). 备份ubuntu自带的源.</p>
<pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.old
</code></pre></li>
<li><p>2). 修改源文件.</p>
<pre><code>sudo gedit /etc/apt/sources.list
</code></pre></li>
<li><p>3). 这时会弹出一个文本编辑框, 先删除所有内容, 然后把以下内容拷贝进去, 并保存.</p>
<pre><code>deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse

deb http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiverse
</code></pre></li>
</ul>
<ul>
<li><p>4). 保存之后, 更新数据源.</p>
<pre><code>sudo apt-get update
</code></pre></li>
</ul>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Connection+使能新业务，拓展新市场]]></title>
      <url>http://yoursite.com/2016/08/31/Connection-%E4%BD%BF%E8%83%BD%E6%96%B0%E4%B8%9A%E5%8A%A1%EF%BC%8C%E6%8B%93%E5%B1%95%E6%96%B0%E5%B8%82%E5%9C%BA/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>Connection+使能新业务，拓展新市场</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<p><img src="/images/8-31-8.jpg" alt=""></p>
<p>信息通信技术的迅猛发展极大丰富了人们的沟通与生活，全联接世界正渐行渐近。技术创新的脚步从未停歇，蜂窝网络技术的发展将继续扩大连接的领域。4.5G技术将把连接进一步扩展到物联网和集群通信领域，代表技术有NB-IoT（Narrow Band Internet of Things）和LiTRA（LTE integrated Trunked Radio）。</p>
<h2 id="Connection-之NB-IoT介绍"><a href="#Connection-之NB-IoT介绍" class="headerlink" title="Connection+之NB-IoT介绍"></a>Connection+之NB-IoT介绍</h2><p>传统的互联网满足了人与人之间的通信，物联网将进一步把人与物，物与物连接起来。物联网的本质是基于数据的感知、获取和传输，数据的感知和获取即可以是通过智能设备、监控设备，也可以是通过基于传感器的实物终端，如居民日常用的水表，水表被连接起来后，极大提高工作效率的同时也为居民提供了便利。可以预见，物联网将渗透到我们工作和生活的方方面面，创造出极大的社会价值。</p>
<p>未来物联网中将有大量的应用是此类实物终端的连接，广泛的应用在日常生活如宠物跟踪，或垂直行业如工业制造、资产跟踪等方面。这些应用的共同特征是需要一张低功耗广域网（LPWAN，Low Power Wide Area Network），它应该具备如下特征：</p>
<ul>
<li>频谱：使用授权频谱，具备良好的可靠性和安全性</li>
<li>覆盖能力强：能够覆盖到地下室、远郊等场景</li>
<li>终端功耗小：使用电池供电可支撑10年的使用周期</li>
<li>连接数量多：每小区100K的连接能力</li>
<li>成本低：通信模组成本低</li>
<li>传输时延：对时延不敏感</li>
<li>具备扩展能力：移动性、漫游、定位等能力</li>
</ul>
<p>当前的蜂窝网络技术由于覆盖、功耗、成本等原因不能很好的满足LPWAN需求，NB-IoT（窄带蜂窝物联网）技术应运而生。它具有覆盖广、连接多、速率低、成本低、功耗少、架构优等特点。可以说，NB-IoT是最符合LPWAN需求的一种技术，是运营商进入LPWAN应用市场的最佳选择。</p>
<p><img src="/images/8-31-9.png" alt=""></p>
<p>华为和沃达丰早在2013年就合作开始了低带宽网络连接技术的研究，并于2014向国际标准组织3GPP做技术提案，开启了NB-IoT技术方向。2015年9月NB-IoT正式在3GPP R13版本立项为Work Item，标准化进入加速阶段，预计2016年6月完成标准制定。</p>
<p>LPWAN市场已经崛起，为了快速匹配市场需求，华为在参与国际标准组织共同制定相关规范的同时，也启动了端到端解决方案的研发，并推出了可用于测试的预标准解决方案。基于预标准解决方案，华为成功于2015年6月与中国联通共同在上海完成了第一个全球样板点，于2015年12月与沃达丰共同在西班牙完成基于其商用网络的测试。</p>
<p>NB-IoT一个重要应用方向为垂直行业的物联通讯服务，产业创新需要与各垂直行业合作伙伴精诚合作。为此华为将在全球范围内与合作伙伴共同成立8个开放实验室作为创新平台，目前已经在智能停车、远程抄表等方向取得了卓有成效的实质进展。欢迎更多的合作伙伴加入我们共同打造全联接世界。</p>
<h2 id="Connection-之LiTRA-LTE公网集群通信解决方案介绍"><a href="#Connection-之LiTRA-LTE公网集群通信解决方案介绍" class="headerlink" title="Connection+之LiTRA LTE公网集群通信解决方案介绍"></a>Connection+之LiTRA LTE公网集群通信解决方案介绍</h2><p>集群通信系统最早诞生于60年代末到70年代初。与普通的点对点全双工的移动通话不同，集群通信又被形象的称为PTT（Push To Talk, 一键通），它采用半双工、一对多的通信方式，具有低时延、大容量的优势，可满足用户一呼百应、一呼即应、现场实时调度的通信需求，广泛的应用于公共安全、公用事业以及企业领域。</p>
<p><img src="/images/8-31-10.png" alt=""></p>
<p>集群通信正在从窄带走向宽带，从专网向公网演进。传统的集群技术多为窄带的专网通信标准，窄带技术导致其业务单一，以语音为主，无法支持视频多媒体等高速数据业务；而专网的技术架构带来了产业链封闭、系统设备采购和建设成本高、终端价格高、维护费用高等诸多问题，无法满足用户的业务诉求。</p>
<p>以LiTRA为代表的LTE公网集群（ PTT over LTE ）则很好的解决了上述问题，凭借LTE网络的大带宽和低时延的优势，LiTRA不但能够提供媲美传统集群的性能体验，还能够提供诸如视频呼叫、视频监控、文件传输、GIS协同等多媒体专业集群功能；更重要的是，它完全基于运营商的LTE现网部署，能够大幅度降低建网和维护成本，提供更好的网络覆盖和漫游服务，并且兼容LTE智能终端，打破了封闭的产业链限制，为用户提供更加专业和高效的集群通信服务。</p>
<p><img src="/images/8-31-11.png" alt=""></p>
<p>当前， 3GPP正在主导新一代集群通信标准的制定。世界各大集群标准组织和政府机构，包括OMA、ETSI、TCCA、TIA、英国内政部、美国FCC、美国商务部等，都在与3GPP展开合作，在R12、R13、R14，构建一整套面向公共安全和关键任务应用场景，完全基于LTE公网的专业集群通标准。</p>
<p><img src="/images/8-31-12.png" alt=""></p>
<p>LiTRA是华为推出的基于3GPP标准和LTE公网的专业集群解决方案，旨在帮助运营商为公共安全用户提供一个安全、高效、专业的PS LTE（Public Safety LTE）网络。</p>
<p>华为认为LTE商用网络直接用于公共安全应用场景，将面临诸多挑战。为此，LiTRA 从QoS、MCPTT语音、拥塞控制等五大方面全面提升LTE网络应对突发事件的能力，更好的为公共安全用户提供服务。 同时，LiTRA还发布了包括应用平台、调度台、APP以及三防终端的端到端产品解决方案，帮助运营商快速部署集群业务，抢占市场先机。</p>
<p><img src="/images/8-31-13.png" alt=""></p>
<p>越来越多的国家准备基于运营商的LTE现网，部署国家公共安全网络。预计在2016，基于LTE公网的国家安全网络将逐步进入预商用阶段。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.huawei.com/minisite/4-5g/cn/connection-4-5-g.html" target="_blank" rel="external">华为</a> </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-5]]></title>
      <url>http://yoursite.com/2016/08/31/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-5/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Web开发入门</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="Web开发入门"><a href="#Web开发入门" class="headerlink" title="Web开发入门"></a>Web开发入门</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre><code>之前的程序： java桌面程序，控制台控制，socket gui界面。javase规范
现在和以后的程序：java web程序。浏览器控制。javaee规范
</code></pre><h3 id="软件的构架"><a href="#软件的构架" class="headerlink" title="软件的构架"></a>软件的构架</h3><h4 id="C-S-Client-Server-客户端-服务器端"><a href="#C-S-Client-Server-客户端-服务器端" class="headerlink" title="C/S (Client - Server  客户端-服务器端)"></a>C/S (Client - Server  客户端-服务器端)</h4><pre><code>典型应用：QQ软件 ，飞秋，红蜘蛛。
特点：
    1）必须下载特定的客户端程序。
    2）服务器端升级，客户端升级。
</code></pre><h4 id="B-S-（Broswer-Server-浏览器端-服务器端）"><a href="#B-S-（Broswer-Server-浏览器端-服务器端）" class="headerlink" title="B/S （Broswer -Server 浏览器端- 服务器端）"></a>B/S （Broswer -Server 浏览器端- 服务器端）</h4><pre><code>典型应用： 腾讯官方（www.qq.com）  163新闻网站， （俗称：网站）
特点：
    1）不需要安装特定的客户端（只需要安装浏览器即可！！）
    2）服务器端升级，浏览器不需要升级！！！！

javaweb的程序就是b/s软件结构！！！
</code></pre><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><pre><code>从物理上来说，服务器就是一台PC机器，8核,8G以上，T来计算，带宽100M以上

web服务器：PC机器安装一个具有web服务的软件，称之为web服务器

数据库服务器：PC机器安装一个具有数据管理件服务的软件，称之为数据库服务器。

邮件服务器：PC机器安装一个具有发送邮件服务的软件，称之为邮件服务器。

Web服务软件

作用：把本地的资源共享给外部访问

常见的市面上的web服务软件
    javase的规范,包含IO流，线程，集合，socket编程。。。。
    WebLogic: BEA公司的产品。 收费的。支持JavaEE规范。
    WebSphere： IBM公司的产品。收费的。支持JavaEE规范
    JBoss: Redhat公司的产品。收费的。支持JavaEE规范
    Tomcat：开源组织Apache的产品。免费的。支持部分的JavaEE规范。（servle
    t、jsp。jdbc，但ejb， rmi不支持）  
</code></pre><p><img src="/images/8-31-7.png" alt=""></p>
<p></p><p align="center">Web服务软件用途</p><p></p>
<h2 id="Tomcat基本使用"><a href="#Tomcat基本使用" class="headerlink" title="Tomcat基本使用"></a>Tomcat基本使用</h2><h3 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h3><pre><code>1）到apache官网。www.apache.org     http://jakarta.apache.org(产品的主
   页)
2）
    安装版：window （exe、msi） linux（rmp）
    压缩版：window（rar，zip） linux（tar，tar.gz）学习时候使用
3）运行和关闭tomcat
    3.1 启动软件
        a）找到%tomcat%/bin/startup.bat ，双击这个文件
        b）弹出窗口，显示信息（不要关闭次窗口）
        c）打开浏览器，输出以下地址
            http://localhost:8080
        d）看到一只猫画面，证明软件启动成功！

    3.2 关闭软件
        a）找到%tomcat%/bin/shutdown.bat，双击这个文件即可！
        c）打开浏览器，输出以下地址。看到“无法连接”（最好先清空浏览器缓存）
</code></pre><p><img src="/images/8-31-6.png" alt="">    </p>
<p></p><p align="center">Tomcat运行图</p><p></p>
<h3 id="tomcat软件使用的常见问题"><a href="#tomcat软件使用的常见问题" class="headerlink" title="tomcat软件使用的常见问题"></a>tomcat软件使用的常见问题</h3><pre><code>1）闪退问题
    原因：tomcat软件是java语言开发的。 tomcat软件启动时，会默认到系统的环境
    变量中查找一个名称叫JAVA_HOME的变量。这个变量的作用找到tomcat启动所需的
    jvm。
    解决办法； 到环境变量中设置JAVA_HOME的变量
        JAVA_HOME= C:\Program Files\Java\jdk1.6.0_30  (注意别配置到bi
        n目录下)
</code></pre><p><img src="/images/8-31-4.png" alt=""></p>
<p></p><p align="center">Tomcat配置</p><p></p>
<pre><code>2）端口占用的错误
    原因： tomcat启动所需的端口被其他软件占用了！
    解决办法： 
        a）关闭其他软件程序，释放所需端口
        b）修改tomcat软件所需端口
           找到并修改%tomcat%/conf/server.xml文件

3）CATALINA环境变量问题
    原因： tomcat软件启动后，除了查找JAVA_HOME后，还会再查找一个叫CAT
    ALINA_HOME变量，这个变量的作用是设置tomcat的根目录。
    解决办法：建议不要设置CATALINA_HOME变量。检查如果有的话，清除掉！！！
</code></pre><h3 id="体验tomcat软件作用"><a href="#体验tomcat软件作用" class="headerlink" title="体验tomcat软件作用"></a>体验tomcat软件作用</h3><pre><code>webapps目录： tomcat共享目录。需要共享的本地资源放到此目录中。

URL
统一资源定位符，用以定位互联网的资源

问题： http://localhost:8081/myweb/test.html  看到文件？

http://     协议。http协议。
localhost    域名。为了找到IP地址。
                本地域名： localhost
                外部域名：www.baidu.com
8081       端口。软件监听的
            8080： tomcat默认的端口
            3306：mysql数据库的端口
            1521： orace数据库的端口。
/myweb:   web应用的名称。默认情况下，在webapps目录下找
/test.html  ： 资源名称。
</code></pre><h3 id="Tomcat的目录结构"><a href="#Tomcat的目录结构" class="headerlink" title="Tomcat的目录结构"></a>Tomcat的目录结构</h3><pre><code>    |-bin: 存放tomcat的命令。
    catalina.bat 命令：
    startup.bat  -&gt; catalina.bat start    
    shutdown.bat - &gt; catalina.bat stop
    |- conf: 存放tomcat的配置信息。其中server.xml文件是核心的配置文件。
    |-lib：支持tomcat软件运行的jar包。其中还有技术支持包，如servlet，jsp
    |-logs：运行过程的日志信息
    |-temp: 临时目录
    |-webapps： 共享资源目录。web应用目录。（注意不能以单独的文件进行共享）
    |-work： tomcat的运行目录。jsp运行时产生的临时文件就存放在这里

Web应用的目录结构
    |- WebRoot :   web应用的根目录
        |- 静态资源（html+css+js+image+vedio）
        |- WEB-INF ： 固定写法。
            |-classes： （可选）固定写法。存放class字节码文件
            |-lib： （可选）固定写法。存放jar包文件。
            |-web.xml    

    注意：
        1）WEB-INF目录里面的资源不能通过浏览器直接访问
        2）如果希望访问到WEB-INF里面的资源，就必须把资源配置到一个叫web.xml的文件中。        
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谷歌创始人：谢尔盖·布林的故事，曝光角上的名字]]></title>
      <url>http://yoursite.com/2016/08/30/%E8%B0%B7%E6%AD%8C%E5%88%9B%E5%A7%8B%E4%BA%BA%EF%BC%9A%E8%B0%A2%E5%B0%94%E7%9B%96%C2%B7%E5%B8%83%E6%9E%97%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%8C%E6%9B%9D%E5%85%89%E8%A7%92%E4%B8%8A%E7%9A%84%E5%90%8D%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>谷歌创始人：谢尔盖·布林的故事，曝光角上的名字</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>二年级时，他随父母移民到美国。由于语言不通，再加上只对数学和计算机感兴趣，他在上其他课时总埋头琢磨数学题和计算机程序，常常被老师批评、罚站。可是他屡教不改，依旧把时间都用在研究数学和计算机上。渐渐地，老师对他绝望了，不想把太多时间浪费在无谓的批评上，专门在教室角落里架起了一个小黑板，取名为“曝光角”，每当发现有学生违纪就在上面记一次名字。结果几个月下来，上面反反复复出现了他的名字，几乎天天如此。</p>
<p>学校通知家长来参观，父母看到“曝光角”上只写了他的名字，还被写得很大很醒目，便狠狠地训斥道：“只有你的大名被写在小黑板上，听说天天都是如此，现在可好，几乎所有家长都知道你了……”</p>
<p>20年后，他与好友合伙开了家公司，专门提供搜索引擎服务。公司经营得风生水起，几年后他就跃升为美国400富豪榜中最年轻的富豪。</p>
<p>他正是美国企业家谢尔盖·布林，他创办的公司名叫谷歌。</p>
<p>有人问及布林的成功之道，他讲了上面的故事，然后说：“那是我受到的最严厉惩罚，也是我成长中最宝贵的一课。”</p>
<p>对方不明白这话的意思，布林便点开了谷歌页面：“我们网页上只有谷歌几个字母，再无其他，而且天天如此。”</p>
<p>他停了停，接着说：“就好比当年小黑板上只有我的名字，虽然它很醒目很刺眼，但无疑会让所有人一下子都记住它。”</p>
<p>用积极的心态去面对错误，或许它们就将转化为你成功的独特技巧和宝贵经验。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/renwu/id-138921.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-4]]></title>
      <url>http://yoursite.com/2016/08/30/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-4/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;XML学习</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="XML学习"><a href="#XML学习" class="headerlink" title="XML学习"></a>XML学习</h2><h3 id="XML引入"><a href="#XML引入" class="headerlink" title="XML引入"></a>XML引入</h3><p> HTML: 负责网页的结构<br>CSS： 负责网页的样式（美观）<br>Javascript： 负责在浏览器端与用户进行交互。</p>
<pre><code>HTML与XML区别
HTML负责静态的网页制作的语言

HTML语言特点：
1）由标签组成。 &lt;title&gt; &lt;p&gt; &lt;hr/&gt; &lt;br/&gt;
2）语法结构松散的    &lt;p&gt;&lt;/p&gt;   &lt;p&gt;  &lt;P&gt; 
    大小写不区分
    结束标签和开始标签不一定匹配

XML是HTML中的自定义标签
</code></pre><h3 id="XML作用"><a href="#XML作用" class="headerlink" title="XML作用"></a>XML作用</h3><h4 id="描述带关系的数据-软件配置文件"><a href="#描述带关系的数据-软件配置文件" class="headerlink" title="描述带关系的数据(软件配置文件)"></a>描述带关系的数据(软件配置文件)</h4><pre><code>web服务器（PC）： 
学生管理系统 -&gt; 添加学生功能 -&gt; 添加学生页面 -&gt; 
name=eric&amp;email=eric@qq.com  
    前提： 网络（IP地址： oracle：255.43.12.54  端口：1521 ）

    java代码：使用ip（255.43.12.54）地址和端口（1521），连接oracle数据
    库，保存学生数据。

    把ip地址端口配置到xml文件：
            host.xml
                &lt;host&gt;
                    &lt;ip&gt;255.43.12.55&lt;/ip&gt;
                    &lt;port&gt;1521&lt;/port&gt;
                &lt;/host&gt;

数据库服务器（PC）：
            主服务器（255.43.12.54）：Oracle数据库软件（负载）
            副服务器（255.43.12.55）：Oracle数据库软件
</code></pre><h4 id="数据的载体-小型的”数据库”"><a href="#数据的载体-小型的”数据库”" class="headerlink" title="数据的载体(小型的”数据库”)"></a>数据的载体(小型的”数据库”)</h4><pre><code>教师管理系统：     姓名   工龄+1  邮箱 

发教师数据给财务管理系统： 

    String teacher =    name=张三&amp;email=zhangsan@qq.com&amp;workag
    e=2  字符串
            （问题： 1）不好解析 2）不是规范）

    teacher.xml
        &lt;teacher&gt;    
                &lt;name&gt;张三&lt;/name&gt;
                &lt;email&gt;zhangsan@qq.com&lt;/email&gt;
                &lt;workage&gt;2&lt;/workage&gt;
        &lt;/teacher&gt;
这种一种规范

财务管理系统：   

    姓名   工龄+1  邮箱
    发奖金：   统计奖金。   工龄
    发邮件功能： 
            邮箱   姓名   金额

方案一： 在财务管理系统中维护了一套教师信息。
        每年 ： 工龄增加  维护了两个系统的信息。

方案二： 教师信息只在教学管理系统中维护。
</code></pre><h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><p>xml文件以xml后缀名结尾。<br>xml文件需要使用xml解析器去解析。浏览器内置了xml解析器。</p>
<h4 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h4><pre><code>语法：
&lt;student&gt; 开始标签
   student 标签内容
&lt;/student&gt; 结束标签

&lt;student /&gt;空标签

xml严格区分大小写
xml标签一定要正确配对
xml标签名中间不能加空格
xml标签名不能以数字开头
xml根标签只能有一个
</code></pre><h4 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h4><pre><code>&lt;student name=&quot;eric&quot;&gt; student &lt;/student&gt;

xml属性值一定要以引号包含，不能省略，也不能单双引号混用
一个标签内可以有多个属性，但是不能重复
</code></pre><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><pre><code>&lt;!-- xml注释 --&gt;
</code></pre><h4 id="文档声明："><a href="#文档声明：" class="headerlink" title="文档声明："></a>文档声明：</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
version 版本号默认1.0
encoding 解析xml文件时查询的码表（解码过程时查询的码表）

注意：
    1）如果在ecplise工具中开发xml文件，保存xml文件时自动按照文档声明的enco
       ding来保存文件。
    2）如果用记事本工具修改xml文件，注意保存xml文件按照文档声明的encoding的
       码表来保存。
</code></pre><h4 id="XML转义字符："><a href="#XML转义字符：" class="headerlink" title="XML转义字符："></a>XML转义字符：</h4><pre><code>在xml中内置了一些特殊字符，这些特殊字符不能直接被浏览器原样输出。
如果希望把这些特殊字符按照原样输出到浏览器，对这些特殊字符进行转义。
转义之后的字符就叫转义字节。

特殊字符  转义字符
 &lt;         &amp;lt;
 &gt;         &amp;gt;
 &quot;         &amp;quot;
&amp;         &amp;amp;
空格      &amp;nsbp;
</code></pre><h4 id="CDATA块："><a href="#CDATA块：" class="headerlink" title="CDATA块："></a>CDATA块：</h4><pre><code>作用： 可以让一些需要进行包含特殊字符的内容统一进行原样输出。

&lt;![CDATA[
  &lt;html&gt;

  &lt;/html&gt;
]]&gt;
</code></pre><h4 id="处理指令："><a href="#处理指令：" class="headerlink" title="处理指令："></a>处理指令：</h4><pre><code>作用： 告诉xml解析如果解析xml文档

案例： 
&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;1.css&quot;?&gt; 告诉xml解析该xml
文档引用了哪个css文件
需要提前xml内容可以使用xml-stylesheet指令指令
</code></pre><h3 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h3><p>xml文件除了给开发者看，更多的情况使用程序读取xml文件的内容。这叫做xml解析</p>
<h4 id="XML解析方式"><a href="#XML解析方式" class="headerlink" title="XML解析方式"></a>XML解析方式</h4><pre><code>DOM解析
SAX解析
</code></pre><h4 id="XML解析工具"><a href="#XML解析工具" class="headerlink" title="XML解析工具"></a>XML解析工具</h4><pre><code>DOM解析：
    JAXP
    JDOM工具
    Dom4J工具
        三大框框使用

SAX解析：
    SAX解析工具(官方)
</code></pre><h4 id="什么是DOM解析"><a href="#什么是DOM解析" class="headerlink" title="什么是DOM解析"></a>什么是DOM解析</h4><pre><code>xml解析器一次性把整个xml文档加载进内存，然后在内存中构建一颗Document的
对象树，通过Document对象，得到树上的节点对象，通过节点对象访问(操作)到xml文
档的内容
</code></pre><p><img src="/images/8-31-1.png" alt="">    </p>
<p></p><p align="center">DOM解析</p><p>  </p>
<h4 id="Dom4J工具"><a href="#Dom4J工具" class="headerlink" title="Dom4J工具"></a>Dom4J工具</h4><pre><code>非官方，不在jdk

使用步骤：
    1）导入dom4j的核心包。 dom4j-1.6.1.jar
    2）编写Dom4j读取xml文件代码
</code></pre><h4 id="Dom4J读取xml文件"><a href="#Dom4J读取xml文件" class="headerlink" title="Dom4J读取xml文件"></a>Dom4J读取xml文件</h4><pre><code>节点：
    iterator Element.nodeIterator;//获取当前标签节点下的所有子节点
标签：
    Element Document.getRootElement();//获取xml文档的根标签
    Element    ELement.element(&quot;标签名&quot;);//指定名称的第一个子标签
    Iterator&lt;Element&gt; Element.elementIterator(&quot;标签名&quot;);// 指定名称的
    所有子标签
    List&lt;Element&gt;     Element.elements(); //获取所有子标签

属性：
    String   Element.attributeValue(&quot;属性名&quot;) //获取指定名称的属性值
    Attribute    Element.attribute(&quot;属性名&quot;)；//获取指定名称的属性对象    
    Attribute.getName()  //获取属性名称
    Attibute.getValue()  //获取属性值
    List&lt;Attribute&gt;     Element.attributes();  //获取所有属性对象
    Iterator&lt;Attribute&gt;        Element.attibuteIterator(); //获取所有属
    性对象

文本：
    Element.getText();  //获取当前标签的文本
    Element.elementText(&quot;标签名&quot;) //获取当前标签的指定名称的子标签的文本
    内容
</code></pre><h4 id="Dom4J修改xml文件"><a href="#Dom4J修改xml文件" class="headerlink" title="Dom4J修改xml文件"></a>Dom4J修改xml文件</h4><pre><code>写出内容到xml文档

    XMLWrite write = new XMLWriter(OutputStream,OutputForamt);
    write.write(Document);

修改xml文档的api
    增加：
        DocumentHelper.createDocument() 增加文档
        addElement(&quot;名称&quot;) 增加标签
        addAttribute(&quot;名称&quot;,&quot;内容&quot;)
    修改：
        Attribute.setValue(&quot;值&quot;) 修改属性值
        Element.addAttribute(&quot;同名的属性名&quot;,&quot;值&quot;) 修改同名的属性值
        Element.setText(&quot;内容&quot;) 修改文本内容
    删除:
        Element.detach() 删除标签
        Attribute.detach()删除属性
</code></pre><p><img src="/images/8-31-2.png" alt=""></p>
<p></p><p align="center">XML乱码问题</p><p>  </p>
<h4 id="xPath技术"><a href="#xPath技术" class="headerlink" title="xPath技术"></a>xPath技术</h4><pre><code>引入
    当dom4j查询比较深的层次结构的节点比较麻烦

作用
    快速获取所需的节点对象

运用
    1) 导入xPath支持包. 
    2) 使用方法
            List&lt;Node&gt; selectNodes(&quot;xPath表达式&quot;); 查找多个节点
            Node selectSingleNode(&quot;xPath表达式&quot;); 查找一个节点对象
</code></pre><h4 id="xPath语法"><a href="#xPath语法" class="headerlink" title="xPath语法"></a>xPath语法</h4><pre><code>/   绝对路径   表示从xml的根位置开始或者子元素(一个层次结构)
//  相对路径   表示不分任何层次结构的选择元素
*   通配符     表示所有元素
[]  定域       表示选择什么条件下的元素
@   属性       表示选取属性节点
</code></pre><h4 id="SAX解析"><a href="#SAX解析" class="headerlink" title="SAX解析"></a>SAX解析</h4><pre><code>加载一点，读取一点，处理一点，对内存要求低。
</code></pre><p><img src="/images/8-31-3.png" alt=""></p>
<p></p><p align="center">SAX解析</p><p>  </p>
<h4 id="SAX解析工具"><a href="#SAX解析工具" class="headerlink" title="SAX解析工具"></a>SAX解析工具</h4><pre><code>Sun公司提供，内置在Jdk中。 org.xml.sax

核心Api
    SaxParser类 用于读取和解析xml文件
        parse(File?f, DefaultHandler?dh)放法，解析xml文件

        参数一：File 表示读取的xml文件路径
        参数二：DefaultHandler Sax事件处理程序，使用DefaultHandler的子类

    例如：
    1.创建SAXParser对象  
        SAXParser parser=SAXParserFactory.newInstance().newSAXParse
        r();
    2.调用parse方法
        parser.parse(new File(&quot;./src/contact.xml&quot;), new MyDefaultHan
        dler());
        [一个类继承class 类名（extends DefaultHandler）  在调用是创建传
        进去    

DefaultHandler类的APi
    void starDocument() 在读到文档开始时调用
    void EndDocument() 在读到文档结束时调用
    void startElement(String uri, String localName, String qName, At
    tributes attributes)  ：读到开始标签时调用                
    void endElement(String uri, String localName, String qName)   
    ：读到结束标签时调用
    void characters(char[] ch, int start, int length)  ： 读到文本内容
    时调用
</code></pre><h4 id="DOM解析与SAX解析区别"><a href="#DOM解析与SAX解析区别" class="headerlink" title="DOM解析与SAX解析区别"></a>DOM解析与SAX解析区别</h4><pre><code>DOM解析
原理： 一次性加载xml文档，不适合大容量的文件读取
DOM解析可以任意进行增删改成
DOM解析任意读取任何位置的数据，甚至往回读
DOM解析面向对象的编程方法（Node，Element，Attribute）,Java开发者编码比较简
单。

SAX解析
原理： 加载一点，读取一点，处理一点。适合大容量文件的读取
SAX解析只能读取
SAX解析只能从上往下，按顺序读取，不能往回读
SAX解析基于事件的编程方法。java开发编码相对复杂。
</code></pre><h3 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h3><p>只要能看懂约束内容，根据约束内容写出符合规则的xml文件</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><pre><code>xml语法：规范的xml文件的基本编写规则.(由w3c组织规定的)

xml约束：规范xml文件数据内容格式的编写规则.(开发者自己定义)
</code></pre><h4 id="XML约束技术"><a href="#XML约束技术" class="headerlink" title="XML约束技术"></a>XML约束技术</h4><pre><code>DTD约束:语法简单，功能简单
Schema约束:语法复杂，功能相对强大(名称空间)
</code></pre><h4 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h4><pre><code>1)导入方式
    内部导入
    &lt;!DOCTYPE note [
      &lt;!ELEMENT note (to,from,heading,body)&gt;
      &lt;!ELEMENT to      (#PCDATA)&gt;
      &lt;!ELEMENT from    (#PCDATA)&gt;
      &lt;!ELEMENT heading (#PCDATA)&gt;
      &lt;!ELEMENT body    (#PCDATA)&gt;
    ]&gt;
    外部导入
        本地系统导入
            &lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;
        公共的外部导入
            &lt;!DOCTYPE 根元素 PUBLIC &quot;网络地址.dtd&quot;&gt;

2)DTD语法
    约束标签
        &lt;!ELEMENT 元素名称 类别&gt;  或 &lt;!ELEMENT 元素名称 (元素内容)&gt;

        类别：
            EMPTY 空标签 表示元素一定是空
            #PCDATA 普通字符串 表示元素的内容一定是普通字符串(不能含有子标
            签)
            ANY 任何类型 表示元素的内容是可以任意内容(包括子标签)

        元素内容：
            顺序问题
                &lt;!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)&gt;： 
                按顺序出现子标签
            次数问题：
                标签   ：  必须且只出现1次。
                标签+  ： 至少出现1次
                标签*   ： 0或n次。
                标签？  ： 0 或1次。


    约束属性
        &lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;

        默认值：
            #REQUIRED 属性值是必需的 
            #IMPLIED   属性不是必需的 
            #FIXED value 属性不是必须的，但属性值是固定的

        属性类型：控制属性值的
            CDATA ：表示普通字符串 
            (en1|en2|..)： 表示一定是任选其中的一个值
            ID：表示在一个xml文档中该属性值必须唯一。值不能以数字开头
</code></pre><h4 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h4><pre><code>名称空间：告诉xml文档的哪个元素被哪个schema文档约束。 在一个xml文档中，不同
的标签可以受到不同的schema文档的约束。

    1）一个名称空间受到schema文档约束的情况
    2）多个名称空间受到多个schema文档约束的情况
    3）默认名称空间的情况
    4）没有名称空间的情况
</code></pre><p><img src="/images/8-31-5.png" alt=""></p>
<p></p><p align="center">Schema约束</p><p>          </p>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-3]]></title>
      <url>http://yoursite.com/2016/08/28/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Javaspcrit</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="JavaScrip"><a href="#JavaScrip" class="headerlink" title="JavaScrip"></a>JavaScrip</h2><p>html负责一个页面的结构<br>css 负责一个页面的数据的风格和样式<br>javascrip负责与用户交互  </p>
<h3 id="javascript的历史"><a href="#javascript的历史" class="headerlink" title="javascript的历史"></a>javascript的历史</h3><pre><code>微软  盖茨认为未来是&quot;视窗&quot;的世界。  
网景： 1995年退出了一款浏览器（导航者）和liveScript(校验功能)， 非常受欢
迎。
和sun公司合作，借用了java的名字，把liveScirpt改名成javascript。  70%市场
份额。
盖茨知错了,盖茨找网景的老大判断， 不同意  （领航者)。
盖茨一年投资20亿美元去开发JScript.  微软 :捆绑销售+免费。   45美元。
1998年被美国在线的公司收购， 03年的时候网景宣布破产。  
同意赔钱7亿美元   拿出2千万美金成立了一个基金会（Mozilla ）谋智+ 把浏览器的
源代码全部开工。
</code></pre><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><pre><code>1997年欧洲的计算机协议（ECMA）组织出来给javascript规定协议。  
1. ECMAScirpt(规范了基本的语法而已)
2. BOM （浏览器对象模型）
3. DOM  (文档对象模型)
</code></pre><h3 id="javascript的特点："><a href="#javascript的特点：" class="headerlink" title="javascript的特点："></a>javascript的特点：</h3><pre><code>1. 跨平台
2. 安全性。 （javascript的代码不能直接访问硬盘的内容） 
</code></pre><h3 id="javascript与java之间区别-："><a href="#javascript与java之间区别-：" class="headerlink" title="javascript与java之间区别 ："></a>javascript与java之间区别 ：</h3><pre><code>1. javascript是属于网景公司产品， java是sun公司的产品。
2. javascript是基于对象的语言，java是面向对象的语言。
3. javascript是解释型语言，java是解释、编译型语言。
4. javascript是弱类型语言， java 是强类型语言。
5. java中声明变量 的时候必须要明确该变量的数据类型。
6. javascript声明变量不需要明确是何种数据类型， 任何的变量都是使用一个关键字
   var去声明即可。
</code></pre><h3 id="如何编写javascript的代码。"><a href="#如何编写javascript的代码。" class="headerlink" title="如何编写javascript的代码。"></a>如何编写javascript的代码。</h3><pre><code>方法1：可以使用&lt;script&gt;标签体进行编写；
       &lt;script type=&quot;test/javascript&quot;&gt;
         js代码块；
         alert(&quot;哈哈&quot;);//弹出框
         document.write(&quot;数据&quot;);//向页面输出数据
       &lt;/script&gt;
方法2： 可以引入javascript代码
        &lt;script src=&quot;name.js&quot; type=&quot;test/javascript&quot;&gt;
        &lt;/script&gt;
注意： 
        1.&lt;script&gt;是有开始标签与结束标签的，千万不要在一个标签中结束了。
        2.如果&lt;script&gt;已经用于引入了js文件，那么该&lt;script&gt;标签体就不能再写
        js代码了，
</code></pre><h3 id="网页的注释："><a href="#网页的注释：" class="headerlink" title="网页的注释："></a>网页的注释：</h3><pre><code>html &lt;!--注释的内容--&gt;
css注释  /*注释的内容*/
javascript: //单行   /*多行*/
</code></pre><h3 id="变量的声明："><a href="#变量的声明：" class="headerlink" title="变量的声明："></a>变量的声明：</h3><pre><code>格式：
    var 变量名 = 数据;
    var a = 10;
    document.write(&quot;a=&quot;+a+&quot;&lt;br/&gt;&quot;);
    var b = &quot;狗娃&quot;;
    document.write(&quot;b=&quot;+b+&quot;&lt;br/&gt;&quot;);    
    var c = 3.14;
    document.write(&quot;c=&quot;+c+&quot;&lt;br/&gt;&quot;);    

注意:
    1. 变量可以存储任何类型
    2. 类型根据数据类型决定
    3. 没有重复变量说法，只有定义顺序
    4. 使用typeof来检测数据类型    

数据类型：
    number 小数跟整数
    string 字符跟字符串
    boolean 布尔类型
    undefined 未被定义类型

类型转换：
    字符串转数字
    parseInt() 整数
    parseFloat() 浮点数
    IsNaN方法  判断该字符串是不是一个数字
</code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><pre><code>+(加法、正数、连接符) 
true 是1  
false 是0
/(除法) 两个整数不能整除时候结果为浮点数。

比较运算符
&gt; 大于号
  10&gt;3 true
  &quot;10&quot;&gt;&quot;3&quot; false
  &quot;19&quot;&gt;&quot;18888&quot; true
  10&gt;&quot;9&quot; true 数字与字符串比较时，会先把字符串转换成数字再进行比较
&lt; 小于号

逻辑运算符
&amp;&amp; 逻辑与 没有单与
|| 逻辑或
！ 非

三目运算符
表达式?执行体1:执行体2
</code></pre><h3 id="控制流程语句"><a href="#控制流程语句" class="headerlink" title="控制流程语句"></a>控制流程语句</h3><pre><code>if语句
if(condition){
   执行体
}

if语句的特殊处
1.类似C语言，与JAVA有些区别
2.String不能空是true 空为false
3.undefined false
4.NaN false

switch用法与其他类似
特殊之处
case后可以跟常量与变量，还可以跟表达式

循环语句
for
格式：
  for(初始化语句;判断条件;循环后的语句){
    执行体;
  }

for-in
格式：
  for(var 变量名 in 遍历的目标){
    执行体；
  }
1. 可以遍历数据的元素
var arr = {12,13,19,15,16};
for (var index in arr){
   document.write(arr[index]+&quot;,&quot;);
}
2. 可以用以遍历对象的所以属性

while
格式：
  while(判断条件){
    执行体；
  }        

do while
格式：
   do {
    执行体；
   }while(判断条件)；    

with 
说明：有了With语句，在存取对象属性和调用方法时就不用重复指定对象
格式:
   with(对象){
      可直接调用对象方法或属性;
   }
</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre><code>格式：
function 函数名(形参列表){
   函数体;
}
注意细节:
1.在Js的函数定义时，形参不能加var声明
2.在Js函数中，没有返回值类型，但可以有返回值，也可以没有，不用声明
3.在Js的函数中，没有函数重载
4.在Js的函数中，任何一个函数内部都隐式的维护了一个arguments的对象，给函
  数传递数据的时候，会先给arguements的数组里，然后再分配给形参
</code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><pre><code>方式1：
new String(&quot;内容&quot;);
方式2：
var str = &quot;内容&quot;;

常用方法
anchor() 生产锚点
&quot;&quot;.anchor(&quot;&quot;);

blink() 为元素添加blink标签

charAt()  返回指定索引位置处的字符

charCodeAt() 返回索引值对应的码值

fontcolor() 给字符串加上颜色

indexof() 返回指定字符串第一次出现的索引值

italics() 把字符串变为斜体

link() 给字符串添加超链接

replace() 替换字符串内容

split() 切割字符串

substr() 截取字符串

toUpperCase()转大写
toLowerCase()转小写
</code></pre><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><pre><code>getYear() 获取当前年份与1900年份相差年份

getFullYear() 获取当前准确年份

getMonth()获取月份

getDate()获取日

getHours()获得时间

getMinutes()获得分钟

getSeconds()获得秒

toLocaleString()获取一定格式的日期，不能修改
</code></pre><h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><pre><code>方式1： 
var 变量 = new Number(数字);
方式2：
var 变量 = 数字;

常用方法
toString() 将数字转换成字符串

toFixed() 指定保留小数位，还带有四舍五入
</code></pre><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><pre><code>常用方法
   ceil() 向上取整

   floor() 向下取整

   random() 随机数方法 

   round() 四舍五入
</code></pre><h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><pre><code>   方式1：
   var 变量名 = new Array();
   方式2：
   var 变量名 = new Array(个数); 创建一个指定数组长度的数组
   方式3：
   var 变量名 = new Array(元素1,元素2,...);
   方式4:
   var 变量名 = [&quot;&quot;];


注意细节：
   1.数组长度可以变化    

常用方法
   concat() 连接数组

   join() 使用指定的分割符，把数组中的元素拼装成一个字符串返回

   pop() 移除数组中的最后一个元素并返回

   push() 将新元素加入数组，并返回最新长度

   reverse() 反转数组的元素

   shift() 移除第一个元素，并返回

   slice() 截取数组的一段内容

   sort() 排序方法,但是需要写排序方法

   splice() 移除一个或多个元素，必要时还可以插入元素
</code></pre><h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><pre><code>在Js中没有类的概念，只要有函数即可创建对象

方式1：使用无参函数创建对象
function Person(){
}
var p = new Person();
p.id = 110;
方式2：使用带参的函数创建对象
function Person(id,name){
    this.id = id;
    this.name = name;
    this.say = function(){
      alert(name + &quot;呵呵&quot;);
    }
}
var p = new Person();
方式3: 使用Object函数来创建对象
function Object(){
}
var p = new Object();
p.id = 100;
p.name = &quot;铁蛋&quot;;
方式4：使用字面量的方式创建
var p = {
    id:110,
    name:&quot;狗娃&quot;,
    say:function{
      alert(this.name + &quot;呵呵&quot;);
    }
}
</code></pre><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><pre><code>1.prototype是函数的一个必备属性
2.prototype的值是一个对象
3.可以任意修改函数的prototype属性的值
4.一个对象会自动用有这个对象的构造函数的prototpye的成员属性和方法
 Array.prototype.getMax = function(){
var max = this[0];
for(var index = 1; index&lt;this.length ; index++){
    if(this[index]&gt;max){
        max = this[index];    
    }    
}
return max;
}


Array.prototype.searchEle = function(target){
    for(var i = 0 ; i&lt;this.length ; i++){
        if(target==this[i]){
            return i;    
        }    
    }
    return -1;

}



//var arr = new Array(12,4,17,9);
var arr = [12,4,17,9];
var max = arr.getMax();
var index = arr.searchEle(9);
document.write(&quot;最大值：&quot;+ max+&quot;&lt;br/&gt;&quot;);
document.write(&quot;索引值：&quot;+ index+&quot;&lt;br/&gt;&quot;);    
</code></pre><h3 id="Bom编程"><a href="#Bom编程" class="headerlink" title="Bom编程"></a>Bom编程</h3><pre><code>   浏览器对象模型: 浏览器对象模型中把浏览器的各个部分都用一个对象来描述，
   如果想要操作浏览器的一些属性，我们就可以通过浏览器对象模型的对象来操作

window 代表了新开一个窗口
   常用方法：
   open() 打开新窗口并装入给定的URL的文档

   resizeBy 改变窗口当前的位置，指定X与Y

   resizeTo 将窗口的大小更改为指定的宽度和高度值

   moveBy() 相对于原来的窗口移动指定的值

   moveTo() 相对于整个屏幕移动

   setInterval() 每经过指定的时间就可以执行指定的代码，单位ms

   clearInterval() 取消定时任务

   setTimeout() 经过指定的时间后，执行一次指定代码，单位ms

注意细节：
   window的一些方法调用可以省略window的对象

事件
   注册事件的方式:
   方式1：直接在html元素上注册
          &lt;body onload=&quot;ready()&quot;&gt;
          function ready)(){
            代码体;
          }
   方式2：可以在js代码找到对应的对象再注册      推荐 
          var bodyNode = document.getElementById(&quot;body&quot;);
          bodyNode.onload  = function{
          }
   常用的事件:
   鼠标点击相关：
   onclick 在用户用鼠标左键单击对象时触发。 
   ondblclick 当用户双击对象时触发。 
   onmousedown 当用户用任何鼠标按钮单击对象时触发。 
   onmouseup 当用户在鼠标位于对象之上时释放鼠标按钮时触发。 

   鼠标移动相关：
   onmouseout  当用户将鼠标指针移出对象边界时触发。 
   onmousemove 当用户将鼠标划过对象时触发。 

   焦点相关的：
   onblur 在对象失去输入焦点时触发。 
   onfocus 当对象获得焦点时触发。

   其他：
   onchange 当对象或选中区的内容改变时触发。 
   onload 在浏览器完成对象的装载后立即触发。 
   onsubmit 当表单将要被提交时触发。 


Location 代表了地址栏对象
   href 设置以及获取地址栏的对象

   reload() 刷新当前页面

Screen 代表了整个屏幕对象
   availHeight 获取系统屏幕的工作区域高度
   availWidth 获取屏幕的工作区域宽度
   height 获取屏幕的垂直分辨率
   width 获取屏幕的水平分辨率
</code></pre><h3 id="Dom编程"><a href="#Dom编程" class="headerlink" title="Dom编程"></a>Dom编程</h3><pre><code>    文档对象模型：一个html页面被浏览器加载的时候，浏览器就会对整个html页面上
    的所有变迁都会创建一个对应的对象进行描述，
    我们在浏览器上看到的信息只不过就是这些html对象的属性信息而已。
    我们只要能找到对应的对象操作对象的属性，则可以改变浏览器的当前显示内容。

    document.all 获取html文件中的所有标签节点

    document.links 获取文档中所有含有href属性的标签

通过html因素的标签属性找节点
    document.getElementById(&quot;html元素的id&quot;) 
    document.getElementsByTagName(&quot;标签名&quot;) 
    document.getElementsByName(&quot;html元素的name&quot;)

通过关系(父子关系、兄弟关系)找标签。
    parentNode    获取当前元素的父节点。
    childNodes    获取当前元素的所有下一级子元素。
    firstChild    获取当前节点的第一个子节点。
    lastChild    获取当前节点的最后一个子节点。
    ------------------------------------------------------------    
    nextSibling        获取当前节点的下一个节点。（兄节点）
    previousSibling    获取当前节点的上一个节点。（弟节点）


 注意细节: 
    InnerHTml是用来设置标签题的内容，value死用以设置标签的value属性值
    获取子节点的时候包括空文本和注释文本，可以通过便标签的类型判断筛选
    文本类型： 3
    注释类型: 8
    标签节点类型: 1

创建、插入节点

    document.createElement(&quot;标签名&quot;)        创建新元素节点
    elt.setAttribute(&quot;属性名&quot;, &quot;属性值&quot;)    设置属性
    elt.appendChild(e)                        添加元素到elt中最后的位置

    elt.insertBefore(newNode,oldNode); 在child之前
    elt必须是oldNode的直接父节点

    elt.removeChild(eChild) 删除指定节点
    elt必须是child的直接父节点
</code></pre><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><pre><code>方式1: 
    /正则表达式/模式
    var str = &quot;hello1123&quot;
    var reg = /^[a-z0-9]+/;


方式2:
    new RegExp(&quot;正则表达式&quot;,模式);

常用的两个方法
    test方法 匹配，使用正则对象去匹配字符串，成功则返回true，否则false

    exec方法 查找，根据正则表达式查找字符串符合规则的内容

模式
    g 全文查找
    i 忽略大小写
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如光]]></title>
      <url>http://yoursite.com/2016/08/28/%E5%A6%82%E5%85%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>这场雨一直下，从我生命的这头一直下到那头。这座城叫雨城。</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>这场雨一直下，从我生命的这头一直下到那头。这座城叫雨城。</p>
<p>我正撑着伞，一个人走在市中心的天桥上。周围的高楼把我围绕，色调干燥的霓虹和海报从四面八方而来，把这个城市包装出浮华的样子。我厌弃繁华，在你离开以后，所有的繁华都只是一具空虚的框架。没有你在身边，我面对繁华总是要失魂刹那。</p>
<p>于是我压低伞沿，在这灰色的雨中行走，在这穿越我生命的大雨中行走，在这陌生的人潮中行走。忽然我听到有人喊你名字，迟钝的我迅速转身，却只看到身后密密麻麻的、灰色的行人。</p>
<p>一切都是灰色的，在这场不会停止的大雨里，世界被雨水染成灰色，生命被雨水染成灰色。我回身找不到你，因为所有东西，自你离开的那刻都被带走了颜色。</p>
<p>这时，表情冷淡的行人与我擦肩而过，碰撞让我身上落满雨渍。我的世界也从此刻开始带上了色彩，我定是想起初遇你时的情景了。在那时灰色的大雨里，我一个人撑着伞在市中心的天桥上行走。来往的行人面无表情，却只有你，一脸纯真的鲜明。从那时起，我的世界开始充满明丽的色彩。你为我的世界染上色彩，却轻轻一笑，转身，再次隐入陌生的人群。留我神色恍惚，呆呆地站在人潮中，欣赏这个初具色彩的世界，还有回忆，回忆刚刚那个如光一般照亮我生命的女孩。</p>
<p>但我清楚，你不会再回到雨城。</p>
<p>雨声磨去了所有杂音，人们的表情也像我面对世界的态度一般冷漠而木然。但你则不然，你焕发出微光与这个没落的世界格格不入。</p>
<p>你总是如光一般，轻一笑，转身为我的世界染上色彩，但除了最后一次。那是世界仍具有色彩的最后一个傍晚，黄昏濡湿你温柔的眼角，你低声说你实在不能忍受雨城的雨了。但我低着头，同样低声地说我害怕雨城外面的世界。你一定早就料到，在那个连暮霭都湿润的黄昏，仍坚持如光一般，对我挤出一个最后，也是最苦涩的微笑，再含泪低头倒退，转身。你转身，把我遗落在雨城的阴影里，却带走了我整个世界的色彩。你的背影越来越小，我的晚霞也涨满灰色。</p>
<p>雨是灰色的，墙是灰色的，整个世界都是灰色的，自你离开我以后。我也知道你不会再回来，却一直期待，那个如光一般的女孩能再次出现。一看到你，就像看见晴天。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/wy/id-138895.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[物联网将引发照明的下一场革命]]></title>
      <url>http://yoursite.com/2016/08/27/%E7%89%A9%E8%81%94%E7%BD%91%E5%B0%86%E5%BC%95%E5%8F%91%E7%85%A7%E6%98%8E%E7%9A%84%E4%B8%8B%E4%B8%80%E5%9C%BA%E9%9D%A9%E5%91%BD/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>物联网将引发照明的下一场革命</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<p>路灯给夜晚出行的人们带来了光明，为现代人们快节奏的生活方式提供了方便。对于路灯，现代的人们早已司空见惯，而在15世纪以前，它却是一件稀罕物。人类尝试在城市街道上进行人工照明，最早要追溯到15世纪初。1417年，当时的伦敦市长为了让冬日漆黑的街道明亮起来，要求在室外悬挂灯具照明，这就是路灯的起源。1843年，上海街头出现了中国第一盏路灯，尽管它是煤油点燃的，却吸引了黄浦江边众多人群的目光。直到1879年，上海的码头才亮起了中国第一盏电灯。</p>
<h2 id="路灯控制技术发展缓慢"><a href="#路灯控制技术发展缓慢" class="headerlink" title="路灯控制技术发展缓慢"></a>路灯控制技术发展缓慢</h2><p>如今，路灯已经遍布全球各个城市的大街小巷。根据国际气候组织（The Climate Group）统计，全球路灯的保有量已经上升到3.04亿盏，并将在2025年达到3.52亿盏。路灯的数量不断增长，照明技术也在不断革新，而路灯的控制技术却发展缓慢。</p>
<p>最初的马路电灯在每根电线杆上都装有闸刀开关，需要工人每天手动开启和关闭，后来若干路灯开始合用一个开关。这种通过开关控制的路灯形式在全国各城市中一直沿用到20世纪50年代。</p>
<p>直到今天，大部分的城市路灯仍然无法实现智能化控制。目前使用较多的分散时控方式，多采用在路灯配电箱中安装定时器，按预定时间自行开/关灯。这种控制模式的缺陷在于无法灵活调整开/关灯时间，更无法反映照明设施的运行情况，并且故障率高，维修困难。随着城市的不断发展，控制范围越来越大，在现行的控制模式下，会使得维修工作十分被动。运行过程中的故障只有等待巡视人员到达现场才能发现，或者被动等待市民电话反映，难以做到及时维修。</p>
<p>能耗高、巡检慢、管理难是横在市政照明领域的3只“拦路虎”。 </p>
<p><img src="/images/8-27-1.jpg" alt=""></p>
<h2 id="“灯联网”：驱散市政照明的“拦路虎”"><a href="#“灯联网”：驱散市政照明的“拦路虎”" class="headerlink" title="“灯联网”：驱散市政照明的“拦路虎”"></a>“灯联网”：驱散市政照明的“拦路虎”</h2><p>如今，物联网技术飞速发展，数以亿计的各种终端正加速接入网络，我们即将迎来万物互联的新世界。当一个物体被接入网络，将迸发出巨大的潜能。把汽车接入网络，无人驾驶技术就应运而生，一举改变了几百年来的驾驶习惯；如果将路灯接入网络，将会带来哪些改变？华为照明物联网解决方案已经给出了答案。</p>
<p>该方案为每盏路灯安装了内置无线通信模块的照明控制器，赋予了路灯联接的“翅膀”，让路灯之间实现快速自组网，再辅以物联网关节点，将城市中数量庞大的路灯联成了一张巨大的“灯联网”。照明控制器实时采集路灯的各种运行参数并上送到云端；基于GIS地图的可视化管理系统可以清楚获知每一个街区、每一盏路灯的运行状态，实现路灯的在线巡检；通过应用照明策略，能够精准控制每一盏路灯的开/关状态和照明亮度，真正实现按需照明，节能效率高达80%。照明物联网方案将市政照明领域的3只“拦路虎”一举驱散。</p>
<p>照明物联网方案的“驱虎”之术究竟有哪些精妙之处？</p>
<h3 id="“高智商”节能：精确计算-智能感知"><a href="#“高智商”节能：精确计算-智能感知" class="headerlink" title="“高智商”节能：精确计算+智能感知"></a>“高智商”节能：精确计算+智能感知</h3><p>对路灯的智能控制上，方案提供组合照明控制策略。首先，可以基于经纬度计算路灯所在地区的日出和日落时间，科学地设定照明时长；根据一年四季的变化规律，针对不同季节和不同月份之间照明时长的差异，动态调整照明计划；在每一天的照明时间段内，照明计划可以分时精细化编排；其次，对路灯的控制可以与亮度传感器、车流量和人流量传感器等进行联动。比如在深夜时段、在车流稀少的路段可以调低路灯亮度或者间隔开灯；而在光照条件不好的阴雨天气则根据对环境的感知及时开灯等。</p>
<h3 id="高效管理：可视化在线巡检-前瞻性维护"><a href="#高效管理：可视化在线巡检-前瞻性维护" class="headerlink" title="高效管理：可视化在线巡检+前瞻性维护"></a>高效管理：可视化在线巡检+前瞻性维护</h3><p>对路灯的管理上，采用了基于GIS地图的可视化管理方式，城市中不同街区的路灯数量、路灯运行状态、安装位置和安装时间等信息一目了然。当路灯发生故障时，系统会自动告警，并发送信息通知维修人员及时前往事故地点检修。除此之外，管理系统还可以对路灯进行生命周期管理，了解路灯的运行时长和历史故障记录，提前预知可能发生的故障，实现前瞻性维护。</p>
<h3 id="多级控制：本地控制-云端控制"><a href="#多级控制：本地控制-云端控制" class="headerlink" title="多级控制：本地控制+云端控制"></a>多级控制：本地控制+云端控制</h3><p>在传统的群控模式下，因为施工等原因造成控制网络中断时，经常导致多台路灯脱管。路灯不是在白天与日争辉，就是连续很多天漆黑一片。多级智能控制是该方案的最大特色，包括两级本地智能控制和一级云端智能控制。敏捷物联网关和路灯控制器均支持照明策略的本地化部署。当敏捷网关的上行网络故障时，可快速切换到本地控制策略；而当传感网络故障时，路灯控制器则可以工作于离线模式。多级智能控制机制最大程度强化了对路灯的可控性，防止路灯脱离控制的状况发生。</p>
<h2 id="智能照明开拓更广阔的物联网空间"><a href="#智能照明开拓更广阔的物联网空间" class="headerlink" title="智能照明开拓更广阔的物联网空间"></a>智能照明开拓更广阔的物联网空间</h2><p>照明物联网方案采用全层次开放架构，从底层芯片到上层应用均提供开放接口。底层控制芯片可基于华为开源物联网操作系统LiteOS进行开发；敏捷网关支持虚拟化架构，合作伙伴可以开发和安装定制化应用；敏捷控制器则对第三方应用系统提供标准北向接口，便于扩充各种服务组件。</p>
<p>随着智慧城市建设的推进，路灯将不再只是灯杆加灯头，而将成为智慧城市的重要“据点”。在照明物联网的基础上可以增加更丰富的传感设施，将环境监测、交通监测、智能充电桩和智能垃圾桶等各种对象都纳入到感知网络中，为智慧城市提供基础的数据支撑，扩展更多智慧化服务。</p>
<p>小路灯撬动大市场，照明物联网化潮流已经到来。从业内厂商纷纷开始布局这一领域的动向也可以看出，照明物联网化是大势所趋。若能将城市路灯全部互联，发挥智能照明的作用，定会开拓更为广阔的物联网空间。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://developer.huawei.com/cn/ict/" target="_blank" rel="external">华为</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-2]]></title>
      <url>http://yoursite.com/2016/08/27/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;Html+Css</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h2><h3 id="1-1-语言结构"><a href="#1-1-语言结构" class="headerlink" title="1.1 语言结构"></a>1.1 语言结构</h3><pre><code>&lt;html&gt; 根标签
    &lt;head&gt;&lt;/head&gt;网页的头信息
    &lt;body&gt;&lt;/body&gt;网页的体信息
&lt;/html&gt;
</code></pre><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><pre><code>&lt;!-- 注释的内容 --&gt;
</code></pre><h3 id="1-3-头信息的作用"><a href="#1-3-头信息的作用" class="headerlink" title="1.3 头信息的作用"></a>1.3 头信息的作用</h3><pre><code>1&gt; 可以设置网页的标题
2&gt; 可以
</code></pre><h3 id="1-4-html常用标签"><a href="#1-4-html常用标签" class="headerlink" title="1.4 html常用标签"></a>1.4 html常用标签</h3><pre><code>1&gt; 标签作用：用于描述一个网页的结构
2&gt; 需要操作数据时，需要添加标签
3&gt; 标签
 &lt;h1&gt;--&lt;h6&gt;描述标题
 &lt;p&gt;&lt;/p&gt;表示段落
 &lt;hr/&gt;水平线
 &lt;sub&gt;&lt;/sub&gt;下标标签
 &lt;br/&gt;换行
 &lt;sup&gt;&lt;/sup&gt;上标
 &lt;pre&gt;&lt;/pre&gt;原样标签
 &lt;ol&gt;
      &lt;li&gt;&lt;/li&gt;有序列表标签
      &lt;ul&gt;&lt;/ul&gt;无序列表
 &lt;/ol&gt;
 &lt;dl&gt;
    &lt;dt&gt;&lt;/dt&gt;无缩进
    &lt;dd&gt;&lt;/dd&gt;有缩进
 &lt;/dl&gt;
 &lt;span&gt;&lt;/span&gt;行内标签
 &lt;div&gt;&lt;/div&gt;块标签 标签内容独立占一行
</code></pre><h3 id="1-5-实体标签"><a href="#1-5-实体标签" class="headerlink" title="1.5 实体标签"></a>1.5 实体标签</h3><pre><code>&amp;nbsp 空格
&amp;lt; 小于号
&amp;gt; 大于号
&amp;amp; 与号
&amp;yen; 人民币
&amp;copy; 版权
&amp;reg; 商标
</code></pre><h3 id="1-6-媒体标签"><a href="#1-6-媒体标签" class="headerlink" title="1.6 媒体标签"></a>1.6 媒体标签</h3><pre><code>&lt;embed src=&quot;&quot;&gt;&lt;/emned&gt; 
src表示路径
&lt;marquee&gt;弹幕&lt;/marquee&gt;
&lt;embed src=&quot;纯音乐 - 偏偏喜欢你.mp3&quot;&gt;&lt;/embed&gt;
&lt;marquee direction=&quot;right&quot; scrollamount=&quot;30&quot;&gt;
&lt;font color=&quot;#CC0000&quot; size=&quot;+5&quot;&gt;弹幕&lt;/font&gt;
&lt;/marquee&gt;
</code></pre><h3 id="1-7-超链接标签"><a href="#1-7-超链接标签" class="headerlink" title="1.7 超链接标签"></a>1.7 超链接标签</h3><pre><code>&lt;a&gt;&lt;/a&gt;
href = &quot;链接&quot;
target：设置打开新资源的目标
        Blank 在独立的窗口上打开资源
        _self 在当前窗口下打开
file 是用在查找本地的网页
使用http协议,会在本地机器去找一个hosts文件，如果再此文件没有该域名的主机，则
去NDS上找到该域名的主机号,不是http或者file协议的，会去查找本地是否有适合这个
协议的应用，如果有则处理。
邮件协议：mailTo
迅雷协议：thunder
锚点定位：
         1.首先写一个锚点  &lt;a name=&quot;锚点名字&quot;&gt;数据&lt;/a&gt;
         2.使用a标签的herf属性链接到锚点处: href=&quot;#锚点名
</code></pre><h3 id="1-8-图片标签"><a href="#1-8-图片标签" class="headerlink" title="1.8 图片标签"></a>1.8 图片标签</h3><pre><code>&lt;img src=&quot;&quot;/&gt;
width设置宽度
height高度
alt图片加载不了时，进行提醒
</code></pre><h3 id="1-9-表格标签"><a href="#1-9-表格标签" class="headerlink" title="1.9 表格标签"></a>1.9 表格标签</h3><pre><code>&lt;table&gt;&lt;/table&gt;
&lt;tr&gt;表示行
&lt;td&gt;单元格 
&lt;th&gt;表头  默认剧中加粗
&lt;caption&gt; 表的标题
border表格的边框
bordercolor表格边框颜色
width表格宽度
height表格高度
align位置
colspan表示单元格占据几个列
rowspan表示占据的行数
&lt;thead&gt;&lt;/thead&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;tfoot&gt;&lt;/tfoot&gt;
</code></pre><h3 id="1-10-框架标签"><a href="#1-10-框架标签" class="headerlink" title="1.10 框架标签"></a>1.10 框架标签</h3><pre><code>frameSet:　一个frameset可以切割成多块
&lt;frameset&gt;&lt;/frameset&gt;
frame不可以被分割，位于frameset中
</code></pre><h3 id="1-11-表单标签"><a href="#1-11-表单标签" class="headerlink" title="1.11 表单标签"></a>1.11 表单标签</h3><pre><code>&lt;form&gt; &lt;/form&gt;
 action 指定提交数据的地址
 method 指定有表单提交方式
        get提交方式 默认 提交内容会显示在地址栏 不超过1KB 不安全 

        post提交方式 不会显示  数据不受限制 安全  
        注意:表单提交，需要加上name属性 
</code></pre><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h2><p> html负责一个页面的结构<br> css 负责一个页面的数据的风格和样式</p>
<h3 id="2-1-编写CSS代码的方式"><a href="#2-1-编写CSS代码的方式" class="headerlink" title="2.1 编写CSS代码的方式"></a>2.1 编写CSS代码的方式</h3><pre><code>1.在style标签中编写css代码
   &lt;style type=&quot;text\css&quot;&gt;
         a{
     color:#366;
     text-decoration:none;
     }
&lt;/style&gt;
2.引入css文件
    ⑴建立.css文件 推荐使用
      使用&lt;link href=&quot;.css&quot; rel=&quot;stylesheet&quot;/&gt;
    ⑵用style引入
       &lt;style type=&quot;text\css&quot;&gt;
         @import url(&quot;1.css&quot;);
   &lt;/style&gt;
3.直接在html中引用
  style内容里编写 用分号隔开
</code></pre><h3 id="2-2-css注释"><a href="#2-2-css注释" class="headerlink" title="2.2 css注释"></a>2.2 css注释</h3><pre><code>/* */
</code></pre><h3 id="2-3-选择器"><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h3><pre><code>标签选择器

   标签名{
      样式1；样式2.....
    }
   div{
     color:#f00:
     font-size:20px;
    }

类选择器 
   .class的属性值{
   样式1；样式2....      
    }
class名不能以数字开头
类选择器的样式要优先于标签选择器的样式

id选择器
#one{
background-color:#ff9;
}
id选择器的优先值最高
id也不能以数字开头命名
id属性值在一个html页面中只能出现一次

交集选择器
选择器1 选择器2{
     样式1，样式2....
}

并集选择器:对制定的选择器进行统一的样式化
格式：
    选择器1 选择器2 ..{
      样式1;样式2....
   }

通过选择器
    *{
       样式1;样式2...
      }

伪类选择器:对元素处于某种状态的进行的样式的
   link  没有被点击过  
   visited 已经被访问过的样式
   hover 鼠标经过的状态
   active 点击未释放
</code></pre><h3 id="2-4-常用CSS样式"><a href="#2-4-常用CSS样式" class="headerlink" title="2.4 常用CSS样式"></a>2.4 常用CSS样式</h3><pre><code>背景属性：
background 背景颜色样式
background-image 背景图片
background-repeat 可以设置图片是否可以重复
background-position 位置设置  第一个参数是水平 第二个是垂直

文本属性：
color 设置文本颜色
direction 没什么用
font-size 字体大小
font-height 行高
letter-space 字符跟字符间的间距
text-align 元素的对齐方式
text-decoration 文本样式
text-transform 转换字符

表格属性：
border-collapse:collapse 合并边框
border-spaceing 
empty-cells 要不要显示空单元格
table-layout 控制单元格的样式 

边框属性：默认无边框
 border-style 边框样式
 border-color 边框颜色
</code></pre><h3 id="2-5-盒子模型"><a href="#2-5-盒子模型" class="headerlink" title="2.5 盒子模型"></a>2.5 盒子模型</h3><pre><code>把html边框比作成了一个盒子的边框，盒子模型要做用于操作数据与边框之间的距离或
者是边框与边框之间的距离.
盒子模型主要是用于操作内边框与外边框.
</code></pre><h3 id="2-6-定位"><a href="#2-6-定位" class="headerlink" title="2.6 定位"></a>2.6 定位</h3><pre><code>相对定位： 是相对于元素原来的位置来移动
           利用position:relative属性
绝对定位： 绝对定位是相对于整个页面而言
固定定位： 相对于整个浏览器而言的位置   
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[遵循内心，做你所想]]></title>
      <url>http://yoursite.com/2016/08/27/%E9%81%B5%E5%BE%AA%E5%86%85%E5%BF%83%EF%BC%8C%E5%81%9A%E4%BD%A0%E6%89%80%E6%83%B3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>今年年初的时候，我正陷入某种人生困境中。</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>今年年初的时候，我正陷入某种人生困境中。</p>
<p>现在看来，这个困境根本不算什么，无非是要不要辞职，回家把书写完，然后考试申请出国。虽说我对职场没有任何眷恋，也没人指望着我出去赚钱养家，但是，辞职这件事情还是让我觉得痛苦。我担心，离开正常的工作就会陷入拖延症，脱离正常的人际交往的日子。再说，万一书写不出来怎么办？万一成绩考不出来怎么办？……</p>
<p>我独自纠结了一段时间，去找朋友聊了一下。她说了“反正你的工作对于人类社会也没什么贡献”“辞职以后就可以一起学习一起游泳”之类的话，就更加坚定我要辞职的信念，可真写起辞职信的时候，还是有些担心。</p>
<p>那天，我在办公室里写辞职信，来回纠结修辞问题，瞪着电脑看了半个小时啥也写不出来，就跑到对面去买咖啡。天气好冷，我抱着超级难喝的热咖啡站在路口等绿灯，突然想，为什么要犹豫？你恐惧辞职后写书、考试会失败，但是，你怎么知道上班就能成功呢？如果你考试都考不出来，这个智商，就以为自己真能成为职场小能手啦？你以为往前走是失败，但是安于现状就不失败了？就完全保险了？就能成功？就能成为人生赢家啦？反正都不见得有多好，倒不如做点让自己高兴的事情呢。</p>
<p>当我意识到这一点的时候，果断地回去，痛痛快快地把辞职信写完。然后，去图书大厦买了几本参考书，开始我的备考和自由职业的路途。几个月过去了，半年过去了，甚至今年也马上要结束了。我的生活没有变得一团糟，相反，事情正在顺利地进行着。该弄的事情弄完了，该学的东西也学完了，该克服的困难也克服了，新书也写完了。很好，我竟然没有毁掉自己的人生。</p>
<p>在多年的人生经历里，你，或者我，多多少少已经看清这个世界的冷酷面目。世界不温柔，人们经常不快乐，森林里也没有数不清的糖果屋。生活不是小说，不努力绝对不会有回报，但努力也不意味着成功，相反，你有可能一次又一次地迎来痛击……无论你后退还是前进，人生总会不尽如人意。比如说，明明渴望去大城市看看的年轻人，却担心失败而留在家乡随便找份工作生活，最终被无聊感和不甘心所缠绕终日；明明想做某件事情，却听了一堆“朋友说”而放弃内心的渴望。</p>
<p>在这座城市里，每天都有许多人在自我质疑与他人质疑中困惑着——年轻的作家挣扎多年，写出作品后却连续遭出版社退稿；职场新人每日写的PPT被客户骂得一无是处；当初那颗兴奋而怀揣梦想的心，已经在现实的打磨中变得日益暗沉。这时候，是选择后退，还是选择向前一步？</p>
<p>乔布斯告诉我们，一定要遵循内心。问题是，普通人到底应该怎么做选择呢？普通人遵循自己的内心，就一定会成功吗？</p>
<p>当然不是，遵循内心仅仅是一个开始。乔布斯不做苹果也可能做出其他震惊世人的产品，这个就是现实情况。可是，你以为往后退就会安全，会成功吗？不会的，生活的麻烦总会找上你。反正左右都有可能失败，倒不如去做自己想做的事情好了，至少，痛快了。往好的方面想想，往前走，搞不好能探索出新的可能性，即使没有，也没有关系啊，反正原来的人生也不见得会很好，成功了就很让人高兴，失败了也没有太大的损失。</p>
<p>大部分尝试都会失败，恰恰如此，内心的信念才显得如此之珍贵，自暴自弃是容易的，看清世界的冷酷仍然选择往前走，仍然按照自己的意愿去生活，则是艰难的。一颗不畏惧不服从的内心，它让生命有其他的可能性，它是无边无际的黑夜中微弱而明亮的星辰。</p>
<p>对于芸芸众生来说，遵循内心的声音，去做你想做的事情，同样也是一种相对理性的选择。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/rensheng/id-138868.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[它会记着你的好]]></title>
      <url>http://yoursite.com/2016/08/26/%E6%96%87%E6%91%98%E6%AC%A3%E8%B5%8F-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>动物是这样，你把它当人看，你对它好，它会记着你的好；人更是这样，人是世界上最高等的动物，你对他的好，他会点滴记心中，会“滴水之恩，涌泉相报”。</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>动物是这样，你把它当人看，你对它好，它会记着你的好；人更是这样，人是世界上最高等的动物，你对他的好，他会点滴记心中，会“滴水之恩，涌泉相报”。</p>

<p>以前在好莱坞电影里出现的猛兽，如狮子、老虎，大多是用鞭打、电击等很残酷的方法训练的。海夫尔当驯兽师后，他认为动物也是有感情的，他提出驯兽应该用“慈善诱导法”，他便放弃了残酷的训练方法。可很多人不以为然，觉得野兽就是野兽，人只能用暴力来制服它们，并且大家准备看他的笑话，甚至认为他终有一天会被动物吃掉。但他仍然采取温柔的办法待动物，渐渐地培养起了与动物们的感情。</p>

<p>有一天，海夫尔要外出演出，他开着拖车，带着他几年来用慈善诱导法精心训练的狮子泰米去片场拍戏。没想到，在高速公路上出了车祸，铁笼散架了，狮子泰米受伤了，头上和身上都是血，眼睛受伤看不见了，发出一声嘶哑的咆哮！现场的人被吓坏了，马上报了警。警察闻讯赶到，为防止它伤人准备击毙它。</p>

<p>但海夫尔醒来后，冲泰米吹了声口哨，然后用亲切镇定的声音一遍遍地呼唤它的名字。既受惊又瞎了眼的泰米正焦躁不安地发狂，听到海夫尔的声音，它猛地转过头。迟疑了片刻，终于慢慢地，一瘸一拐地朝着海夫尔走来，海夫尔抚摸着狮子，带着它进了另一个笼子，一场危机就这样化解了。</p>

<p>事后海夫尔不禁泪如泉涌，并伸开双臂迎接这个对他无限信任的朋友。这件事后，大家相信了海夫尔。也相信了猛兽们，也开始对它们好起来，并且改变了残酷的训练方法。</p>

<p>还有一位少年16岁报名参加骑师训练班。报名的800多人中，最后被录取了7人，他是年龄最小、个子最矮的一个。此后训练极其艰苦，早晨5点起床，然后集体做俯卧撑、蹲马步，然后在马背上开始一天的训练；无论是烈日炎炎，还是狂风暴雨，一年365天，没有休息日。他知道，要成为一名优秀的骑师，光会骑马技术远远不够，还要有对马儿的情感投入，以及打心底里透出的呵护和爱惜，因为马的智商和人相近，它不仅能接受训导，还能学习模仿，与人交流感情。于是结束一天的训练后。其他同学累得只想睡觉，他却跑到马厩里，细心地给马儿进行护理，每天雷打不动给马匹量两次体温，洗澡，细心地擦干，而且还要陪马坐一会儿，给马捶一捶、揉一揉。自己才回宿舍休息。</p>

<p>他的马成了他的伙伴，每次训练、比赛都很配合，很肯帮他的忙，他也因此从见习骑师到正式骑师，本来要经过3年，赢得40场头马，而他仅仅用了1年。便赢得178场头马，提前晋级为正式骑师。</p>

<p>动物是这样，你把它当人看，你对它好，它会记着你的好；人更是这样，人是世界上最高等的动物，你对他的好，他会点滴记心中，会“滴水之恩，涌泉相报”。</p>

<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.rensheng5.com/duzhewenzhai/rensheng/id-138826.html" target="_blank" rel="external">点这</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java学习之路-1]]></title>
      <url>http://yoursite.com/2016/08/26/java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>java学习之路—–&gt;基础复习</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<h2 id="1-集合"><a href="#1-集合" class="headerlink" title="1.集合"></a>1.集合</h2><h3 id="1-1-集合的类型和各自的特性"><a href="#1-1-集合的类型和各自的特性" class="headerlink" title="1.1 集合的类型和各自的特性"></a>1.1 集合的类型和各自的特性</h3><pre><code>---|Collection: 单列集合
    ---|List: 有存储顺序, 可重复

        ---|ArrayList: 
        数组实现, 查找快, 增删慢
        由于是数组实现,在增和删的时候会牵扯到数组增容,以及拷贝元素.所以慢。
        数组是可以直接按索引查找,所以查找时较快。

        ---|LinkedList:    
        链表实现, 增删快, 查找慢
        由于链表实现, 增加时只要让前一个元素记住自己就可以, 删除时让前一个元素记
        住后一个元素, 后一个元素记住前一个元素. 这样的增删效率较高但查询时需要一
        个一个的遍历, 所以效率较低

        ---|Vector:    
        和ArrayList原理相同, 但线程安全, 效率略低

    ---|Set: 无存储顺序, 不可重复

        ---|HashSet: 
        线程不安全，存取速度快。底层是以哈希表实现的。

        ---|TreeSet   
        红-黑树的数据结构，默认对元素进行自然排序（String）。如果在比较的时候两
        个对象返回值为0，那么元素重复。
</code></pre><h3 id="1-2-遍历集合"><a href="#1-2-遍历集合" class="headerlink" title="1.2 遍历集合"></a>1.2 遍历集合</h3><pre><code>遍历集合的几种方式

    1. 使用迭代器Iterator的方式。
    2. 使用增强for循环的方式。
    3. 如果有下标，则可以使用下标的方式。

遍历数组
    public static void main(String[] args) {
    // 遍历数组：
    String[] arr = new String[] { &quot;xx&quot;, &quot;yy&quot;, &quot;zz&quot; };

    // 1，增强的for循环
    for (String elt : arr) {
        System.out.println(elt);
    }

    // 2，下标的方式
    for (int i = 0; i &lt; arr.length; i++) {
        System.out.println(arr[i]);
    }
 }

遍历List
    public static void main(String[] args) {
        // 遍历List：
        List&lt;String&gt; list = new ArrayList&lt;String&gt;();
        list.add(&quot;aa&quot;);
        list.add(&quot;bb&quot;);
        list.add(&quot;cc&quot;);

        // 1，增强的for循环
        for (String elt : list) {
            System.out.println(elt);
        }

        // 2，下标
        for (int i = 0; i &lt; list.size(); i++) {
            System.out.println(list.get(i));
        }

        // 3，迭代器
        for (Iterator&lt;String&gt; iter = list.iterator(); iter.hasNext();){
            String elt = iter.next();
            System.out.println(elt);
        }
    }

遍历Set
    public static void main(String[] args) {
        // 遍历Set：
        Set&lt;String&gt; set = new HashSet&lt;String&gt;();
        set.add(&quot;dd&quot;);
        set.add(&quot;ee&quot;);
        set.add(&quot;ff&quot;);

        // 1，增强的for循环
        for (String elt : set) {
            System.out.println(elt);
        }

        // 2，迭代器
        for(Iterator&lt;String&gt; iter = set.iterator(); iter.hasNext() ; ){
            String elt = iter.next();
            System.out.println(elt);
        }
    }

遍历Map
    public static void main(String[] args) {
        // 遍历Map：
        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
        map.put(&quot;aa&quot;, &quot;xx&quot;);
        map.put(&quot;bb&quot;, &quot;yy&quot;);
        map.put(&quot;cc&quot;, &quot;zz&quot;);

        // 1，增强的for循环（Entry集合）
        for (Entry&lt;String, String&gt; entry : map.entrySet()) {
            System.out.println(entry);
        }

        // 2，增强的for循环（Key集合）
        for(String key : map.keySet()){
            System.out.println(key + &quot; = &quot; + map.get(key));
        }

        // 3，遍历值的集合
        for(String value : map.values()){
            System.out.println(value);
        }
     }
</code></pre><h2 id="2-泛型"><a href="#2-泛型" class="headerlink" title="2.泛型"></a>2.泛型</h2><h3 id="2-1-泛型出现原因"><a href="#2-1-泛型出现原因" class="headerlink" title="2.1 泛型出现原因"></a>2.1 泛型出现原因</h3><p>存入的是特定的对象,取出的时候是Object对象,需要强制类型转换,可能诱发类型转换异常。无法控制存入的是什么类型的对象,取出对象的时候进行强转时可能诱发异常。而且在编译时期无法发现问题。</p>
<p>虽然可以再类型转换的时候通过if语句进行类型检查(instanceof),但是效率较低。(例如吃饭的时候,还需要判断米饭里有没有沙子,吃饭效率低)。可以通过给容器加限定的形式规定容器只能存储一种类型的对象。</p>
<p>就像给容器贴标签说明该容器中只能存储什么样类型的对象，所以在jdk5.0后出现了泛型。</p>
<h3 id="2-2-泛型作用"><a href="#2-2-泛型作用" class="headerlink" title="2.2 泛型作用"></a>2.2 泛型作用</h3><ol>
<li><p>将运行时的异常提前至编译时发生。</p>
</li>
<li><p>获取元素的时候无需强转类型，就避免了类型转换的异常问题</p>
</li>
</ol>
<h3 id="2-3-泛型使用细节"><a href="#2-3-泛型使用细节" class="headerlink" title="2.3 泛型使用细节"></a>2.3 泛型使用细节</h3><pre><code>细节一：  声明好泛型类型之后,集合中只能存放特定类型元素
        public class Demo6 {
        public static void main(String[] args) {
            //创建一个存储字符串的list
            ArrayList&lt;String&gt; arr=new ArrayList&lt;String&gt;();
            arr.add(&quot;gz&quot;);
            arr.add(&quot;itcast&quot;);
            //存储非字符串编译报错.
            arr.add(1);
        }
      }
细节二：  泛型类型必须是引用类型
        public class Demo6 {
        public static void main(String[] args) {
            // 泛型类型必须是引用类型,也就是说集合不能存储基本数据类型
            // ArrayList&lt;int&gt; arr2=new ArrayList&lt;int&gt;();
            // 使用基本数据类型的包装类
            ArrayList&lt;Integer&gt; arr2 = new ArrayList&lt;Integer&gt;();
        }
      }
细节三:   使用泛型后取出元素不需要类型转换.
        public class Demo6 {
            public static void main(String[] args) {

                ArrayList&lt;String&gt; arr = new ArrayList&lt;String&gt;();
                arr.add(&quot;gzitcast&quot;);
                arr.add(&quot;cditcast&quot;);
                arr.add(&quot;bjitcast&quot;);
                //使用泛型后取出元素不需要类型转换.
                String str=arr.get(0);
                System.out.println();
        }
      }
</code></pre><ol>
<li>创建对象的时候要指定泛型的具体类型</li>
<li>创建对象时可以不指定泛型的具体类型(和创建集合对象一眼)。默认是Object，例如我们使用集合存储元素的时候没有使用泛型就是那么参数的类型就是Object</li>
<li>类上面声明的泛型只能应用于非静态成员函数，如果静态函数需要使用泛型，那么<br>需要在函数上独立声明。</li>
<li>如果建立对象后指定了泛型的具体类型，那么该对象操作方法时，这些方法只能操作一种数据类型。</li>
<li>所以既可以在类上的泛型声明，也可以在同时在该类的方法中声明泛型。</li>
<li>静态方法不可以使用类中定义的泛型</li>
</ol>
<h2 id="3-IO"><a href="#3-IO" class="headerlink" title="3.IO"></a>3.IO</h2><pre><code>         输入流          输出流                说明
字节流    InputStream     OutputStream    字节流是处理字节的（二进制）
字符流      Reader        Writer        字符流是处理字符的
</code></pre><h2 id="4-多线程"><a href="#4-多线程" class="headerlink" title="4.多线程"></a>4.多线程</h2><h3 id="4-1-启动线程方式"><a href="#4-1-启动线程方式" class="headerlink" title="4.1 启动线程方式"></a>4.1 启动线程方式</h3><ol>
<li><p>自定义的类继承Thread类。使用代码为new MyThread().start()</p>
</li>
<li><p>自定义的类实现Runnable接口。使用代码为<br>new Thread(newMyRunnable()).start</p>
</li>
</ol>
<h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><pre><code>private static int count = 100;

public static void main(String[] args) {
    // 用继承Thread类的方式启动一个线程
    new Thread() {
        public void run() {
            synchronized (StartThreadTest.class) {
                while (count &gt; 0) {
                    count--;
                    System.out.println(Thread.currentThread() + &quot;卖了一张票，还剩&quot; + count);
                }
            }
        }
    }.start();

    // 用实现Runnable接口的方式启动一个线程
    new Thread(new Runnable() {
        public void run() {
            synchronized (StartThreadTest.class) {
                while (count &gt; 0) {
                    count--;
                    System.out.println(Thread.currentThread() + &quot;卖了一张票，还剩&quot; + count);
                }
            }
        }
    }).start();
}
</code></pre><h2 id="5-Junit"><a href="#5-Junit" class="headerlink" title="5.Junit"></a>5.Junit</h2><h3 id="5-1-Junit用途"><a href="#5-1-Junit用途" class="headerlink" title="5.1 Junit用途"></a>5.1 Junit用途</h3><ol>
<li>目前方法如果需要测试，都要在main函数方法上调用</li>
<li>目前的结果需要我们人工对比</li>
</ol>
<h3 id="5-2-Junit细节"><a href="#5-2-Junit细节" class="headerlink" title="5.2 Junit细节"></a>5.2 Junit细节</h3><ol>
<li>绿条表示通过，红条表示失败</li>
<li>在测试方法上用@Test</li>
<li>点击类测试，则测试所有类中的test方法；其他类似</li>
<li>@Test不能是静态的，且不能有形参</li>
<li>如果测试一个方法的时候需要准备测试的环境或者是清理测试的环境，可以使用@before/beforeclass @after/afterclass</li>
</ol>
<h3 id="5-3-Junit使用规范"><a href="#5-3-Junit使用规范" class="headerlink" title="5.3 Junit使用规范"></a>5.3 Junit使用规范</h3><ol>
<li>一个类如果需要测试，则该类就应该对应一个测试类，测试类的命名方法为：测试类名+test</li>
<li>一个被测试的方法一般对应一个测试的方法，测试的方法的命名是：test+方法名</li>
</ol>
<h2 id="6-内省"><a href="#6-内省" class="headerlink" title="6.内省"></a>6.内省</h2><ol>
<li>开发框架时候，会把一些东西封装到对象中。</li>
<li>变态的反射</li>
<li>使用JAVA对象属性封装程序的数据</li>
</ol>
<h2 id="7-BeanUtils"><a href="#7-BeanUtils" class="headerlink" title="7.BeanUtils"></a>7.BeanUtils</h2><ol>
<li>解决问题：<br>将对象的属性数据封装到对象中</li>
<li>好处<br> 1&gt; BeanUtils设置属性的时候，如果属性书基本数据类型，BeanUtils会自动转回数据类型<br> 2&gt; BeanUtils设置属性值得底层也是依赖SETHUO GET方法<br> 3&gt; BeanUtils设置属性值，如果设置的属性是其他的引用类型的数据，需要注册一个类型转换器</li>
<li>操作步骤<br>1&gt; 导入BeanUtils包<br>2&gt; 导入LOGGING包</li>
<li>配置文件路径问题</li>
</ol>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MQTT协议及其在物联网中的应用]]></title>
      <url>http://yoursite.com/2016/08/25/MQTT%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%9C%A8%E7%89%A9%E8%81%94%E7%BD%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong><code>MQTT</code>协议及其在物联网中的应用</strong></p>
<a id="more"></a>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr>
<blockquote>
<p>原文链接：<a href="https://zoetrope.io/tech-blog/brief-practical-introduction-mqtt-protocol-and-its-application-iot" target="_blank" rel="external">A Brief, but Practical Introduction to the MQTT Protocol and its Application to IoT</a><br>作者：Ben Howes<br>译者：孙薇<br>责编：周建丁（zhoujd@csdn.net）</p>
</blockquote>
<p>MQTT （Message Queuing Telemetry Transport，消息队列遥测传输） 是一种<a href="https://www.oasis-open.org/news/announcements/mqtt-version-3-1-1-becomes-an-oasis-standard" target="_blank" rel="external">标准化</a>的发布/订阅消息传输协议，设计于1999年，最初是为了在卫星之类的物体上使用。它是一个非常轻量级的协议，由于对带宽需求很低，从而成为了 M2M 通信或物联网应用的理想选择，现在已经成为这类场景最常见的协议之一。</p>
<p>本文会对该协议及一些使用范例做以简介，虽然没打算写成 MQTT 的综合性参考指南，但会提供足够的信息，让开发人员了解到如何安装运行这一协议。如果想要更深入地了解，可以参考 HiveMQ 所发布的<a href="http://www.hivemq.com/mqtt-essentials-wrap-up/" target="_blank" rel="external">系列文章</a>。</p>
<h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h2><p>发布/订阅，通常也被成为 pub-sub 模式是 MQTT 的核心，除了基于同一个消息代理的发布者和订阅者之外，还有一些其它节点围绕着该消息代理呈星型拓扑分布。这个模型与标准的客户端/服务器迥然不同，一开始看似有些奇怪，但它提供的去耦能力在很多情况下都有巨大的优势。</p>
<p>客户端可以发布或订阅特定的主题（topic，有些类似信息主题），根据使用它们的消息代理来决定谁会收到信息。MQTT 的主题有特定的语法，使用斜杠（/）作为分隔符，整体呈层次结构，非常类似 URL 中的路径格式，因此厨房中的温度传感器也许会发布到类似“sensors/temperature/home/kitchen” 这样的主题。</p>
<p>我们看一个例子：想象一下有一个网络，将全世界的温度传感器连接起来，提供气象服务。所有这些传感器保持与某个消息代理中间件相连接，每隔10分钟报告一次当前的温度。他们基于自身位置按照下面的格式向特定主题发布信息：</p>
<pre><code>sensors/temperature/{country}/{city}/{street name}
</code></pre><p>那么在伦敦贝克街（BakerStreet）的某个传感器就会向<br>“sensors/temperature/uk/london/baker_street”发布一条包含当前温度的信息。</p>
<p><img src="/images/8-25-1.png" alt=""></p>
<p align="center">MQTT 示例拓扑</p>

<p>气象服务需要保证历史温度数据库的数据最新，因此创建了订阅到 MQTT主题的数据库服务，数据库服务会在收到最新温度信息时发出提示。不过这里存在一个问题：数据库服务需要了解到全世界所有的温度传感器，而将每个传感器订阅到独立的主题会非常复杂，幸好 MQTT 有相应的解决方案：通配符（wildcards）。</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>在 MQTT 中有两个可用的通配符，分别是+和#，+表示匹配单一层级中的任意主题，#表示匹配任意数量的层次。因此在全球温度数据库中可能会有订阅到 sensors/temperature/#的服务，它能从全世界的任何一个传感器接收温度读数。但如果英国政府想要在自己的温度服务中利用这些数据，只要订阅到<br>sensors/temperature/uk/#，就可以限制范围，只接受英国的传感器读数。如果某个服务想要接收某个特定位置所有类型的传感器数据，可以使用类似这样的格式：</p>
<pre><code>sensors/+/uk/london/bakerstreet_
</code></pre><p>正如你所见，这是一个极优秀的模块化系统，添加新的传感器与数据库只是小事一桩。而且该系统在性能方面也很优秀，MQTT消息代理可以高度并行化并采用事件驱动，从而使得单个消息代理可以轻易扩展到每秒处理数万条信息的级别。</p>
<h2 id="服务质量（QoS）"><a href="#服务质量（QoS）" class="headerlink" title="服务质量（QoS）"></a>服务质量（QoS）</h2><p>MQTT 的设计初衷是为了在不可靠的网络中运作良好，为不同的场景提供了三个级别的服务质量，允许客户端指定自己想要的可靠性级别。</p>
<h3 id="QoS-Level-0：至多一次"><a href="#QoS-Level-0：至多一次" class="headerlink" title="QoS Level 0：至多一次"></a>QoS Level 0：至多一次</h3><p>这是最简单的级别，无需客户端确认，其可靠性与基础网络层 TCP/IP 一致。</p>
<h3 id="QoS-Level-1：至少一次，有可能重复"><a href="#QoS-Level-1：至少一次，有可能重复" class="headerlink" title="QoS Level 1：至少一次，有可能重复"></a>QoS Level 1：至少一次，有可能重复</h3><p>确保至少向客户端发送一次信息，不过也可发送多次；在接收数据包时，需要客户端返回确认消息（ACK包）。这种方式常用于传递确保交付的信息，但开发人员必须确保其系统可以处理重复的数据包。</p>
<h3 id="QoS-Level-2：只有一次，确保消息只到达一次"><a href="#QoS-Level-2：只有一次，确保消息只到达一次" class="headerlink" title="QoS Level 2：只有一次，确保消息只到达一次"></a>QoS Level 2：只有一次，确保消息只到达一次</h3><p>这是最不常见的服务质量级别，确保消息发送且仅发送一次。这种方法需要交换4个数据包，同时也会降低消息代理的性能。由于相对比较复杂，在MQTT 实现中通常会忽略这个级别，请确保在选择数据库或消息代理前检查这个问题。</p>
<p><img src="/images/8-25-2.png" alt=""></p>
<p align="center">在 MQTT 中的服务质量水平划分</p>

<h2 id="“临终遗嘱”信息"><a href="#“临终遗嘱”信息" class="headerlink" title="“临终遗嘱”信息"></a>“临终遗嘱”信息</h2><p>该协议提供了检测方式，利用KeepAlive机制在客户端异常断开时发现问题。因此当客户端电量耗尽、崩溃或者网络断开时，消息代理会采取相应措施。</p>
<p>客户端会向任意点的消息代理发送“临终遗嘱”（LWT）信息，当消息代理检测到客户端离线（连接并未关闭），就会发送保存在特定主题上的LWT信息，让其它客户端知道该节点已经意外离线。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>MQTT（及通常的物联网设备）的安全性是一个相当大的主题，之后我们会详加描述，不过在本文中仅涉及两个主要的安全性功能：身份验证与加密。</p>
<p>身份验证是通过在 MQTT连接包中发送用户名与密码来实现，几乎所有消息代理与客户端在实现时都支持这一功能。但由于信息太容易被拦截，为了避免，应当尽可能地使用安全传输层协议（TLS）。</p>
<p>协议本身未提供加密功能，但由于MQTT是在TCP上层运行的，我们可以很容易地利用TLS来提供加密连接。但这确实增加了发送与接收信息的计算复杂性，不但在约束系统中会造成问题，还会影响消息代理的性能。稍后我们会就这个问题进行更多讨论。</p>
<h2 id="消息代理软件"><a href="#消息代理软件" class="headerlink" title="消息代理软件"></a>消息代理软件</h2><p>有许多不同方式实现的可用消息代理，最常见的系统包括：</p>
<ol>
<li><p>Mosquitto —— 这是最早在生产环境中可用的消息代理之一，以 C 语言编写，提供多种配置与高性能。</p>
</li>
<li><p>Mosca —— 以Node.js编写，可嵌入Node应用或以独立可执行文件的形式运行。由于配置简单并具有可扩展性，它也是我们最喜欢的消息代理，具有高性能的优点。</p>
</li>
<li><p>RSMB —— IBM对MQTT协议的实现，也是最不常用的选项之一，不过它是一个用C语言编写的成熟系统。</p>
</li>
<li>HiveMQ —— HiveMQ是一种相对较新的消息代理，面向企业环境，在博客上有很多关于 MQTT 不错的信息。</li>
</ol>
<h2 id="客户端库"><a href="#客户端库" class="headerlink" title="客户端库"></a>客户端库</h2><p>几乎包含了所有流行语言的客户端库，想要具体了解的话，Paho项目会是你的最佳选择。这个项目隶属于Eclipse，旨在提供各种语言尽可能多样化的 MQTT 客户端实现参考。这是个很好的资源，包含以C、Java、Python、Javascript等语言编写的可用客户端。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>MQTT是一个理想的协议，它在物联网与M2M通信中的应用是无限的。如果你需要轻量级的消息传输系统，那么它会是很好的选择，而且在未来几年中很可能会流行起来。希望本文能帮助读者对 MQTT 做以了解。</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://geek.csdn.net/news/detail/73152" target="_blank" rel="external">CSDN社区</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之Shell命令]]></title>
      <url>http://yoursite.com/2016/08/25/Linux%E4%B9%8BShell%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>这是我之前学习Linux基本操作时，所记录的笔记，希望对大家会有些帮助</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】shell"><a href="#【1】shell" class="headerlink" title="【1】shell"></a>【1】shell</h3><pre><code>内核、shell、文件系统、应用程序
</code></pre><h3 id="【2】shell-脚本"><a href="#【2】shell-脚本" class="headerlink" title="【2】shell 脚本"></a>【2】shell 脚本</h3><pre><code>Shell命令的有序集合
</code></pre><h3 id="【3】创建一个脚本文件"><a href="#【3】创建一个脚本文件" class="headerlink" title="【3】创建一个脚本文件"></a>【3】创建一个脚本文件</h3><pre><code>1--- vi 1.sh
2--- chmod 777 1.sh
3--- ./1.sh

rw- rw- r--
110 110 100
6    6   4

111 111 111
7    7   7
</code></pre><h3 id="【4】变量"><a href="#【4】变量" class="headerlink" title="【4】变量"></a>【4】变量</h3><pre><code>1--- 自定义变量
    1.没有数据类型
    2.赋值的时候等号两边不能有空格
    3.使用 $ 获取变量里的内容

2--- 位置变量
    命令行的位置参数。
    位置参数从 ${10} 开始用花括号括起来

3--- 预定义变量 
    $@、$*    命令行所有的参数，除了第一个执行语句
    $#    命令行所有参数的个数，除了第一条执行语句
    $$    PID
    $?    只跟上一条shell命令有关；一般为上一条shell命令执行成功
    ：$? = 0
</code></pre><h3 id="【5】read"><a href="#【5】read" class="headerlink" title="【5】read"></a>【5】read</h3><pre><code>read从标准输入读入一行
</code></pre><h3 id="【6】expr"><a href="#【6】expr" class="headerlink" title="【6】expr"></a>【6】expr</h3><pre><code>1--- `expr $A + $B`
2--- +  -  \*   /   %    \(  \)
3--- 运算符两边留有空格
</code></pre><h3 id="【7】test"><a href="#【7】test" class="headerlink" title="【7】test"></a>【7】test</h3><pre><code>$?:满足条件结果为：0     不满足条件：1

1--- 字符串
    =   ！=    -z    -n

2--- 整数
    -eq    -ne    -lt    -le    -gt    -ge

    -a:与    -o：或

3--- 文件 
    1&gt;测文件的类型
         b     c     d    -     l     s     p    linux
        -b    -c    -d    -f    -L    -S    -p    shell脚本test

    2&gt;测文件的权限
        -r    测一个文件是否具有可读权限
        -w    测一个文件是否具有可写权限
        -x    测一个文件是否具有可执行权限
    3&gt;其它    
        -e    测试一个文件是否存在
        -s    测试name 文件是否存在且其长度不为0
        -nt    测试文件f1 是否比文件f2 更新
        -ot    测试文件f1 是否比文件f2 更旧
</code></pre><h3 id="【8】if"><a href="#【8】if" class="headerlink" title="【8】if"></a>【8】if</h3><pre><code>    if    表达式
        then  命令表
        fi     
*****************************

    if    表达式
        then  命令表
    else
        fi 
</code></pre><h3 id="【9】exit"><a href="#【9】exit" class="headerlink" title="【9】exit"></a>【9】exit</h3><pre><code>用于结束程序
</code></pre><h3 id="【10】switch"><a href="#【10】switch" class="headerlink" title="【10】switch"></a>【10】switch</h3><pre><code>case   变量   in

    模式1)
               命令表1
               ；；

    模式2 | 模式3)   
               命令表2
                ；；
    *)
               命令表n
                ；；
esac
</code></pre><h3 id="【11】循环"><a href="#【11】循环" class="headerlink" title="【11】循环"></a>【11】循环</h3><pre><code>for   变量名   in   单词表
    do
           命令表
    done

1--- for循环几次跟单词表里单词的个数有关
2--- 单词表里的单词有几个，就产生几次提取和赋值的操作，然后依次执行命令表里的
     内容
</code></pre><h3 id="【12】-用法"><a href="#【12】-用法" class="headerlink" title="【12】``用法"></a>【12】``用法</h3><pre><code>`date`
将ls命令的执行结果提取出来
</code></pre><h3 id="【13】while循环"><a href="#【13】while循环" class="headerlink" title="【13】while循环"></a>【13】while循环</h3><pre><code>while  命令或表达式
    do
        命令表
    done
</code></pre><h3 id="【14】break与continue"><a href="#【14】break与continue" class="headerlink" title="【14】break与continue"></a>【14】break与continue</h3><pre><code>break        //结束整个循环
continue    //跳出本次循环，进入下一循环
</code></pre><h3 id="【15】函数"><a href="#【15】函数" class="headerlink" title="【15】函数"></a>【15】函数</h3><pre><code>1--- 函数的调用
    直接写函数名：fun


2--- 函数的传参
    fun 10 20

3--- 函数的返回值
    只能用$?获取
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之基本操作-2]]></title>
      <url>http://yoursite.com/2016/08/25/Linux%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>这是我之前学习Linux基本操作时，所记录的笔记，希望对大家会有些帮助</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】history"><a href="#【1】history" class="headerlink" title="【1】history"></a>【1】history</h3><pre><code>1--- history &gt;&gt; 1.txt
2--- echo $HISTSIZE
3---修改历史纪录

    1&gt; HISTSIZE = 500
    2&gt; cd 
       sudo vi .bashrc
       source .bashrc
</code></pre><h3 id="【2】wc"><a href="#【2】wc" class="headerlink" title="【2】wc"></a>【2】wc</h3><pre><code>用于测文件的命令

wc -l filename
wc -w filename
wc -c filename
</code></pre><h3 id="【3】管道"><a href="#【3】管道" class="headerlink" title="【3】管道"></a>【3】管道</h3><pre><code>第一个命令的输出将作为第二个命令的输入
命令  |  命令
</code></pre><h3 id="【4】重定向输出"><a href="#【4】重定向输出" class="headerlink" title="【4】重定向输出"></a>【4】重定向输出</h3><pre><code>&gt;&gt; 以追加的模式
&gt;  以新建的模式重定向输出

命令 &gt; 文件名
</code></pre><h3 id="【5】cat"><a href="#【5】cat" class="headerlink" title="【5】cat"></a>【5】cat</h3><pre><code>将一个文件内容打印到终端上
cat filename
</code></pre><h3 id="【6】df-aTh"><a href="#【6】df-aTh" class="headerlink" title="【6】df -aTh"></a>【6】df -aTh</h3><pre><code>查看磁盘使用情况
</code></pre><h3 id="【7】一切皆文件的思想"><a href="#【7】一切皆文件的思想" class="headerlink" title="【7】一切皆文件的思想"></a>【7】一切皆文件的思想</h3><pre><code>标准输入  0
标准输出  1
标准出错  2
</code></pre><h3 id="【8】用户操作"><a href="#【8】用户操作" class="headerlink" title="【8】用户操作"></a>【8】用户操作</h3><pre><code>//关机
sudo shutdown -h now
sudo shutdown -h 12：00
sudo shutdown -h +30


//重启
sudo shutdown -r +30

//取消关机
sudo shutdown -c
</code></pre><h3 id="【9】date"><a href="#【9】date" class="headerlink" title="【9】date"></a>【9】date</h3><pre><code>date
date -s 月/日/年/
date -s 13：00：00
</code></pre><h3 id="【10】top"><a href="#【10】top" class="headerlink" title="【10】top"></a>【10】top</h3><pre><code>动态查看进程
  ps -aux
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优秀的程序员就像艺术家？]]></title>
      <url>http://yoursite.com/2016/08/24/%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%B1%E5%83%8F%E8%89%BA%E6%9C%AF%E5%AE%B6%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>优秀的程序员真的就像<code>艺术家</code>？</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<p>优秀的代码能不能算艺术品？软件工艺这一理论是否有点矫枉过正？怎么样才算是一名真正“优秀”的程序员？</p>
<p>让我们先从一个问题引入话题。假设你雇了一个水管工替换地下室里已经老化的旧水管，在整个过程中，这家伙一个劲地给你灌输这些水管是有多么多么的有艺术美感。</p>
<p><img src="/images/8-24-1.png" alt=""></p>
<p>“哇哦，看看这根管子弯曲的角度，它与墙壁对齐得是这么的漂亮！简直就是艺术品啊！”你会怎么看这个水管工？</p>
<p>写代码也是如此。再也没有比一个开发人员非要将他的代码写成艺术的模式更糟的了。上述比喻来自一篇广受好评的文章《programming is not a craft》，其作者是Dan North，“Agile troublemaker”和BDD方法的创始人。</p>
<h3 id="软件艺术"><a href="#软件艺术" class="headerlink" title="软件艺术"></a>软件艺术</h3><p>该理论的作者是 Kevlin Henney、Bob Martin、Corey Haines和Glenn Vanderburg，以下就是软件艺术的要领。</p>
<p>不仅得能正常运作，还应该精心制作 不仅可以应对变化，还能稳步增值 有良好的个体交流，以及专业人士组成的社区 和谐的客户合作关系，富有成效的伙伴关系 而现在的问题是，很多软件开发人员往往会因为太过自大反而不能很好地完成软件项目。因为自大会让他们将软件艺术捧得很高，North 说。Web服务和J2EE的项目就是这方面的例子，该项目的失败有很大一部分归咎于将软件艺术放到了过于崇高的地位。</p>
<h3 id="优秀的程序员"><a href="#优秀的程序员" class="headerlink" title="优秀的程序员"></a>优秀的程序员</h3><p>你或许早就在一些小的IT项目中就领略过上述问题的存在了。如果有开发人员坚持使用某种特定的美学技术而不愿意务实的话，那么我敢肯定他已经被所谓的“软件艺术”洗脑了。</p>
<p>好的代码应该是高效的代码，而不是因为它的美观。不管它是什么样子，只要它可靠、高效就成。换言之就是不管黑猫白猫，能抓老鼠的就是好猫。也可以归结为理解和实现简单流程的能力。</p>
<p>“一个经验丰富的编程团队完全可以在很短的时间内拿出惊人的业务成绩。只有真正的专业人士和真正的软件匠手才能在毫无头绪一团糟中，例如各种企业软件，发现被抛弃的优雅与朴素。”——Dan North 但可悲的是，即使是优秀的程序员也经常会忘记何谓优秀软件的核心功能——过分重视所谓的软件艺术往往是罪魁祸首。</p>
<p>“软件从业者——具有讽刺意味的是，尤其是一些优秀人才——却经常会犯此错误。他们爱上了软件本身，然后觉得自己已经化身成了软件艺术工匠。”——Dan North 程序员的才华</p>
<p>全文这个辩论是基于一个问题展开的，这个问题就是：软件工程是否是艺术形式的一种？</p>
<p>据说性能和效率的比重在软件行业里已经有所下降，而怎么样才能成为一名优秀的开发人员却依然没有达成共识。“伟大的程序员，只需要几个小时或者几天就能完成普通程序员需要数周或者数月才能搞定的任务。”Dan North坚持这么认为。</p>
<p>“作为买家，你难道不想知道你的系统是由大师级工匠还是临时工做的吗？你付了钱，就应该有这个知情权。所以如何辨别两者就很重要了。”——Dan North North也承认，好不好看并不能让我们正确区分两者。任何开发人员都可以自诩为软件匠手，也能做到对何为“软件架构之美”侃侃而谈。North诚挚地希望能有有识之士重新编写软件艺术的概念，这是最基础的理念问题。</p>
<h3 id="站在背后的代码"><a href="#站在背后的代码" class="headerlink" title="站在背后的代码"></a>站在背后的代码</h3><p>我们并不在乎水管长啥样——反正是埋在里面的。这同样适用于软件。无论是客户还是用户，都只关心代码是否能工作以及页面看上去ok就行。</p>
<p>“同样的，我只想请专家电工来给我的房子布线而不是一个滥竽充数的家伙，我也只想要专业程序员来写代码，” North郑重其事地说，“我最讨厌的就是，一个自命不凡自以为是的水管工一刻不停地谈论他优雅美丽富有艺术感的水管。”</p>
<p>友情链接：<a href="http://www.codeceo.com/article/art-of-programming.html" target="_blank" rel="external">点这</a>   英文原文：The <code>art</code> of good programming.</p>
<hr>
<p><strong>版权声明：本文为博主转载文章，转载请注明出处<a href="http://www.ituring.com.cn/article/263566" target="_blank" rel="external">图灵社区</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言学习-基础-5]]></title>
      <url>http://yoursite.com/2016/08/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-5/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>C语言基础笔记之五，函数和结构体.</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】函数命名格式"><a href="#【1】函数命名格式" class="headerlink" title="【1】函数命名格式"></a>【1】函数命名格式</h3><pre><code>&lt;数据类型&gt;  &lt;函数名称&gt;( &lt;形式参数说明&gt; )
{
            语句序列；
            return[(&lt;表达式&gt;)];
} 
</code></pre><h3 id="【2】-main函数"><a href="#【2】-main函数" class="headerlink" title="【2】 main函数"></a>【2】 main函数</h3><pre><code>int main （）
{
    return 0；
}

argc：命令行参数的个数
argv[]:数组，元素：指针类型 char *

$ 命令行
</code></pre><h3 id="【3】函数的声明"><a href="#【3】函数的声明" class="headerlink" title="【3】函数的声明"></a>【3】函数的声明</h3><pre><code>两种方式
1---  在main函数之前声明并编写函数体
2---  在main函数之前声明，在main函数后编写函数体(推荐)
</code></pre><h3 id="【4】return"><a href="#【4】return" class="headerlink" title="【4】return"></a>【4】return</h3><pre><code>1--- 返回一个值
2--- 结束函数的功能
3--- void 可以使用return；
4--- 一个程序中可以有多条return语句，但只执行一条
</code></pre><h3 id="【5】函数的传参"><a href="#【5】函数的传参" class="headerlink" title="【5】函数的传参"></a>【5】函数的传参</h3><pre><code>1--- 复制型传参
2--- 地址传参

3--- 传递一个地址量时，用指针变量去承接
</code></pre><h3 id="【6】指针函数"><a href="#【6】指针函数" class="headerlink" title="【6】指针函数"></a>【6】指针函数</h3><pre><code>本质：函数，返回值是一个指针
char* string_cpy(char* str1,char* str2);
</code></pre><h3 id="【7】函数的指针"><a href="#【7】函数的指针" class="headerlink" title="【7】函数的指针"></a>【7】函数的指针</h3><pre><code>本质：指针，指向一个函数名的地址
char (*p)fun();
</code></pre><h3 id="【7】结构体"><a href="#【7】结构体" class="headerlink" title="【7】结构体"></a>【7】结构体</h3><pre><code>struct  结构体类型名
    {
        数据类型　　　成员名1；
        数据类型　　　成员名2；
        ：
        数据类型　　　成员名n；
     }s1；                 

            //s1: 全局变量
   struct stu s2 ；       //s2: 局部变量
</code></pre><h3 id="【8】访问成员"><a href="#【8】访问成员" class="headerlink" title="【8】访问成员"></a>【8】访问成员</h3><pre><code>变量名.成员名
</code></pre><h3 id="【9】初始化"><a href="#【9】初始化" class="headerlink" title="【9】初始化"></a>【9】初始化</h3><pre><code>struct  结构体名 变量名={初始数据表}；

struct  结构体名
{
        成员列表；

}变量名={初始数据表}； 
</code></pre><h3 id="【10】无名结构体"><a href="#【10】无名结构体" class="headerlink" title="【10】无名结构体"></a>【10】无名结构体</h3><pre><code>1--- 没有结构体类型名
2--- 不可以定义局部变量
</code></pre><h3 id="【11】结构体嵌套"><a href="#【11】结构体嵌套" class="headerlink" title="【11】结构体嵌套"></a>【11】结构体嵌套</h3><pre><code>1--- 成员所属的数据类型是 结构体类型
2--- 内部的结构体通常定义为无名结构体
</code></pre><h3 id="【12】结构体数组"><a href="#【12】结构体数组" class="headerlink" title="【12】结构体数组"></a>【12】结构体数组</h3><pre><code>本质：数组，元素：结构体类型
</code></pre><h3 id="【13】结构体指针"><a href="#【13】结构体指针" class="headerlink" title="【13】结构体指针"></a>【13】结构体指针</h3><pre><code>本质是指针，指向一个结构体数据
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言学习-基础-4]]></title>
      <url>http://yoursite.com/2016/08/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>C语言基础笔记之四，<code>指针</code>.</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】指针概述"><a href="#【1】指针概述" class="headerlink" title="【1】指针概述"></a>【1】指针概述</h3><pre><code>1--- 指针变量
    用于存放地址量的变量

2--- 指针
    指针变量、地址常量通称为指针

3--- *
    1--- 定义
    2--- 指针解引用：通过地址获取其内容

4--- 指针加减：加减的是单位长度
     单位长度：指针所指向的数据所占有的字节大小
</code></pre><h3 id="【2】数组"><a href="#【2】数组" class="headerlink" title="【2】数组"></a>【2】数组</h3><pre><code>a[i]    &lt;===&gt;   *(a+i)
*(p+i)  &lt;===&gt;   p[i]
[]:指针加上单位长度后，取*运算

a:地址常量
p：指针变量
</code></pre><h3 id="【3】atoi"><a href="#【3】atoi" class="headerlink" title="【3】atoi"></a>【3】atoi</h3><pre><code>功能：将数值形式的字符串转换成整形数据
头文：&lt;stdlib.h&gt;
参数：char *
返值：int
特点：遇到非数值形式的数据停止转换
</code></pre><h3 id="【4】二维数组"><a href="#【4】二维数组" class="headerlink" title="【4】二维数组"></a>【4】二维数组</h3><pre><code>int a[3][4]
1--- a：行地址，加一移动一行
     a[0]：列地址，加一移动一列
2---
     a[i][j]   &lt;===&gt;  *(a[i]+j)  &lt;===&gt; *(*(a+i)+j)
</code></pre><h3 id="【5】sizeof"><a href="#【5】sizeof" class="headerlink" title="【5】sizeof"></a>【5】sizeof</h3><pre><code>指针占四字节空间，与存储类型的数据没有关系
</code></pre><h3 id="【6】指针数组"><a href="#【6】指针数组" class="headerlink" title="【6】指针数组"></a>【6】指针数组</h3><pre><code>int *p[3];

1--- 本质：数组，元素是指针类型
2--- 三个元素：p[0]、p[1]、p[2]
</code></pre><h3 id="【7】数组指针"><a href="#【7】数组指针" class="headerlink" title="【7】数组指针"></a>【7】数组指针</h3><pre><code>int a[4][3];
int （*p）[3];
1--  p[i][j]   &lt;===&gt;  *(p[i]+j)  &lt;===&gt; *(*(p+i)+j)
     a[i][j]   &lt;===&gt;  *(a[i]+j)  &lt;===&gt; *(*(a+i)+j)

2--  p:指针变量，a：地址常量
</code></pre><h3 id="【8】-amp-与"><a href="#【8】-amp-与" class="headerlink" title="【8】&amp;与*"></a>【8】&amp;与*</h3><pre><code>互为逆运算
</code></pre><h3 id="【9】二级指针"><a href="#【9】二级指针" class="headerlink" title="【9】二级指针"></a>【9】二级指针</h3><pre><code>用于存放一级指针的地址
int a = 10;
int *p = &amp;a;
int **q = &amp;p;
</code></pre><h3 id="【10】const"><a href="#【10】const" class="headerlink" title="【10】const"></a>【10】const</h3><pre><code>const int * p；
常量化*p;

int * const p；
常量化p;
</code></pre><h3 id="【11】void"><a href="#【11】void" class="headerlink" title="【11】void *"></a>【11】void *</h3><pre><code>泛型指针
</code></pre><h3 id="【12】NULL"><a href="#【12】NULL" class="headerlink" title="【12】NULL"></a>【12】NULL</h3><pre><code>int *p = NULL；

防止野指针的形成
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言学习-基础-3]]></title>
      <url>http://yoursite.com/2016/08/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>C语言基础笔记之三，数组.</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】数组"><a href="#【1】数组" class="headerlink" title="【1】数组"></a>【1】数组</h3><pre><code>多个数据类型相同的数据集合。
1--- 有数组一定有元素
2--- 数组元素的类型相同
3--- 元素存储是连续的
</code></pre><h3 id="【2】数组的定义"><a href="#【2】数组的定义" class="headerlink" title="【2】数组的定义"></a>【2】数组的定义</h3><pre><code>1--- 常量    
    int a[3];

2--- 定义宏
    #define N 5
    int b[N];

3--- 变量（不可以初始化）
    int i = 3;
    int c[i];
</code></pre><h3 id="【3】数组的初始化"><a href="#【3】数组的初始化" class="headerlink" title="【3】数组的初始化"></a>【3】数组的初始化</h3><pre><code>1--- 全部赋值
2--- 部分赋值，没有赋值的部分默认初始化为0
3--- 不赋值，元素为随机值（static修饰的除外）
4--- int a[] = {1,2,3,4}; &lt;===&gt; int a[4];
</code></pre><h3 id="【4】遍历"><a href="#【4】遍历" class="headerlink" title="【4】遍历"></a>【4】遍历</h3><pre><code>使用循环语句遍历
int a[10] = {1,1,2,3,45,34,5323,341,432};
int i = 0;
for(i=0;i&lt;10;i++)
{
  printf(&quot;%d&quot;,a[i]);
}
</code></pre><h3 id="【5】数组名"><a href="#【5】数组名" class="headerlink" title="【5】数组名"></a>【5】数组名</h3><pre><code>int a[N] = {0};

1--- 代表数组首元素的地址
2--- 
    N * sizeof（int）；
    sizeof（a）；
    N = sizeof(a) / sizeof（int）；
</code></pre><h3 id="【6】冒泡排序"><a href="#【6】冒泡排序" class="headerlink" title="【6】冒泡排序"></a>【6】冒泡排序</h3><pre><code>（1）比较第一个数与第二个数，若为逆序a[0]&gt;a[1]，则交换；然后比较第二个数与第三个数；依次类推，直至第n-1个数和第n个数比较为止——第一趟冒泡排序，结果最大的数被安置在最后一个元素位置上

（2）对前n-1个数进行第二趟冒泡排序，结果使次大的数被安置在第n-1个元素位置

（3）重复上述过程，共经过n-1趟冒泡排序后，排序结束
</code></pre><h3 id="【7】二维数组"><a href="#【7】二维数组" class="headerlink" title="【7】二维数组"></a>【7】二维数组</h3><pre><code>int a[N][M]；

1--- N：代表N行，M：代表M列
2--- a：数组名，首元素的地址
3--- a[0]、a[1]、a[2]    代表每一行的首地址
4--- 行数可以省略，列项不可以省略。
    int a[][3] = {0，1，2，3}； 《==》 int a[2][3];
</code></pre><h3 id="【8】字符型数组"><a href="#【8】字符型数组" class="headerlink" title="【8】字符型数组"></a>【8】字符型数组</h3><pre><code>1--- char a[8] = {&apos;A&apos;};
     char b[9] = &quot;hello&quot;;
     char c[ ] = &quot;world&quot;;

2--- puts(a);    
     gets(a);
</code></pre><h3 id="【9】strcpy"><a href="#【9】strcpy" class="headerlink" title="【9】strcpy"></a>【9】strcpy</h3><pre><code>格式：strcpy(字符数组1,字符串2)
头文：&lt;string.h&gt;
功能：将字符串2，拷贝到字符数组1中去
返值：返回字符数组1的首地址
说明：字符数组1必须足够大
        ?拷贝时‘\0’一同拷贝
</code></pre><h3 id="【10】strcat"><a href="#【10】strcat" class="headerlink" title="【10】strcat"></a>【10】strcat</h3><pre><code>格式：strcat(字符数组1,字符数组2)
头文：&lt;string.h&gt;
功能：把字符数组2连到字符数组1后面
返值：返回字符数组1的首地址
说明：字符数组1必须足够大
          新串最后加‘\0’
</code></pre><h3 id="【11】strlen"><a href="#【11】strlen" class="headerlink" title="【11】strlen"></a>【11】strlen</h3><pre><code>格式：strlen(字符数组)
功能：计算字符串长度
返值：返回字符串实际长度，不包括‘\0’在内
</code></pre><h3 id="【12】strcmp"><a href="#【12】strcmp" class="headerlink" title="【12】strcmp"></a>【12】strcmp</h3><pre><code>格式：strcmp(字符串1,字符串2)
功能：比较两个字符串
比较规则：对两串从左向右逐个字符比较（ASCII码），直到遇到不同字符或‘\0’为止
返值：返回int型整数，
    a. 若字符串1 &lt;  字符串2， 返回负数
            b. 若字符串1 &gt;  字符串2， 返回正数
            c. 若字符串1 == 字符串2，返回0
说明：字符串比较不能用“==”,必须用strcmp
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言学习-基础-2]]></title>
      <url>http://yoursite.com/2016/08/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>C语言基础笔记之二，常用的一些输入输出函数以及控制语句.</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】存储模型"><a href="#【1】存储模型" class="headerlink" title="【1】存储模型"></a>【1】存储模型</h3><pre><code>&lt;存储类型&gt;    &lt;数据类型 &gt;    &lt;变量名&gt; ； 

1--- 生命期：与程序同步，与函数同步
2--- 作用域

    auto     默认存储类型

    static   1&gt; 与程序同步
             2&gt; 默认初始化为0
             3&gt; 只初始化一次

    register 1&gt; 数据存储在寄存器中
              2&gt; 运算的速度快

    extern    外部声明
</code></pre><h3 id="【2】putchar"><a href="#【2】putchar" class="headerlink" title="【2】putchar"></a>【2】putchar</h3><pre><code>格式: putchar( c )
参数: c为字符常量、变量或表达式
功能：把字符c输出到显示器上
返值：正常，输出字符的的ASCII值；
</code></pre><h3 id="【3】getchar"><a href="#【3】getchar" class="headerlink" title="【3】getchar"></a>【3】getchar</h3><pre><code>格式: getchar( )
功能：从键盘读一字符
返值：正常，返回读取的代码值；出错,返回EOF(-1)

1--- 可以用于垃圾字符的回收。
</code></pre><h3 id="【4】printf"><a href="#【4】printf" class="headerlink" title="【4】printf"></a>【4】printf</h3><pre><code>格式：printf(“格式控制串”，输出表)
功能：按指定格式向显示器输出数据
返值：正常，返回输出字节数；出错，返回EOF(-1）


1--- 输出的数据控制
    d o x u        整数
    c        字符
    f e        浮点型、指数

    s        字符串。传递一个地址量，字符串常量当成地址进行数据处理
    p        打印数据的地址
    %%        打印%

2--- 输出的格式控制

    正整数：控制数据显示的宽度
    -     ：使数据左对齐
    +     ：正数显示符号
    0     ：空位用0补全
    .3    ：控制浮点型数据的精度，控制字符串输出的字符数


3--- 返回值

    为输出字符的个数（字节数）
</code></pre><h3 id="【5】scanf"><a href="#【5】scanf" class="headerlink" title="【5】scanf"></a>【5】scanf</h3><pre><code>格式：scanf(“格式控制串”，地址表）
功能：按指定格式从键盘读入数据，存入地址表指定存储单元中,并按回车键结束
返值：正常，返回成功获取数据的个数

    d o x         整形数据
    c        字符
    f        浮点型
    s [^\n]        字符串
</code></pre><h3 id="【6】puts"><a href="#【6】puts" class="headerlink" title="【6】puts"></a>【6】puts</h3><pre><code>格式：puts(字符数组)
功能：向显示器输出字符串（输出完，换行）
说明：字符数组必须以‘\0’结束
反值：输出字符的个数

1--- 自带换行
2--- 遇到&apos;\0&apos;结束输出
3--- 数组名代表数组首元素的地址
</code></pre><h3 id="【7】gets"><a href="#【7】gets" class="headerlink" title="【7】gets"></a>【7】gets</h3><pre><code>格式：gets(字符数组)
功能：从键盘输入一以回车结束的字符串放入字符数组中，并自动加‘\0’
说明：输入串长度应小于字符数组维数

1--- 只以‘\n’作为字符串的结束标志
2--- 会在字符串末尾主动加一个‘\0’
</code></pre><h3 id="【8】数学函数"><a href="#【8】数学函数" class="headerlink" title="【8】数学函数"></a>【8】数学函数</h3><pre><code>double sqrt（double）；

1--- 头文件：&lt;math.h&gt;
2--- 功能  ：开方
3--- gcc 1.c -lm    //链接库操作linux下编译
     ./a.out
</code></pre><h3 id="【9】if"><a href="#【9】if" class="headerlink" title="【9】if"></a>【9】if</h3><pre><code>if(表达式1) 
    {语句块1}

else if(表达式2） 
    {语句块3} 

else
    {语句块2}

1--- else只跟上一个相邻的if有关
</code></pre><h3 id="【10】switch语句"><a href="#【10】switch语句" class="headerlink" title="【10】switch语句"></a>【10】switch语句</h3><pre><code>switch (表达式)
{  case 常量表达式1:语句块1；break;
     case 常量表达式2:语句块2; break;
        ….
      case 常量表达式n:语句块n; break;
      default    :语句块n+1
  }

1--- 表达式的结果：整形，字符型
2--- case语句后的表达式必须是常量
</code></pre><h3 id="【11】goto"><a href="#【11】goto" class="headerlink" title="【11】goto"></a>【11】goto</h3><pre><code>goto 标识符；（很少用）
</code></pre><h3 id="【12】while循环"><a href="#【12】while循环" class="headerlink" title="【12】while循环"></a>【12】while循环</h3><pre><code>while（条件表达式）
{

}

1--- 表达式为真时执行循环体里的内容，为假立刻跳出while循环
</code></pre><h3 id="【13】for循环"><a href="#【13】for循环" class="headerlink" title="【13】for循环"></a>【13】for循环</h3><pre><code>for(expression1； expression2； expression3)
{
         statements;
}


1--- expression1：最先执行，只执行一次，循环变量的赋值操作
2--- expression2：控制循环的条件，
3--- expression3：更改循环变量
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安卓学习资料]]></title>
      <url>http://yoursite.com/2016/08/23/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>上传一些自己学习安卓时相关的资料，有需要的伙伴可以自己查看</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="安卓视频资料"><a href="#安卓视频资料" class="headerlink" title="安卓视频资料"></a>安卓视频资料</h3><ol>
<li>黑马程序员74期：<br><a href="http://pan.baidu.com/s/1eSAyHqy" target="_blank" rel="external">itheima</a> 密码： <code>go5z</code></li>
<li>传智Java33期：<br><a href="http://pan.baidu.com/s/1ge7yA9X" target="_blank" rel="external">itcast</a>  密码: <code>8a0i</code></li>
</ol>
<h3 id="安卓学习笔记"><a href="#安卓学习笔记" class="headerlink" title="安卓学习笔记"></a>安卓学习笔记</h3><ol>
<li>谷歌官方文档翻译篇：<br><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">google</a></li>
<li>黑马笔记<br><a href="http://pan.baidu.com/s/1nvfInNF" target="_blank" rel="external">note</a> 密码: <code>rfwv</code></li>
</ol>
<h3 id="安卓开源社区"><a href="#安卓开源社区" class="headerlink" title="安卓开源社区"></a>安卓开源社区</h3><ol>
<li>CSDN安卓社区<br><a href="http://geek.csdn.net/mobile" target="_blank" rel="external">CSDN</a> </li>
<li>安卓BUS<br><a href="http://www.apkbus.com/" target="_blank" rel="external">Bus</a></li>
<li>开源中国<br><a href="http://www.oschina.net/" target="_blank" rel="external">os-china</a></li>
</ol>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux之基本操作-1]]></title>
      <url>http://yoursite.com/2016/08/23/Linux%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>这是我之前学习Linux基本操作时，所记录的笔记，希望对大家会有些帮助</strong><br><a id="more"></a></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】打开终端"><a href="#【1】打开终端" class="headerlink" title="【1】打开终端"></a>【1】打开终端</h3><pre><code>1--- ctrl + alt + t

2--- ctrl + shift + t
     ctrl + shift + n    //在已打开终端基础上使用
</code></pre><h3 id="【2】目录标识"><a href="#【2】目录标识" class="headerlink" title="【2】目录标识"></a>【2】目录标识</h3><pre><code>linux @ ubuntu: ~ $
用户名  主机名 路径

~    //家目录，主目录  &lt;==&gt; /home/linux/
/    //根目录，一切文件的起源
$    //普通用户命令提示符
#    //超级用户命令提示符
</code></pre><h3 id="【3】su"><a href="#【3】su" class="headerlink" title="【3】su"></a>【3】su</h3><pre><code>su 用户名    //切换用户
root        //超级用户
exit        //退出当前用户
</code></pre><h3 id="【4】路径切换"><a href="#【4】路径切换" class="headerlink" title="【4】路径切换"></a>【4】路径切换</h3><pre><code>..        //上一级路径
.        //当前路径
</code></pre><h3 id="【5】ls"><a href="#【5】ls" class="headerlink" title="【5】ls"></a>【5】ls</h3><pre><code>用于显示当前路径下所有文件
ls 
ls -l    //以列表的形式，显示文件的详细信息
</code></pre><h3 id="【6】文件的信息"><a href="#【6】文件的信息" class="headerlink" title="【6】文件的信息"></a>【6】文件的信息</h3><pre><code>文件类型（7种）
    bcd-lsp
    linux：一切皆文件的思想

    b    块设备文件
    c    字符设备文件
    d    目录
    -    普通文件
    l    链接文件
    s    套接字文件
    p    管道文件

文件的权限
    r    可读权限
    w    可写权限
    x    可执行权限
    -    没有该权限
</code></pre><h3 id="【7】cd"><a href="#【7】cd" class="headerlink" title="【7】cd"></a>【7】cd</h3><pre><code>cd ..    //切换到上一级目录
cd ~    //切换到家目录
cd    //直接切换到家目录
cd /    //直接切换到跟目录
cd -    //切换到上一次路径
</code></pre><h3 id="【8】mkdir"><a href="#【8】mkdir" class="headerlink" title="【8】mkdir"></a>【8】mkdir</h3><pre><code>mkdir dir    //创建目录
rmdir dir    //删除空目录
rm    dir -rf    //删除目录
rm    filename    //删除文件
</code></pre><h3 id="【10】清屏"><a href="#【10】清屏" class="headerlink" title="【10】清屏"></a>【10】清屏</h3><pre><code>ctrl + l        
clear
</code></pre><h3 id="【11】路径"><a href="#【11】路径" class="headerlink" title="【11】路径"></a>【11】路径</h3><pre><code>绝对路径：从根目录开始，当前文件所在的位置
相对路径：从当前目录到想要到的位置(. 和 ..)
</code></pre><h3 id="【12】touch"><a href="#【12】touch" class="headerlink" title="【12】touch"></a>【12】touch</h3><pre><code>1--- 用于创建文件    
    touch 1.c

2--- 更新文件的时间戳（文件名已存在）
</code></pre><h3 id="【13】echo"><a href="#【13】echo" class="headerlink" title="【13】echo"></a>【13】echo</h3><pre><code>1--- 向终端打印字符串
    echo “hello”
    echo hello
</code></pre><h3 id="【14】vim文本编辑器"><a href="#【14】vim文本编辑器" class="headerlink" title="【14】vim文本编辑器"></a>【14】vim文本编辑器</h3><pre><code>1--- 进入编辑器
    vi filename    

2--- 进入输入模式
    i    //从光标所在位置前面开始插入    
    a    //从光标所在位置后面开始新增
    A    //从光标所在行最后面的地方开始新增
    I    //从光标所在行最前面的地方开始新增
    o    //在光标所在列下新增一列并进入输入模式 
    O    //在光标所在列上方新增一列并进入输入模式

3--- 命令模式
    Esc 进入命令模式

    1&gt; yy    复制
    2&gt; p    粘贴
    3&gt; dd    剪切
    4&gt; 2yy    复制两行
    5&gt; 5dd    剪切5行

    6&gt; u    撤销
    7&gt; ctrl + r    反撤销
    8&gt; gg    文本的第一行
    9&gt; G    文本的最后一行

4--- 底行模式
    Esc ：进入底行模式

    1&gt; w    保存
    2&gt; w!    强制保存
    3&gt; q    退出
    4&gt; q!    强制退出
    5&gt; wq    保存退出
    6&gt; wqa    全部保存退出

    7&gt; vsp filename     //左右分屏显示文件
    8&gt; sp filename         //上下分屏显示文件

    9&gt; %s/chong/Chong/g     //修改文件特定的字符串
</code></pre><h3 id="【15】cat"><a href="#【15】cat" class="headerlink" title="【15】cat"></a>【15】cat</h3><pre><code>1--- cat filename
2--- 将文件的内容打印到终端上
</code></pre><h3 id="【16】cp"><a href="#【16】cp" class="headerlink" title="【16】cp"></a>【16】cp</h3><pre><code>1--- cp filename
2--- 文件的拷贝
</code></pre><h3 id="【17】mv"><a href="#【17】mv" class="headerlink" title="【17】mv"></a>【17】mv</h3><pre><code>1--- mv filename ..
     mv [文件名] [路径]
2--- 用于文件的移动
</code></pre><h3 id="【18】编译C文件"><a href="#【18】编译C文件" class="headerlink" title="【18】编译C文件"></a>【18】编译C文件</h3><pre><code>1--- vi hello.c        //建立.c文件
    main + Tab
2--- gcc hello.c    //编译源文件
    a.out
3--- ./a.out        //执行可执行文件
</code></pre><h3 id="【19】Gcc"><a href="#【19】Gcc" class="headerlink" title="【19】Gcc"></a>【19】Gcc</h3><pre><code>1--- gcc hello.c -o hello    //指定输出的文件名

2--- 四步完整的编译流程
    1&gt; 预处理：主要进行宏替换以及头文件的包含展开
        gcc -E Hello.c -o Hello.i

    2&gt; 编译：编译生成汇编文件，会检查语法是否有错误
              gcc -S Hello.i -o Hello.s

    3&gt; 汇编：将汇编文件编译生成目标文件(二进制文件)
        gcc -c Hello.s -o Hello.o

    4&gt; 链接：链接库函数，生成可执行文件
        gcc Hello.o -o Hello

3--- 两步操作

    1&gt; gcc -c hello.c -o hello.o
    2&gt; gcc hello.o -o hello
</code></pre><h3 id="【20】字符表示"><a href="#【20】字符表示" class="headerlink" title="【20】字符表示"></a>【20】字符表示</h3><pre><code>字符：使用单引号括起来的
</code></pre><h3 id="【21】ASCII"><a href="#【21】ASCII" class="headerlink" title="【21】ASCII"></a>【21】ASCII</h3><pre><code>1--- man ASCII        //查看ASCII码
2--- putchar(67);    //向终端打印一个字符
     putchar(&apos;B&apos;);
3--- 
    10     ‘\n&apos;
    32    ‘空格’

    65-90    ‘A’ - ‘Z’
    97-122    ‘a’ -    ‘z’
    48-57    ‘0’ - ‘9’

    大写字符与小写字符相差32
</code></pre><h3 id="【22】词法符号"><a href="#【22】词法符号" class="headerlink" title="【22】词法符号"></a>【22】词法符号</h3><pre><code>1--- 关键字
2--- 命名规则
    1) 标识符由一个或多个字母、数字或下划线组成
       2）标识符的第一个字符必须是字母或下划线
       3）标识符不能与任何关键字相同
</code></pre><h3 id="【23】代码跟踪调试"><a href="#【23】代码跟踪调试" class="headerlink" title="【23】代码跟踪调试"></a>【23】代码跟踪调试</h3><pre><code>1&gt; __FILE__        //代码所在文件
2&gt; __LINE__        //代码所在行
3&gt; __FUNCTION__        //代码所在函数
</code></pre><hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScrip发展史]]></title>
      <url>http://yoursite.com/2016/08/23/JavaScrip%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p><strong>最近正在学JAVAEE，了解了一些Javascrip的发展，所以给大家分享一个Javascrip趣事</strong></p>
<a id="more"></a>
<h1 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h1><hr>
<h2 id="为什么会有Js"><a href="#为什么会有Js" class="headerlink" title="为什么会有Js?"></a>为什么会有Js?</h2><blockquote>
<p>1994年之前，用户使用浏览器没有交互提醒功能，用户提交的表单只能到服务器验证，那时候网速只有7-8Kb/s，每次提交都可能要花上很多时间，用户体验特别差，所以当时的微软跟网景（火狐的前身，刚成立）等公司看到了商机。虽然是商机，但是由于盖茨认为未来是视窗的世界（PC桌面应用），因此没有投入开发，而去全力开发Windows,只有网景对其进行开发。</p>
</blockquote>
<h2 id="网景与微软的故事"><a href="#网景与微软的故事" class="headerlink" title="网景与微软的故事"></a>网景与微软的故事</h2><blockquote>
<p> 1995年网景推出了一款浏览器（导航者）和liveScript(校验功能)，非常受欢迎，但是还不是很满意，于是和sun公司合作，借用了java的名字，把liveScirpt改名成javascript。鼎盛时期网景大概占据了浏览器市场的70%市场份额，并且上市，股价一律飙升。</p>
<p>这时候盖茨知错了，于是找网景的老大的谈判，要求合作，但是网景不同意这个提议。于是微软财大气粗，花了一年投了20亿美元去开发Jscript脚本语言（20亿用于挖工程师、代码什么的、捆绑销售+免费），而当时一款浏览器使用需要45美元，所以很快98年网景就支撑不住，被美国在线的公司收购，于03年宣布破产，因此又一家优秀的公司被微软搞垮。</p>
<p>公司被不正当搞垮，网景的公司肯定不高兴，于是上告微软，但是迟迟告不下来，直到快要破产的时候，微软才宣布赔款，大约花了几亿美金。当然网景员工肯定不会罢休，于是拿出2千万美金成立了一个基金会（Mozilla ）谋智以及把浏览器的源代码全部公开，目的就是为了对抗微软。也因此，到了最后谋智基金会开发出火狐浏览器，至此，这个故事就结束了。</p>
</blockquote>
<h2 id="JavaScript标准"><a href="#JavaScript标准" class="headerlink" title="JavaScript标准"></a>JavaScript标准</h2><blockquote>
<p>1997年欧洲的计算机协议（ECMA）组织出来给javascript规定协议。</p>
<ol>
<li>ECMAScirpt(规范了基本的语法而已)</li>
<li>BOM （浏览器对象模型）</li>
<li>DOM  (文档对象模型)</li>
</ol>
</blockquote>
<h1 id="JavaScript特点"><a href="#JavaScript特点" class="headerlink" title="JavaScript特点"></a>JavaScript特点</h1><hr>
<blockquote>
<ol>
<li>跨平台</li>
<li>安全性。 （javascript的代码不能直接访问硬盘的内容） </li>
</ol>
</blockquote>
<h1 id="JavaScript与Java区别"><a href="#JavaScript与Java区别" class="headerlink" title="JavaScript与Java区别"></a>JavaScript与Java区别</h1><hr>
<blockquote>
<ol>
<li>javascript是属于网景公司产品， java是sun公司的产品。</li>
<li>javascript是基于对象的语言，java是面向对象的语言。 </li>
<li>javascript是解释型语言，java是解释、编译型语言。</li>
<li>javascript是弱类型语言， java 是强类型语言。</li>
<li>java中声明变量 的时候必须要明确该变量的数据类型。</li>
<li>javascript声明变量不需要明确是何种数据类型，任何的变量都是使用一个关键字var去声明即可。</li>
</ol>
</blockquote>
<hr>
<p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言学习-基础-1]]></title>
      <url>http://yoursite.com/2016/08/23/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><strong>这是C语言的一些笔记，我会陆续上传到博客，希望对大家的学习以及复习有些帮助.</strong></p>
<a id="more"></a>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr>
<h3 id="【1】定义变量"><a href="#【1】定义变量" class="headerlink" title="【1】定义变量"></a>【1】定义变量</h3><pre><code>数据类型 变量名；
</code></pre><h3 id="【2】bool"><a href="#【2】bool" class="headerlink" title="【2】bool"></a>【2】bool</h3><pre><code>#include &lt;stdbool.h&gt;
</code></pre><h3 id="【3】char"><a href="#【3】char" class="headerlink" title="【3】char"></a>【3】char</h3><pre><code>1--- 占1个字节

2--- signed char a；            -128 ~ 127

          0000 0000    0
          0111 1111    127
          1111 1111    -127
          1000 0000    -128
3--- unsigned char b；        0~255
</code></pre><h3 id="【4】数据的存储"><a href="#【4】数据的存储" class="headerlink" title="【4】数据的存储"></a>【4】数据的存储</h3><pre><code>存储时：    源码         反码        补码

正数    0000 0101  0000 0101    0000 0101    char a = 5；

负数    1000 0101  1111 1010    1111 1011    char b = -5；

反码：符号位不变，其它位取反
补码：反码加一

读取时：    补码          反码       源码
</code></pre><h3 id="【5】"><a href="#【5】" class="headerlink" title="【5】"></a>【5】</h3><pre><code>char c = 129；
    （存储）因为是正数，源码、反码、补码相同
      源码：1000 0001
      反码：1000 0001
      补码：1000 0001

    （读取）因为是signed类型，最高位为符号位
      补码：1000 0001
      反码：1000 0000
      补码：1111 1111    （-127）

 unsigned char d = -1；
        （存储）
      源码：1000 0001
      反码：1111 1110
      补码：1111 1111

        （读取）因为是unsigned类型，都是正数
      补码：1111 1111
      反码：1111 1111
      源码：1111 1111（255）
</code></pre><h3 id="【6】整形数据"><a href="#【6】整形数据" class="headerlink" title="【6】整形数据"></a>【6】整形数据</h3><pre><code>1--- int   占4个字节    
2--- short 占2个字节
3--- long  占4字节（32位系统）
</code></pre><h3 id="【7】浮点型数据"><a href="#【7】浮点型数据" class="headerlink" title="【7】浮点型数据"></a>【7】浮点型数据</h3><pre><code>1--- float
    1&gt; 12.45
    2&gt; 15e-3    《==》 15*10^-3
    3&gt; 占4字节

2--- double
    1&gt; 占8字节
</code></pre><h3 id="【8】printf"><a href="#【8】printf" class="headerlink" title="【8】printf"></a>【8】printf</h3><pre><code>%d    整形
%c    字符型&apos;A&apos;
%s    字符串
%f    浮点型    
</code></pre><h3 id="【9】常量"><a href="#【9】常量" class="headerlink" title="【9】常量"></a>【9】常量</h3><pre><code>1--- 整数形式
    34  034  0x34

2--- 浮点型
    23.34

3--- 指数型
    13e+5        《==》 13*10^5

4--- 字符型
    ‘A’

5--- 字符串常量
    “hello”
     &quot;A&quot;
    //字符串以‘\0’作为结束标志

6--- 定义宏
    1--- #define N 5
    2--- 对一个常量进行命名
</code></pre><h3 id="【10】强制类型转换"><a href="#【10】强制类型转换" class="headerlink" title="【10】强制类型转换"></a>【10】强制类型转换</h3><pre><code>float a = 32， b = 45；

printf（“%d\n”,（int)(a+b）);
</code></pre><h3 id="【11】运算符"><a href="#【11】运算符" class="headerlink" title="【11】运算符"></a>【11】运算符</h3><pre><code>1--- 算数运算符
    +  -  *  /  %（参与运算必须是整形数据）  
    ++(自增)  --（自减）

2--- 关系运算符
    1. 结果只有两个：1 或 0
    2. &gt;   &gt;=  &lt;   &lt;=   ==   !=

3--- 逻辑运算符
    1. 结果只有两个：1 或 0
    2. 短路原则：当一个等式可以决定整个等式的结果，就不去执行其它运算
        &amp;&amp;    与：一假则假
        ||    或：一真则真
        ！    非
4--- 位运算符
    1&gt; 取反    ~
    2&gt; 位与    &amp;
    3&gt; 位或 |
    4&gt; 异或 ^   相同为0， 不同为1
            b    0000 0101
            c    0000 0011
            ——————————
            d    0000 0110
    5&gt; 位右移
        d &gt;&gt; 1        //向右移动1位

        d / 2^n

       位左移
        d &lt;&lt; 2        //向左移动2位

        d * 2^n
5--- 复合运算符
    算数运算符、位运算符
</code></pre><h3 id="【12】三步运算-完成数据交换"><a href="#【12】三步运算-完成数据交换" class="headerlink" title="【12】三步运算,完成数据交换"></a>【12】三步运算,完成数据交换</h3><pre><code>a ^= b;
b ^= a;
a ^= b;

    1--- 参与运算的是变量
    2--- 针对于基本数据类型
    3--- 变量需要交替互换
</code></pre><h3 id="【13】条件运算符"><a href="#【13】条件运算符" class="headerlink" title="【13】条件运算符"></a>【13】条件运算符</h3><pre><code>1--- &lt;表达式1&gt;  ?  &lt;表达式2&gt;  :  &lt;表达式3&gt;
2--- 
    表达式1为真，执行表达式2；
    表达式1为假，执行表达式3；
</code></pre><p>###【14】逗号表达式</p>
<pre><code>逗号表达式的结果与最后一个表达式有关
</code></pre><h3 id="【15】sizeof"><a href="#【15】sizeof" class="headerlink" title="【15】sizeof"></a>【15】sizeof</h3><pre><code>求一个数据或类型占用空间的大小，以字节为单位
</code></pre><h3 id="【16】优先级"><a href="#【16】优先级" class="headerlink" title="【16】优先级"></a>【16】优先级</h3><pre><code>1    （）
2    ++ -- ~ ！    从右向左
4    * / %
5    + -
    关系运算符
    位运算
    逻辑运算
    赋值运算    从右向左
    ，
</code></pre><h3 id="【17】存储模型"><a href="#【17】存储模型" class="headerlink" title="【17】存储模型"></a>【17】存储模型</h3><pre><code>&lt;存储类型&gt;    &lt;数据类型 &gt;    &lt;变量名&gt; ； 

1--- 生命期：与程序同步，与函数同步
2--- 作用域

    auto    默认存储类型

    static  1&gt; 与程序同步
        2&gt; 默认初始化为0
        3&gt; 只初始化一次
</code></pre><p><strong>版权声明：本文为博主原创文章，转载请注明出处<a href="https://kidsea.github.io/" target="_blank" rel="external">KidSea</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[my new post]]></title>
      <url>http://yoursite.com/2016/08/21/my-new-post/</url>
      <content type="html"><![CDATA[<h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><hr>
<ul>
<li>很早之前，就想做一个博客，可是一直没去实施</li>
<li>最近花了一点时间，终于把它搭建好了</li>
<li>这是我通过网上学习使用Hexo与Github搭建的一个博客网站</li>
<li>以后我会不定期发布一些自己的学习经历以及物联网相关的资讯</li>
<li>谢谢大家的关注</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
